using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace sehetak.Models
{
    public partial class SOFTECHDB9Context : DbContext
    {
        public SOFTECHDB9Context()
        {
        }

        public SOFTECHDB9Context(DbContextOptions<SOFTECHDB9Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Accdocnumbers> Accdocnumbers { get; set; }
        public virtual DbSet<Accfinalaccounts> Accfinalaccounts { get; set; }
        public virtual DbSet<Accitems> Accitems { get; set; }
        public virtual DbSet<Accitems7> Accitems7 { get; set; }
        public virtual DbSet<Accitemsbud> Accitemsbud { get; set; }
        public virtual DbSet<AccitemsDate> AccitemsDate { get; set; }
        public virtual DbSet<Accsysitems> Accsysitems { get; set; }
        public virtual DbSet<Acctrans> Acctrans { get; set; }
        public virtual DbSet<Acctrans2> Acctrans2 { get; set; }
        public virtual DbSet<Acctrans3> Acctrans3 { get; set; }
        public virtual DbSet<AcctransErr> AcctransErr { get; set; }
        public virtual DbSet<Acctransnotes> Acctransnotes { get; set; }
        public virtual DbSet<Acctranssources> Acctranssources { get; set; }
        public virtual DbSet<Actimages> Actimages { get; set; }
        public virtual DbSet<ActiveingAe> ActiveingAe { get; set; }
        public virtual DbSet<ActiveingAlt> ActiveingAlt { get; set; }
        public virtual DbSet<ActiveingCi> ActiveingCi { get; set; }
        public virtual DbSet<ActiveingDdi> ActiveingDdi { get; set; }
        public virtual DbSet<ActiveingDose> ActiveingDose { get; set; }
        public virtual DbSet<ActiveingOthers> ActiveingOthers { get; set; }
        public virtual DbSet<ActiveingPrec> ActiveingPrec { get; set; }
        public virtual DbSet<Activeingredients> Activeingredients { get; set; }
        public virtual DbSet<ActiveingUses> ActiveingUses { get; set; }
        public virtual DbSet<Actref> Actref { get; set; }
        public virtual DbSet<Advancedexpenses> Advancedexpenses { get; set; }
        public virtual DbSet<Areas> Areas { get; set; }
        public virtual DbSet<BackupInfo> BackupInfo { get; set; }
        public virtual DbSet<BackupInfoDel> BackupInfoDel { get; set; }
        public virtual DbSet<Bankcurrencies> Bankcurrencies { get; set; }
        public virtual DbSet<Bankcurrenciestrans> Bankcurrenciestrans { get; set; }
        public virtual DbSet<Banks> Banks { get; set; }
        public virtual DbSet<Banks2> Banks2 { get; set; }
        public virtual DbSet<BanksDate> BanksDate { get; set; }
        public virtual DbSet<Banksopenbal> Banksopenbal { get; set; }
        public virtual DbSet<BanksSafePending> BanksSafePending { get; set; }
        public virtual DbSet<Bankstrans> Bankstrans { get; set; }
        public virtual DbSet<Banksusers> Banksusers { get; set; }
        public virtual DbSet<Banksx> Banksx { get; set; }
        public virtual DbSet<BasicData> BasicData { get; set; }
        public virtual DbSet<BasicDataWs> BasicDataWs { get; set; }
        public virtual DbSet<Bath> Bath { get; set; }
        public virtual DbSet<Bloodgroups> Bloodgroups { get; set; }
        public virtual DbSet<BranchBackup> BranchBackup { get; set; }
        public virtual DbSet<BranchBackupin> BranchBackupin { get; set; }
        public virtual DbSet<Branches> Branches { get; set; }
        public virtual DbSet<Branches9> Branches9 { get; set; }
        public virtual DbSet<Branchesales> Branchesales { get; set; }
        public virtual DbSet<Branchesales5> Branchesales5 { get; set; }
        public virtual DbSet<Branchesalescc> Branchesalescc { get; set; }
        public virtual DbSet<Branchesalescc5> Branchesalescc5 { get; set; }
        public virtual DbSet<Branchesalesres> Branchesalesres { get; set; }
        public virtual DbSet<BranchesAll> BranchesAll { get; set; }
        public virtual DbSet<Branchescash> Branchescash { get; set; }
        public virtual DbSet<BranchesDel> BranchesDel { get; set; }
        public virtual DbSet<Branchesgeography> Branchesgeography { get; set; }
        public virtual DbSet<Branchesintervals> Branchesintervals { get; set; }
        public virtual DbSet<Branchesspends> Branchesspends { get; set; }
        public virtual DbSet<Branchestat> Branchestat { get; set; }
        public virtual DbSet<BranchesTrans> BranchesTrans { get; set; }
        public virtual DbSet<Branchimages> Branchimages { get; set; }
        public virtual DbSet<BranchMain> BranchMain { get; set; }
        public virtual DbSet<BranchMain30> BranchMain30 { get; set; }
        public virtual DbSet<Branchprints> Branchprints { get; set; }
        public virtual DbSet<Branchstores> Branchstores { get; set; }
        public virtual DbSet<Britems> Britems { get; set; }
        public virtual DbSet<Callslog> Callslog { get; set; }
        public virtual DbSet<Caraccidents> Caraccidents { get; set; }
        public virtual DbSet<Cars> Cars { get; set; }
        public virtual DbSet<CarsDailystatus> CarsDailystatus { get; set; }
        public virtual DbSet<CarsItemschanges> CarsItemschanges { get; set; }
        public virtual DbSet<Carsmodif> Carsmodif { get; set; }
        public virtual DbSet<CcarsPlan> CcarsPlan { get; set; }
        public virtual DbSet<CcarsPlanm> CcarsPlanm { get; set; }
        public virtual DbSet<CcarsTripsinplan> CcarsTripsinplan { get; set; }
        public virtual DbSet<CcarsTripsprevented> CcarsTripsprevented { get; set; }
        public virtual DbSet<Cfarmalog> Cfarmalog { get; set; }
        public virtual DbSet<CfarmalogSsb9> CfarmalogSsb9 { get; set; }
        public virtual DbSet<CfarmaMessages> CfarmaMessages { get; set; }
        public virtual DbSet<Cfarmasetup> Cfarmasetup { get; set; }
        public virtual DbSet<CfarmaTransmessages> CfarmaTransmessages { get; set; }
        public virtual DbSet<Cheques> Cheques { get; set; }
        public virtual DbSet<Cheques5> Cheques5 { get; set; }
        public virtual DbSet<Cheques51> Cheques51 { get; set; }
        public virtual DbSet<Chequesash> Chequesash { get; set; }
        public virtual DbSet<ChequesCashed> ChequesCashed { get; set; }
        public virtual DbSet<Chequeslevels> Chequeslevels { get; set; }
        public virtual DbSet<Chequeslimits> Chequeslimits { get; set; }
        public virtual DbSet<ChequesToBank> ChequesToBank { get; set; }
        public virtual DbSet<Chequestrans> Chequestrans { get; set; }
        public virtual DbSet<Chequestrans5> Chequestrans5 { get; set; }
        public virtual DbSet<ChequesTrial> ChequesTrial { get; set; }
        public virtual DbSet<ChequesTrial1> ChequesTrial1 { get; set; }
        public virtual DbSet<Clabsetup> Clabsetup { get; set; }
        public virtual DbSet<CnIssues2> CnIssues2 { get; set; }
        public virtual DbSet<CommunicTselect> CommunicTselect { get; set; }
        public virtual DbSet<CommunicTselecthd> CommunicTselecthd { get; set; }
        public virtual DbSet<CommunicTselects> CommunicTselects { get; set; }
        public virtual DbSet<Companiesitems> Companiesitems { get; set; }
        public virtual DbSet<Companiesitems5> Companiesitems5 { get; set; }
        public virtual DbSet<Contractstypes> Contractstypes { get; set; }
        public virtual DbSet<Costcenterclassif> Costcenterclassif { get; set; }
        public virtual DbSet<Costcenters> Costcenters { get; set; }
        public virtual DbSet<Costcenterssources> Costcenterssources { get; set; }
        public virtual DbSet<Costcenterstrans> Costcenterstrans { get; set; }
        public virtual DbSet<Costcenterstrans5> Costcenterstrans5 { get; set; }
        public virtual DbSet<CpBrancheshawafez> CpBrancheshawafez { get; set; }
        public virtual DbSet<CpBranchestargets> CpBranchestargets { get; set; }
        public virtual DbSet<CpEmphawafez> CpEmphawafez { get; set; }
        public virtual DbSet<CpEmphawafez2> CpEmphawafez2 { get; set; }
        public virtual DbSet<CrmBasicdata> CrmBasicdata { get; set; }
        public virtual DbSet<Custbranchcontract> Custbranchcontract { get; set; }
        public virtual DbSet<Custcancelsno> Custcancelsno { get; set; }
        public virtual DbSet<Custcaretrans> Custcaretrans { get; set; }
        public virtual DbSet<Custcaretransdetail> Custcaretransdetail { get; set; }
        public virtual DbSet<Custcaretransdetailx> Custcaretransdetailx { get; set; }
        public virtual DbSet<Custcaretransm> Custcaretransm { get; set; }
        public virtual DbSet<Custdiscounts> Custdiscounts { get; set; }
        public virtual DbSet<CustdiscountsHist> CustdiscountsHist { get; set; }
        public virtual DbSet<Custdiscountstrans> Custdiscountstrans { get; set; }
        public virtual DbSet<Custdiscpclassif> Custdiscpclassif { get; set; }
        public virtual DbSet<Custmaint> Custmaint { get; set; }
        public virtual DbSet<Custmaintm> Custmaintm { get; set; }
        public virtual DbSet<Custnosaleitems> Custnosaleitems { get; set; }
        public virtual DbSet<CustnosaleitemsHist> CustnosaleitemsHist { get; set; }
        public virtual DbSet<Customerbranches> Customerbranches { get; set; }
        public virtual DbSet<CustOrders> CustOrders { get; set; }
        public virtual DbSet<Custpatientrelatives> Custpatientrelatives { get; set; }
        public virtual DbSet<Custpayments> Custpayments { get; set; }
        public virtual DbSet<Custrefdoctors> Custrefdoctors { get; set; }
        public virtual DbSet<Custrelativespercent> Custrelativespercent { get; set; }
        public virtual DbSet<Custrelativespercentsource> Custrelativespercentsource { get; set; }
        public virtual DbSet<Custtests> Custtests { get; set; }
        public virtual DbSet<Dailyexpenses> Dailyexpenses { get; set; }
        public virtual DbSet<Dailyexpenses5> Dailyexpenses5 { get; set; }
        public virtual DbSet<Diseasegroups> Diseasegroups { get; set; }
        public virtual DbSet<Diseases> Diseases { get; set; }
        public virtual DbSet<Diseasesdata> Diseasesdata { get; set; }
        public virtual DbSet<Diseasesections> Diseasesections { get; set; }
        public virtual DbSet<Districts> Districts { get; set; }
        public virtual DbSet<Doctorsspecialty> Doctorsspecialty { get; set; }
        public virtual DbSet<Drugsclassif> Drugsclassif { get; set; }
        public virtual DbSet<Empagingtypes> Empagingtypes { get; set; }
        public virtual DbSet<Empattendance> Empattendance { get; set; }
        public virtual DbSet<Empattenddeductions> Empattenddeductions { get; set; }
        public virtual DbSet<Empattenddeductions2> Empattenddeductions2 { get; set; }
        public virtual DbSet<Empattendspecial> Empattendspecial { get; set; }
        public virtual DbSet<Empborrow> Empborrow { get; set; }
        public virtual DbSet<Empborrowpayments> Empborrowpayments { get; set; }
        public virtual DbSet<Empbuys> Empbuys { get; set; }
        public virtual DbSet<Empcomments> Empcomments { get; set; }
        public virtual DbSet<Empdailyattendance> Empdailyattendance { get; set; }
        public virtual DbSet<Empdailyattendance2> Empdailyattendance2 { get; set; }
        public virtual DbSet<Empdailyattendancecalc> Empdailyattendancecalc { get; set; }
        public virtual DbSet<Empdailyattendanceclose> Empdailyattendanceclose { get; set; }
        public virtual DbSet<Empdailyattendancesum> Empdailyattendancesum { get; set; }
        public virtual DbSet<Empdailytimes> Empdailytimes { get; set; }
        public virtual DbSet<Empdailytimes2> Empdailytimes2 { get; set; }
        public virtual DbSet<Empdatatrans> Empdatatrans { get; set; }
        public virtual DbSet<Empdegrees> Empdegrees { get; set; }
        public virtual DbSet<Empdepts> Empdepts { get; set; }
        public virtual DbSet<EmpEarntax> EmpEarntax { get; set; }
        public virtual DbSet<Empexchanges> Empexchanges { get; set; }
        public virtual DbSet<Empexperiences> Empexperiences { get; set; }
        public virtual DbSet<Empgifts> Empgifts { get; set; }
        public virtual DbSet<Empjobdescription> Empjobdescription { get; set; }
        public virtual DbSet<Empleaves> Empleaves { get; set; }
        public virtual DbSet<Employeeshawafez> Employeeshawafez { get; set; }
        public virtual DbSet<Employeesimages> Employeesimages { get; set; }
        public virtual DbSet<Employeesimages2> Employeesimages2 { get; set; }
        public virtual DbSet<Empmilitary> Empmilitary { get; set; }
        public virtual DbSet<Empnightshifts> Empnightshifts { get; set; }
        public virtual DbSet<Empoffdays> Empoffdays { get; set; }
        public virtual DbSet<Empoffdaystrans> Empoffdaystrans { get; set; }
        public virtual DbSet<Empothers> Empothers { get; set; }
        public virtual DbSet<Empovertime> Empovertime { get; set; }
        public virtual DbSet<Emppausesalary> Emppausesalary { get; set; }
        public virtual DbSet<Emppenaltyrules> Emppenaltyrules { get; set; }
        public virtual DbSet<Empplan> Empplan { get; set; }
        public virtual DbSet<Emprecruit> Emprecruit { get; set; }
        public virtual DbSet<Emprelatives> Emprelatives { get; set; }
        public virtual DbSet<Empsalaries> Empsalaries { get; set; }
        public virtual DbSet<Empsalesplan> Empsalesplan { get; set; }
        public virtual DbSet<Empspecialdeduct> Empspecialdeduct { get; set; }
        public virtual DbSet<Empspecialgifts> Empspecialgifts { get; set; }
        public virtual DbSet<Empspecialgiftsm> Empspecialgiftsm { get; set; }
        public virtual DbSet<Emptasks> Emptasks { get; set; }
        public virtual DbSet<EmpTaxfreeitems> EmpTaxfreeitems { get; set; }
        public virtual DbSet<Emptimes> Emptimes { get; set; }
        public virtual DbSet<Emptraining> Emptraining { get; set; }
        public virtual DbSet<Empyearlyincrease> Empyearlyincrease { get; set; }
        public virtual DbSet<Empyearlyincrease2> Empyearlyincrease2 { get; set; }
        public virtual DbSet<ErrorMessages> ErrorMessages { get; set; }
        public virtual DbSet<ErrorMessagesSys> ErrorMessagesSys { get; set; }
        public virtual DbSet<Expenses> Expenses { get; set; }
        public virtual DbSet<Expensesclassif> Expensesclassif { get; set; }
        public virtual DbSet<Expensesopenbal> Expensesopenbal { get; set; }
        public virtual DbSet<FaClassif1> FaClassif1 { get; set; }
        public virtual DbSet<FaClassif2> FaClassif2 { get; set; }
        public virtual DbSet<FaClassif3> FaClassif3 { get; set; }
        public virtual DbSet<FaFixedassets> FaFixedassets { get; set; }
        public virtual DbSet<FaFixedassetsComment> FaFixedassetsComment { get; set; }
        public virtual DbSet<FaFixedassetsDate> FaFixedassetsDate { get; set; }
        public virtual DbSet<FaFixedassetsitems> FaFixedassetsitems { get; set; }
        public virtual DbSet<FaFixedassetsm> FaFixedassetsm { get; set; }
        public virtual DbSet<FaFixedassetsTrans> FaFixedassetsTrans { get; set; }
        public virtual DbSet<FaLocations> FaLocations { get; set; }
        public virtual DbSet<FaMonthlydep> FaMonthlydep { get; set; }
        public virtual DbSet<Fatorastatus> Fatorastatus { get; set; }
        public virtual DbSet<FaYearlydep> FaYearlydep { get; set; }
        public virtual DbSet<Financialdocs> Financialdocs { get; set; }
        public virtual DbSet<Hciclaimforms> Hciclaimforms { get; set; }
        public virtual DbSet<Hcitrans> Hcitrans { get; set; }
        public virtual DbSet<Hcitrans2> Hcitrans2 { get; set; }
        public virtual DbSet<HistoryStore> HistoryStore { get; set; }
        public virtual DbSet<HiTypes> HiTypes { get; set; }
        public virtual DbSet<Holidays> Holidays { get; set; }
        public virtual DbSet<Hrooms> Hrooms { get; set; }
        public virtual DbSet<Hroomsbeds> Hroomsbeds { get; set; }
        public virtual DbSet<Hroomstatuses> Hroomstatuses { get; set; }
        public virtual DbSet<Hservices> Hservices { get; set; }
        public virtual DbSet<IcuFluidbalance> IcuFluidbalance { get; set; }
        public virtual DbSet<IcuFluids> IcuFluids { get; set; }
        public virtual DbSet<IcuForm1ProblemList> IcuForm1ProblemList { get; set; }
        public virtual DbSet<IcuMedications> IcuMedications { get; set; }
        public virtual DbSet<IcuNursesnotes> IcuNursesnotes { get; set; }
        public virtual DbSet<IcuNursingmedicationshee> IcuNursingmedicationshee { get; set; }
        public virtual DbSet<IcuProblems> IcuProblems { get; set; }
        public virtual DbSet<IcuRoutes> IcuRoutes { get; set; }
        public virtual DbSet<IcuVitalsigns> IcuVitalsigns { get; set; }
        public virtual DbSet<Imports> Imports { get; set; }
        public virtual DbSet<Importsm> Importsm { get; set; }
        public virtual DbSet<Intervals> Intervals { get; set; }
        public virtual DbSet<Invoices> Invoices { get; set; }
        public virtual DbSet<Ipinvclasses> Ipinvclasses { get; set; }
        public virtual DbSet<Itembarcode> Itembarcode { get; set; }
        public virtual DbSet<Items> Items { get; set; }
        public virtual DbSet<Itemsai> Itemsai { get; set; }
        public virtual DbSet<ItemsChangefollow> ItemsChangefollow { get; set; }
        public virtual DbSet<Itemsclassif> Itemsclassif { get; set; }
        public virtual DbSet<Itemscurrencycosts> Itemscurrencycosts { get; set; }
        public virtual DbSet<Itemseffect> Itemseffect { get; set; }
        public virtual DbSet<Itemseffect1> Itemseffect1 { get; set; }
        public virtual DbSet<Itemseffect2> Itemseffect2 { get; set; }
        public virtual DbSet<Itemseffect21> Itemseffect21 { get; set; }
        public virtual DbSet<Itemsfamily> Itemsfamily { get; set; }
        public virtual DbSet<Itemshape> Itemshape { get; set; }
        public virtual DbSet<Itemsimages> Itemsimages { get; set; }
        public virtual DbSet<Itemsimports> Itemsimports { get; set; }
        public virtual DbSet<Itemsimportsm> Itemsimportsm { get; set; }
        public virtual DbSet<ItemsManuf> ItemsManuf { get; set; }
        public virtual DbSet<Itemsorigin> Itemsorigin { get; set; }
        public virtual DbSet<Itemspricestrans> Itemspricestrans { get; set; }
        public virtual DbSet<Itemsproducers> Itemsproducers { get; set; }
        public virtual DbSet<ItemsReq> ItemsReq { get; set; }
        public virtual DbSet<Itemssno> Itemssno { get; set; }
        public virtual DbSet<Itemssuppliers> Itemssuppliers { get; set; }
        public virtual DbSet<Itemstext> Itemstext { get; set; }
        public virtual DbSet<Itemstitles> Itemstitles { get; set; }
        public virtual DbSet<Itemstoreclassif> Itemstoreclassif { get; set; }
        public virtual DbSet<Itemstores> Itemstores { get; set; }
        public virtual DbSet<Itemstrans> Itemstrans { get; set; }
        public virtual DbSet<Itemstree> Itemstree { get; set; }
        public virtual DbSet<Itemsunits> Itemsunits { get; set; }
        public virtual DbSet<ItemsunitsWs> ItemsunitsWs { get; set; }
        public virtual DbSet<ItemsWs> ItemsWs { get; set; }
        public virtual DbSet<Jocomments> Jocomments { get; set; }
        public virtual DbSet<Labunits> Labunits { get; set; }
        public virtual DbSet<Lastdocnumbers> Lastdocnumbers { get; set; }
        public virtual DbSet<LastdocnumbersDate> LastdocnumbersDate { get; set; }
        public virtual DbSet<LastdocnumbersInv> LastdocnumbersInv { get; set; }
        public virtual DbSet<Lastdocnumberstt> Lastdocnumberstt { get; set; }
        public virtual DbSet<Lastorderno> Lastorderno { get; set; }
        public virtual DbSet<Lastordernott> Lastordernott { get; set; }
        public virtual DbSet<Lcpointstrans> Lcpointstrans { get; set; }
        public virtual DbSet<Leaves> Leaves { get; set; }
        public virtual DbSet<Localcustomers> Localcustomers { get; set; }
        public virtual DbSet<Localcustomers2> Localcustomers2 { get; set; }
        public virtual DbSet<Localcustomersapp> Localcustomersapp { get; set; }
        public virtual DbSet<Localcustomersdata> Localcustomersdata { get; set; }
        public virtual DbSet<Localcustomersdatesd> Localcustomersdatesd { get; set; }
        public virtual DbSet<Localcustomersdatesdd> Localcustomersdatesdd { get; set; }
        public virtual DbSet<Localcustomersdatesddh> Localcustomersdatesddh { get; set; }
        public virtual DbSet<Localcustomersdrugs> Localcustomersdrugs { get; set; }
        public virtual DbSet<Localcustomerspoints> Localcustomerspoints { get; set; }
        public virtual DbSet<Localcustomersrelatives> Localcustomersrelatives { get; set; }
        public virtual DbSet<Localcustomersusersd> Localcustomersusersd { get; set; }
        public virtual DbSet<MachineResults> MachineResults { get; set; }
        public virtual DbSet<Machines> Machines { get; set; }
        public virtual DbSet<MachineSamples> MachineSamples { get; set; }
        public virtual DbSet<MachineTests> MachineTests { get; set; }
        public virtual DbSet<MainBranch30> MainBranch30 { get; set; }
        public virtual DbSet<Maintforms> Maintforms { get; set; }
        public virtual DbSet<Maintformsm> Maintformsm { get; set; }
        public virtual DbSet<Managerdiscount> Managerdiscount { get; set; }
        public virtual DbSet<Mglevels> Mglevels { get; set; }
        public virtual DbSet<Mhcomp> Mhcomp { get; set; }
        public virtual DbSet<Mi3Patientdata> Mi3Patientdata { get; set; }
        public virtual DbSet<Mi3Patienttests> Mi3Patienttests { get; set; }
        public virtual DbSet<Mi3Trans> Mi3Trans { get; set; }
        public virtual DbSet<Mitems> Mitems { get; set; }
        public virtual DbSet<Mitemshist> Mitemshist { get; set; }
        public virtual DbSet<Mitemssys> Mitemssys { get; set; }
        public virtual DbSet<Modelspecs> Modelspecs { get; set; }
        public virtual DbSet<Monthes> Monthes { get; set; }
        public virtual DbSet<Motalba> Motalba { get; set; }
        public virtual DbSet<MotalbaClab> MotalbaClab { get; set; }
        public virtual DbSet<MotalbaFields> MotalbaFields { get; set; }
        public virtual DbSet<MotalbaForms> MotalbaForms { get; set; }
        public virtual DbSet<MotalbaFormsClab> MotalbaFormsClab { get; set; }
        public virtual DbSet<Motalbas> Motalbas { get; set; }
        public virtual DbSet<NamesAe> NamesAe { get; set; }
        public virtual DbSet<Nationalities> Nationalities { get; set; }
        public virtual DbSet<Offers> Offers { get; set; }
        public virtual DbSet<Offersitemtext> Offersitemtext { get; set; }
        public virtual DbSet<Offersm> Offersm { get; set; }
        public virtual DbSet<Offerstext> Offerstext { get; set; }
        public virtual DbSet<Parameterranges> Parameterranges { get; set; }
        public virtual DbSet<Parametersunits> Parametersunits { get; set; }
        public virtual DbSet<Parametertypes> Parametertypes { get; set; }
        public virtual DbSet<Patientbeds> Patientbeds { get; set; }
        public virtual DbSet<Patientcategories> Patientcategories { get; set; }
        public virtual DbSet<PatientcategoriesTrans> PatientcategoriesTrans { get; set; }
        public virtual DbSet<Patientcomments> Patientcomments { get; set; }
        public virtual DbSet<Patientdata> Patientdata { get; set; }
        public virtual DbSet<Patientdata2> Patientdata2 { get; set; }
        public virtual DbSet<Patientdatadiagnosis> Patientdatadiagnosis { get; set; }
        public virtual DbSet<Patientdatan> Patientdatan { get; set; }
        public virtual DbSet<Patientdatasno> Patientdatasno { get; set; }
        public virtual DbSet<Patientdeletion> Patientdeletion { get; set; }
        public virtual DbSet<Patientitems> Patientitems { get; set; }
        public virtual DbSet<Patientmedhistory> Patientmedhistory { get; set; }
        public virtual DbSet<Patientpayments> Patientpayments { get; set; }
        public virtual DbSet<Patientpreparations> Patientpreparations { get; set; }
        public virtual DbSet<Patientresults> Patientresults { get; set; }
        public virtual DbSet<Patientresults2> Patientresults2 { get; set; }
        public virtual DbSet<Patientresultsdel> Patientresultsdel { get; set; }
        public virtual DbSet<Patientresultsdelivery> Patientresultsdelivery { get; set; }
        public virtual DbSet<Patientresultsimages> Patientresultsimages { get; set; }
        public virtual DbSet<Patientresultsrep> Patientresultsrep { get; set; }
        public virtual DbSet<Patientresultstext> Patientresultstext { get; set; }
        public virtual DbSet<Patientroomstrans> Patientroomstrans { get; set; }
        public virtual DbSet<PatientsnamesTrans> PatientsnamesTrans { get; set; }
        public virtual DbSet<PatientsNotyettaken> PatientsNotyettaken { get; set; }
        public virtual DbSet<Patienttestdata2> Patienttestdata2 { get; set; }
        public virtual DbSet<Patienttests> Patienttests { get; set; }
        public virtual DbSet<Patienttests2> Patienttests2 { get; set; }
        public virtual DbSet<Patienttestsdiagnosis> Patienttestsdiagnosis { get; set; }
        public virtual DbSet<Patienttestsitems> Patienttestsitems { get; set; }
        public virtual DbSet<Patienttestsmod> Patienttestsmod { get; set; }
        public virtual DbSet<Patientteststime> Patientteststime { get; set; }
        public virtual DbSet<Patientteststrans> Patientteststrans { get; set; }
        public virtual DbSet<Patienttitles> Patienttitles { get; set; }
        public virtual DbSet<Patientvcomments> Patientvcomments { get; set; }
        public virtual DbSet<Paymentstypes> Paymentstypes { get; set; }
        public virtual DbSet<PcategoriesGroups> PcategoriesGroups { get; set; }
        public virtual DbSet<Pcategorybranches> Pcategorybranches { get; set; }
        public virtual DbSet<Pcmachines> Pcmachines { get; set; }
        public virtual DbSet<Pcmachinescomm> Pcmachinescomm { get; set; }
        public virtual DbSet<Pdatesout> Pdatesout { get; set; }
        public virtual DbSet<Personphones> Personphones { get; set; }
        public virtual DbSet<Personsactivityprices> Personsactivityprices { get; set; }
        public virtual DbSet<Personsdata> Personsdata { get; set; }
        public virtual DbSet<Personsdata1> Personsdata1 { get; set; }
        public virtual DbSet<Personsdata11> Personsdata11 { get; set; }
        public virtual DbSet<Personsdata1pic> Personsdata1pic { get; set; }
        public virtual DbSet<Personsdata2> Personsdata2 { get; set; }
        public virtual DbSet<Personsdata9> Personsdata9 { get; set; }
        public virtual DbSet<Personsdatacomm> Personsdatacomm { get; set; }
        public virtual DbSet<Personsdatacontracts> Personsdatacontracts { get; set; }
        public virtual DbSet<PersonsdataDate> PersonsdataDate { get; set; }
        public virtual DbSet<Personsdatapersons> Personsdatapersons { get; set; }
        public virtual DbSet<Personsdatastaff> Personsdatastaff { get; set; }
        public virtual DbSet<Personsdatatax> Personsdatatax { get; set; }
        public virtual DbSet<PersonsdataWs> PersonsdataWs { get; set; }
        public virtual DbSet<Personsopenbal> Personsopenbal { get; set; }
        public virtual DbSet<Personsphotos> Personsphotos { get; set; }
        public virtual DbSet<Persontypes> Persontypes { get; set; }
        public virtual DbSet<Persontypesclassif> Persontypesclassif { get; set; }
        public virtual DbSet<Persontypesclassif2> Persontypesclassif2 { get; set; }
        public virtual DbSet<Phonetypes> Phonetypes { get; set; }
        public virtual DbSet<Piccrmhousecalls> Piccrmhousecalls { get; set; }
        public virtual DbSet<Piccrmitems> Piccrmitems { get; set; }
        public virtual DbSet<Piccrmorderdel> Piccrmorderdel { get; set; }
        public virtual DbSet<Piccrmorders> Piccrmorders { get; set; }
        public virtual DbSet<Piccrmorders5> Piccrmorders5 { get; set; }
        public virtual DbSet<Piccrmordersnos> Piccrmordersnos { get; set; }
        public virtual DbSet<Piccrmorderstatus> Piccrmorderstatus { get; set; }
        public virtual DbSet<Piccrmorderstrans> Piccrmorderstrans { get; set; }
        public virtual DbSet<Picdoctors> Picdoctors { get; set; }
        public virtual DbSet<Picimages> Picimages { get; set; }
        public virtual DbSet<Picmeals> Picmeals { get; set; }
        public virtual DbSet<Picmedicalevents> Picmedicalevents { get; set; }
        public virtual DbSet<Picmedicalhistory> Picmedicalhistory { get; set; }
        public virtual DbSet<Picmhcevents> Picmhcevents { get; set; }
        public virtual DbSet<Picpoints> Picpoints { get; set; }
        public virtual DbSet<Picquest> Picquest { get; set; }
        public virtual DbSet<Picquesttrans> Picquesttrans { get; set; }
        public virtual DbSet<Picstrans> Picstrans { get; set; }
        public virtual DbSet<Popupsusers> Popupsusers { get; set; }
        public virtual DbSet<PosCancel> PosCancel { get; set; }
        public virtual DbSet<PosCancelOld> PosCancelOld { get; set; }
        public virtual DbSet<PosShiftclosing> PosShiftclosing { get; set; }
        public virtual DbSet<Postext> Postext { get; set; }
        public virtual DbSet<Preparations> Preparations { get; set; }
        public virtual DbSet<Profiles> Profiles { get; set; }
        public virtual DbSet<Profilesbranches> Profilesbranches { get; set; }
        public virtual DbSet<Profilesprices> Profilesprices { get; set; }
        public virtual DbSet<Profiletests> Profiletests { get; set; }
        public virtual DbSet<Profiletestsdiscp> Profiletestsdiscp { get; set; }
        public virtual DbSet<Provinces> Provinces { get; set; }
        public virtual DbSet<R3britems> R3britems { get; set; }
        public virtual DbSet<R3stktrans> R3stktrans { get; set; }
        public virtual DbSet<R3stktransm> R3stktransm { get; set; }
        public virtual DbSet<R3stktransold> R3stktransold { get; set; }
        public virtual DbSet<Recempdatatrans> Recempdatatrans { get; set; }
        public virtual DbSet<Recempdegrees> Recempdegrees { get; set; }
        public virtual DbSet<Recempexperiences> Recempexperiences { get; set; }
        public virtual DbSet<Recempjobs> Recempjobs { get; set; }
        public virtual DbSet<Recempmilitary> Recempmilitary { get; set; }
        public virtual DbSet<Recemprelatives> Recemprelatives { get; set; }
        public virtual DbSet<ReceptionShiftclosing> ReceptionShiftclosing { get; set; }
        public virtual DbSet<Recpersonsdata2> Recpersonsdata2 { get; set; }
        public virtual DbSet<Refdoctors> Refdoctors { get; set; }
        public virtual DbSet<RefdoctorsDeal> RefdoctorsDeal { get; set; }
        public virtual DbSet<Refdoctorsdschedule> Refdoctorsdschedule { get; set; }
        public virtual DbSet<RefdoctorsGroups> RefdoctorsGroups { get; set; }
        public virtual DbSet<RefdoctorsMtob> RefdoctorsMtob { get; set; }
        public virtual DbSet<Refdoctorsschedule> Refdoctorsschedule { get; set; }
        public virtual DbSet<RefusedchequesPay> RefusedchequesPay { get; set; }
        public virtual DbSet<Relatives> Relatives { get; set; }
        public virtual DbSet<Relisions> Relisions { get; set; }
        public virtual DbSet<Resultsrevising> Resultsrevising { get; set; }
        public virtual DbSet<Resultsrevisingdocs> Resultsrevisingdocs { get; set; }
        public virtual DbSet<Returnsclassif> Returnsclassif { get; set; }
        public virtual DbSet<Returnsreasons> Returnsreasons { get; set; }
        public virtual DbSet<RunDate> RunDate { get; set; }
        public virtual DbSet<Salescomm> Salescomm { get; set; }
        public virtual DbSet<Salescomm5> Salescomm5 { get; set; }
        public virtual DbSet<Salespay> Salespay { get; set; }
        public virtual DbSet<Salesreserve> Salesreserve { get; set; }
        public virtual DbSet<Samples> Samples { get; set; }
        public virtual DbSet<Samplestrans> Samplestrans { get; set; }
        public virtual DbSet<Samplesunits> Samplesunits { get; set; }
        public virtual DbSet<Scan> Scan { get; set; }
        public virtual DbSet<Secretreptypes> Secretreptypes { get; set; }
        public virtual DbSet<SelectedTests> SelectedTests { get; set; }
        public virtual DbSet<ShPicPrefrences> ShPicPrefrences { get; set; }
        public virtual DbSet<Smsggdata> Smsggdata { get; set; }
        public virtual DbSet<Smsgggroups> Smsgggroups { get; set; }
        public virtual DbSet<Smsggorders> Smsggorders { get; set; }
        public virtual DbSet<Smsggstamps> Smsggstamps { get; set; }
        public virtual DbSet<Smsggusergroups> Smsggusergroups { get; set; }
        public virtual DbSet<Softechreports> Softechreports { get; set; }
        public virtual DbSet<Specialoffers> Specialoffers { get; set; }
        public virtual DbSet<Specialoffersitems> Specialoffersitems { get; set; }
        public virtual DbSet<Ssbhelp> Ssbhelp { get; set; }
        public virtual DbSet<Stkbal> Stkbal { get; set; }
        public virtual DbSet<StkbalCheck> StkbalCheck { get; set; }
        public virtual DbSet<StkbalCheck3> StkbalCheck3 { get; set; }
        public virtual DbSet<Stkbalexpiry> Stkbalexpiry { get; set; }
        public virtual DbSet<Stkbalexpiryneg> Stkbalexpiryneg { get; set; }
        public virtual DbSet<Stktrans> Stktrans { get; set; }
        public virtual DbSet<Stktrans5> Stktrans5 { get; set; }
        public virtual DbSet<Stktrans9> Stktrans9 { get; set; }
        public virtual DbSet<StktransBrrec> StktransBrrec { get; set; }
        public virtual DbSet<StktransHq> StktransHq { get; set; }
        public virtual DbSet<StktransIp> StktransIp { get; set; }
        public virtual DbSet<Stktransm> Stktransm { get; set; }
        public virtual DbSet<Stktransm5> Stktransm5 { get; set; }
        public virtual DbSet<Stktransm51> Stktransm51 { get; set; }
        public virtual DbSet<Stktransm9> Stktransm9 { get; set; }
        public virtual DbSet<StktransmBrrec> StktransmBrrec { get; set; }
        public virtual DbSet<Stktransmclassif> Stktransmclassif { get; set; }
        public virtual DbSet<Stktransmclassif5> Stktransmclassif5 { get; set; }
        public virtual DbSet<Stktransmcomm> Stktransmcomm { get; set; }
        public virtual DbSet<Stktransmcomm5> Stktransmcomm5 { get; set; }
        public virtual DbSet<StktransmHq> StktransmHq { get; set; }
        public virtual DbSet<StktransmInv> StktransmInv { get; set; }
        public virtual DbSet<Stktransmmcomm> Stktransmmcomm { get; set; }
        public virtual DbSet<Stktransmres> Stktransmres { get; set; }
        public virtual DbSet<StktransNeededBranch> StktransNeededBranch { get; set; }
        public virtual DbSet<Stktransres> Stktransres { get; set; }
        public virtual DbSet<Stktranssum> Stktranssum { get; set; }
        public virtual DbSet<Stockorders> Stockorders { get; set; }
        public virtual DbSet<Stockordersm> Stockordersm { get; set; }
        public virtual DbSet<Stockordersmpay> Stockordersmpay { get; set; }
        public virtual DbSet<Stockordersmtext> Stockordersmtext { get; set; }
        public virtual DbSet<Stockordersrec> Stockordersrec { get; set; }
        public virtual DbSet<Stocktaking> Stocktaking { get; set; }
        public virtual DbSet<StorebalDate> StorebalDate { get; set; }
        public virtual DbSet<StorebalDatem> StorebalDatem { get; set; }
        public virtual DbSet<Stores> Stores { get; set; }
        public virtual DbSet<Storesbal> Storesbal { get; set; }
        public virtual DbSet<Storesusers> Storesusers { get; set; }
        public virtual DbSet<Tattrans> Tattrans { get; set; }
        public virtual DbSet<TempAging> TempAging { get; set; }
        public virtual DbSet<TempAsh1> TempAsh1 { get; set; }
        public virtual DbSet<TempBarcodeLaser> TempBarcodeLaser { get; set; }
        public virtual DbSet<TempEmpsalguide> TempEmpsalguide { get; set; }
        public virtual DbSet<TempEmpslip> TempEmpslip { get; set; }
        public virtual DbSet<TempEmpslip2> TempEmpslip2 { get; set; }
        public virtual DbSet<TempEmpslipx> TempEmpslipx { get; set; }
        public virtual DbSet<TempFaDep> TempFaDep { get; set; }
        public virtual DbSet<TempFatStatus> TempFatStatus { get; set; }
        public virtual DbSet<TempInv5> TempInv5 { get; set; }
        public virtual DbSet<TempInv6> TempInv6 { get; set; }
        public virtual DbSet<TempInvoices> TempInvoices { get; set; }
        public virtual DbSet<TempPatientdataTest> TempPatientdataTest { get; set; }
        public virtual DbSet<TempPatientdataTest2> TempPatientdataTest2 { get; set; }
        public virtual DbSet<Temppic> Temppic { get; set; }
        public virtual DbSet<TempR4> TempR4 { get; set; }
        public virtual DbSet<TempR5> TempR5 { get; set; }
        public virtual DbSet<TempRFs1> TempRFs1 { get; set; }
        public virtual DbSet<TempRFs1Old> TempRFs1Old { get; set; }
        public virtual DbSet<TempRIs> TempRIs { get; set; }
        public virtual DbSet<TempRIsBak> TempRIsBak { get; set; }
        public virtual DbSet<TempRPs> TempRPs { get; set; }
        public virtual DbSet<TempRPsBak> TempRPsBak { get; set; }
        public virtual DbSet<TempRPsCopy> TempRPsCopy { get; set; }
        public virtual DbSet<TempRSec> TempRSec { get; set; }
        public virtual DbSet<TempRTrans2> TempRTrans2 { get; set; }
        public virtual DbSet<TempRTrans2big> TempRTrans2big { get; set; }
        public virtual DbSet<TempSnos> TempSnos { get; set; }
        public virtual DbSet<TempStock> TempStock { get; set; }
        public virtual DbSet<TempStorebalDate> TempStorebalDate { get; set; }
        public virtual DbSet<TempStorebalDateOld> TempStorebalDateOld { get; set; }
        public virtual DbSet<TempUTselect> TempUTselect { get; set; }
        public virtual DbSet<Testanames> Testanames { get; set; }
        public virtual DbSet<Testdata> Testdata { get; set; }
        public virtual DbSet<Testdataextrabc> Testdataextrabc { get; set; }
        public virtual DbSet<TestdataScan> TestdataScan { get; set; }
        public virtual DbSet<Testdays> Testdays { get; set; }
        public virtual DbSet<Testdaystrans> Testdaystrans { get; set; }
        public virtual DbSet<Testfixedcomment> Testfixedcomment { get; set; }
        public virtual DbSet<Testfixedcomments> Testfixedcomments { get; set; }
        public virtual DbSet<Testgroups> Testgroups { get; set; }
        public virtual DbSet<Testimages> Testimages { get; set; }
        public virtual DbSet<Testitems> Testitems { get; set; }
        public virtual DbSet<Testnames> Testnames { get; set; }
        public virtual DbSet<Testoutprices> Testoutprices { get; set; }
        public virtual DbSet<Testouttrans> Testouttrans { get; set; }
        public virtual DbSet<Testparameters> Testparameters { get; set; }
        public virtual DbSet<TestparamMchs> TestparamMchs { get; set; }
        public virtual DbSet<Testperforming> Testperforming { get; set; }
        public virtual DbSet<Testperformunits> Testperformunits { get; set; }
        public virtual DbSet<Testplantsoptions> Testplantsoptions { get; set; }
        public virtual DbSet<Testpreparation> Testpreparation { get; set; }
        public virtual DbSet<Testpreparations> Testpreparations { get; set; }
        public virtual DbSet<Testprices> Testprices { get; set; }
        public virtual DbSet<Testpricesdep> Testpricesdep { get; set; }
        public virtual DbSet<Testpricestrans> Testpricestrans { get; set; }
        public virtual DbSet<Testsamples> Testsamples { get; set; }
        public virtual DbSet<Testsconflicts> Testsconflicts { get; set; }
        public virtual DbSet<Testsmessages> Testsmessages { get; set; }
        public virtual DbSet<Testsperforming> Testsperforming { get; set; }
        public virtual DbSet<Tftable> Tftable { get; set; }
        public virtual DbSet<Tftablefix> Tftablefix { get; set; }
        public virtual DbSet<Tftablet> Tftablet { get; set; }
        public virtual DbSet<Transdoc> Transdoc { get; set; }
        public virtual DbSet<Transprints> Transprints { get; set; }
        public virtual DbSet<Trips> Trips { get; set; }
        public virtual DbSet<Tripsdata> Tripsdata { get; set; }
        public virtual DbSet<Tripsfiles> Tripsfiles { get; set; }
        public virtual DbSet<Tripsgifts> Tripsgifts { get; set; }
        public virtual DbSet<Tripsprices> Tripsprices { get; set; }
        public virtual DbSet<Tripspricesref> Tripspricesref { get; set; }
        public virtual DbSet<Tripsrentprices> Tripsrentprices { get; set; }
        public virtual DbSet<TskCustworkscomments> TskCustworkscomments { get; set; }
        public virtual DbSet<TskEmpworks> TskEmpworks { get; set; }
        public virtual DbSet<TskEmpworkscomments> TskEmpworkscomments { get; set; }
        public virtual DbSet<Unitreportsign> Unitreportsign { get; set; }
        public virtual DbSet<Usergroups> Usergroups { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Usersfavorites> Usersfavorites { get; set; }
        public virtual DbSet<Usersx> Usersx { get; set; }
        public virtual DbSet<Visitortickets> Visitortickets { get; set; }
        public virtual DbSet<Weekdays> Weekdays { get; set; }
        public virtual DbSet<Weeklyleaves> Weeklyleaves { get; set; }
        public virtual DbSet<Wpatientcomments> Wpatientcomments { get; set; }
        public virtual DbSet<Wusers> Wusers { get; set; }

        // Unable to generate entity type for table 'dbo.testsperforming_nb'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.satrak'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stkbalexpiry_ash'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.new'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.itembarcode_bk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.emptimeattendance'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.itembarcode_ws'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.patienttests_del'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.itembarcode_ws1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.rudate'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.items_bak'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stktransmcommtrans'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.pbcatvld'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.mhcomp_ws'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.patientunitcomments'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tftext'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.rs_threads'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.xx'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.wss'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.pat'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tempo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.loca_backup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.locappoints_backup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.temp_r_trans2big_old'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.pr'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.pbcattbl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.export'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.w'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.items_bak_21'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.itbarcode'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.itembarcode_excel'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.it31'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.pbcatfmt'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.rs_lastcommit'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stktransold'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.personphones_new'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.testdays_nb'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stktrans_360'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stkbalexpiry_errors'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.branchesgeography_ws'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.unitsreservation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.colenable'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.branchstores_new'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.mitems_ws'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.machine_results_rerun'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.local'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.localpoints'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.testtemp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.unitfixedcomment'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.personphones_360'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.testfixedcomment_old'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.checkjob'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.branch_main30_olddata'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.r3piccrmorderstatus'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.temp_r_trans2_old'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.machine_results_mm10m'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.localcustomers_450'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.r3piccrmordersnos'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.localcustomerspoints_450'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.patientrimages'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.communic_tselectsws'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.UPGRADE'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.custdiscpclassifcomm'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stkbalexpiry_wsm'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.branches_new'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.loc'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stores_new'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.branchesintervals_new'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.pbcatedt'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.pbcatcol'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.personsdatami'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.personsdatabranches'. Please see the warning messages.

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Server=10.13.200.212\\SQLEXPRESS;Database=SOFTECHDB9;user=sa;password=12345678;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Accdocnumbers>(entity =>
            {
                entity.HasKey(e => e.Acckey);

                entity.ToTable("accdocnumbers");

                entity.Property(e => e.Acckey)
                    .HasColumnName("acckey")
                    .ValueGeneratedNever();

                entity.Property(e => e.Accday).HasColumnName("accday");

                entity.Property(e => e.Accmonth).HasColumnName("accmonth");

                entity.Property(e => e.Accsno)
                    .HasColumnName("accsno")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Accsno2)
                    .HasColumnName("accsno2")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Accyear).HasColumnName("accyear");
            });

            modelBuilder.Entity<Accfinalaccounts>(entity =>
            {
                entity.HasKey(e => e.Accfinalcode);

                entity.ToTable("accfinalaccounts");

                entity.Property(e => e.Accfinalcode)
                    .HasColumnName("accfinalcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Accfinaldescr)
                    .IsRequired()
                    .HasColumnName("accfinaldescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Accitems>(entity =>
            {
                entity.HasKey(e => e.Accitemcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("accitems");

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Acccredit)
                    .HasColumnName("acccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acccreditopen)
                    .HasColumnName("acccreditopen")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acccredittemp)
                    .HasColumnName("acccredittemp")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accdebit)
                    .HasColumnName("accdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accdebitopen)
                    .HasColumnName("accdebitopen")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accdebittemp)
                    .HasColumnName("accdebittemp")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accfinalcode).HasColumnName("accfinalcode");

                entity.Property(e => e.Accitembud).HasColumnName("accitembud");

                entity.Property(e => e.Accitemfs).HasColumnName("accitemfs");

                entity.Property(e => e.Accitemis).HasColumnName("accitemis");

                entity.Property(e => e.Acciteml1)
                    .IsRequired()
                    .HasColumnName("acciteml1")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml2)
                    .HasColumnName("acciteml2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml3)
                    .HasColumnName("acciteml3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml4)
                    .HasColumnName("acciteml4")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml5)
                    .HasColumnName("acciteml5")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml6)
                    .HasColumnName("acciteml6")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemname)
                    .IsRequired()
                    .HasColumnName("accitemname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Acclast).HasColumnName("acclast");

                entity.Property(e => e.Accnature).HasColumnName("accnature");

                entity.Property(e => e.Accsystem)
                    .IsRequired()
                    .HasColumnName("accsystem")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Accitems7>(entity =>
            {
                entity.HasKey(e => e.Accitemcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("accitems7");

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Acccredit)
                    .HasColumnName("acccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acccreditopen)
                    .HasColumnName("acccreditopen")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acccredittemp)
                    .HasColumnName("acccredittemp")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accdebit)
                    .HasColumnName("accdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accdebitopen)
                    .HasColumnName("accdebitopen")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accdebittemp)
                    .HasColumnName("accdebittemp")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accfinalcode).HasColumnName("accfinalcode");

                entity.Property(e => e.Acciteml1)
                    .IsRequired()
                    .HasColumnName("acciteml1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml2)
                    .HasColumnName("acciteml2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml3)
                    .HasColumnName("acciteml3")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml4)
                    .HasColumnName("acciteml4")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml5)
                    .HasColumnName("acciteml5")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml6)
                    .HasColumnName("acciteml6")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemname)
                    .IsRequired()
                    .HasColumnName("accitemname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Acclast).HasColumnName("acclast");

                entity.Property(e => e.Accnature).HasColumnName("accnature");

                entity.Property(e => e.Accsystem)
                    .IsRequired()
                    .HasColumnName("accsystem")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Accitemsbud>(entity =>
            {
                entity.HasKey(e => new { e.Acciteml1, e.Accyear, e.Accmonth, e.Accbudcode, e.Accitemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("accitemsbud");

                entity.Property(e => e.Acciteml1)
                    .HasColumnName("acciteml1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Accyear).HasColumnName("accyear");

                entity.Property(e => e.Accmonth).HasColumnName("accmonth");

                entity.Property(e => e.Accbudcode)
                    .HasColumnName("accbudcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemvalue)
                    .HasColumnName("accitemvalue")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AccitemsDate>(entity =>
            {
                entity.HasKey(e => new { e.Refdate, e.Accitemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("accitems_date");

                entity.Property(e => e.Refdate)
                    .HasColumnName("refdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acccredit)
                    .HasColumnName("acccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Accdebit)
                    .HasColumnName("accdebit")
                    .HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<Accsysitems>(entity =>
            {
                entity.HasKey(e => e.Accitemsno);

                entity.ToTable("accsysitems");

                entity.Property(e => e.Accitemsno)
                    .HasColumnName("accitemsno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Accitemdescr)
                    .IsRequired()
                    .HasColumnName("accitemdescr")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml26)
                    .IsRequired()
                    .HasColumnName("acciteml2_6")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemtype).HasColumnName("accitemtype");

                entity.Property(e => e.Accsysallow).HasColumnName("accsysallow");

                entity.Property(e => e.Mitemsys)
                    .IsRequired()
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Acctrans>(entity =>
            {
                entity.HasKey(e => new { e.VerBranchL1, e.Accsno, e.Acclineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("acctrans");

                entity.HasIndex(e => e.Acctransdate)
                    .HasName("acctrans_date");

                entity.HasIndex(e => e.RefNumber)
                    .HasName("acctrans_refnumber");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("acctrans_dmp");

                entity.HasIndex(e => new { e.VerBranchL1, e.TableDumped })
                    .HasName("acctrans_dump");

                entity.Property(e => e.VerBranchL1)
                    .HasColumnName("ver_branch_l1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Accsno)
                    .HasColumnName("accsno")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Acclineno).HasColumnName("acclineno");

                entity.Property(e => e.Accitemcode)
                    .IsRequired()
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acctranscredit)
                    .HasColumnName("acctranscredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctranscredit2)
                    .HasColumnName("acctranscredit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdate)
                    .HasColumnName("acctransdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Acctransdebit)
                    .HasColumnName("acctransdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdebit2)
                    .HasColumnName("acctransdebit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransmonth).HasColumnName("acctransmonth");

                entity.Property(e => e.Acctransopen).HasColumnName("acctransopen");

                entity.Property(e => e.Acctranssource).HasColumnName("acctranssource");

                entity.Property(e => e.Acctransyear).HasColumnName("acctransyear");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RefNumber)
                    .HasColumnName("ref_number")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.VerBranchL1Orig)
                    .HasColumnName("ver_branch_l1_orig")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Whogeneratedit).HasColumnName("whogeneratedit");
            });

            modelBuilder.Entity<Acctrans2>(entity =>
            {
                entity.HasKey(e => new { e.VerBranchL1, e.Accsno, e.Acclineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("acctrans2");

                entity.HasIndex(e => new { e.Accitemcode, e.TableDumped })
                    .HasName("acctrans2_dump");

                entity.Property(e => e.VerBranchL1)
                    .HasColumnName("ver_branch_l1")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Accsno)
                    .HasColumnName("accsno")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Acclineno).HasColumnName("acclineno");

                entity.Property(e => e.Accitemcode)
                    .IsRequired()
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acctranscredit)
                    .HasColumnName("acctranscredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctranscredit2)
                    .HasColumnName("acctranscredit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdate)
                    .HasColumnName("acctransdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Acctransdebit)
                    .HasColumnName("acctransdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdebit2)
                    .HasColumnName("acctransdebit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransmonth).HasColumnName("acctransmonth");

                entity.Property(e => e.Acctransopen).HasColumnName("acctransopen");

                entity.Property(e => e.Acctranssource).HasColumnName("acctranssource");

                entity.Property(e => e.Acctransyear).HasColumnName("acctransyear");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RefNumber)
                    .HasColumnName("ref_number")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.VerBranchL1Orig)
                    .HasColumnName("ver_branch_l1_orig")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Whogeneratedit).HasColumnName("whogeneratedit");
            });

            modelBuilder.Entity<Acctrans3>(entity =>
            {
                entity.HasKey(e => new { e.VerBranchL1, e.Accsno, e.Acclineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("acctrans3");

                entity.HasIndex(e => new { e.VerBranchL1, e.Usercode })
                    .HasName("acctrans3_user");

                entity.Property(e => e.VerBranchL1)
                    .HasColumnName("ver_branch_l1")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Accsno)
                    .HasColumnName("accsno")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Acclineno).HasColumnName("acclineno");

                entity.Property(e => e.Accitemcode)
                    .IsRequired()
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acctranscredit)
                    .HasColumnName("acctranscredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctranscredit2)
                    .HasColumnName("acctranscredit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdate)
                    .HasColumnName("acctransdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Acctransdebit)
                    .HasColumnName("acctransdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdebit2)
                    .HasColumnName("acctransdebit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransmonth).HasColumnName("acctransmonth");

                entity.Property(e => e.Acctransopen).HasColumnName("acctransopen");

                entity.Property(e => e.Acctranssource).HasColumnName("acctranssource");

                entity.Property(e => e.Acctransyear).HasColumnName("acctransyear");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RefNumber)
                    .HasColumnName("ref_number")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.VerBranchL1Orig)
                    .HasColumnName("ver_branch_l1_orig")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Whogeneratedit).HasColumnName("whogeneratedit");
            });

            modelBuilder.Entity<AcctransErr>(entity =>
            {
                entity.HasKey(e => new { e.VerBranchL1, e.Accsno, e.Acclineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("acctrans_err");

                entity.Property(e => e.VerBranchL1)
                    .HasColumnName("ver_branch_l1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Accsno)
                    .HasColumnName("accsno")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Acclineno).HasColumnName("acclineno");

                entity.Property(e => e.Accitemcode)
                    .IsRequired()
                    .HasColumnName("accitemcode")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Acctranscredit)
                    .HasColumnName("acctranscredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctranscredit2)
                    .HasColumnName("acctranscredit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdate)
                    .HasColumnName("acctransdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Acctransdebit)
                    .HasColumnName("acctransdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransdebit2)
                    .HasColumnName("acctransdebit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Acctransmonth).HasColumnName("acctransmonth");

                entity.Property(e => e.Acctransopen).HasColumnName("acctransopen");

                entity.Property(e => e.Acctranssource).HasColumnName("acctranssource");

                entity.Property(e => e.Acctransyear).HasColumnName("acctransyear");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemname)
                    .IsRequired()
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RefNumber)
                    .HasColumnName("ref_number")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.VerBranchL1Orig)
                    .HasColumnName("ver_branch_l1_orig")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Whogeneratedit).HasColumnName("whogeneratedit");
            });

            modelBuilder.Entity<Acctransnotes>(entity =>
            {
                entity.HasKey(e => new { e.VerBranchL1, e.Accsno });

                entity.ToTable("acctransnotes");

                entity.Property(e => e.VerBranchL1)
                    .HasColumnName("ver_branch_l1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Accsno)
                    .HasColumnName("accsno")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Accnote)
                    .IsRequired()
                    .HasColumnName("accnote")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.VerBranchL1Orig)
                    .HasColumnName("ver_branch_l1_orig")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Acctranssources>(entity =>
            {
                entity.HasKey(e => e.Acctranssource);

                entity.ToTable("acctranssources");

                entity.Property(e => e.Acctranssource)
                    .HasColumnName("acctranssource")
                    .ValueGeneratedNever();

                entity.Property(e => e.Acctranssourcedescr)
                    .IsRequired()
                    .HasColumnName("acctranssourcedescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Actimages>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcodedatesno, e.Phcodesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("actimages");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodedatesno).HasColumnName("phcodedatesno");

                entity.Property(e => e.Phcodesno).HasColumnName("phcodesno");

                entity.Property(e => e.Imagecomment)
                    .HasColumnName("imagecomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Imagetype).HasColumnName("imagetype");

                entity.Property(e => e.Itempicture)
                    .HasColumnName("itempicture")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phcode)
                    .IsRequired()
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingAe>(entity =>
            {
                entity.HasKey(e => e.Aicode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_ae");

                entity.Property(e => e.Aicode)
                    .HasColumnName("aicode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aiaedescr)
                    .IsRequired()
                    .HasColumnName("aiaedescr")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingAlt>(entity =>
            {
                entity.HasKey(e => new { e.Aicode, e.Aisno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_alt");

                entity.Property(e => e.Aicode).HasColumnName("aicode");

                entity.Property(e => e.Aisno).HasColumnName("aisno");

                entity.Property(e => e.Altdescr)
                    .IsRequired()
                    .HasColumnName("altdescr")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingCi>(entity =>
            {
                entity.HasKey(e => e.Aicode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_ci");

                entity.Property(e => e.Aicode)
                    .HasColumnName("aicode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aicidescr)
                    .IsRequired()
                    .HasColumnName("aicidescr")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingDdi>(entity =>
            {
                entity.HasKey(e => new { e.Aicode, e.Aicode2 })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_ddi");

                entity.Property(e => e.Aicode).HasColumnName("aicode");

                entity.Property(e => e.Aicode2).HasColumnName("aicode2");

                entity.Property(e => e.DdiAction).HasColumnName("ddi_action");

                entity.Property(e => e.DdiDescr)
                    .HasColumnName("ddi_descr")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DdiEvidence).HasColumnName("ddi_evidence");

                entity.Property(e => e.DdiSeverity).HasColumnName("ddi_severity");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingDose>(entity =>
            {
                entity.HasKey(e => e.Aicode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_dose");

                entity.Property(e => e.Aicode)
                    .HasColumnName("aicode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aidose)
                    .IsRequired()
                    .HasColumnName("aidose")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingOthers>(entity =>
            {
                entity.HasKey(e => e.Aicode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_others");

                entity.Property(e => e.Aicode)
                    .HasColumnName("aicode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aiabuse).HasColumnName("aiabuse");

                entity.Property(e => e.Ailactation).HasColumnName("ailactation");

                entity.Property(e => e.Aipregnancy).HasColumnName("aipregnancy");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingPrec>(entity =>
            {
                entity.HasKey(e => e.Aicode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_prec");

                entity.Property(e => e.Aicode)
                    .HasColumnName("aicode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aiprec)
                    .IsRequired()
                    .HasColumnName("aiprec")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Activeingredients>(entity =>
            {
                entity.HasKey(e => e.Aicode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeingredients");

                entity.Property(e => e.Aicode)
                    .HasColumnName("aicode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ainame)
                    .IsRequired()
                    .HasColumnName("ainame")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Classcode)
                    .HasColumnName("classcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActiveingUses>(entity =>
            {
                entity.HasKey(e => e.Aicode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("activeing_uses");

                entity.Property(e => e.Aicode)
                    .HasColumnName("aicode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Aiuses)
                    .IsRequired()
                    .HasColumnName("aiuses")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Actref>(entity =>
            {
                entity.HasKey(e => new { e.Actcode, e.Refactcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("actref");

                entity.Property(e => e.Actcode)
                    .HasColumnName("actcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Refactcode)
                    .HasColumnName("refactcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Refactblock).HasColumnName("refactblock");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Advancedexpenses>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Aesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("advancedexpenses");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Aesno).HasColumnName("aesno");

                entity.Property(e => e.Aecomment)
                    .HasColumnName("aecomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Aevalue)
                    .HasColumnName("aevalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.ExpcodeAsset).HasColumnName("expcode_asset");

                entity.Property(e => e.Suppcode)
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Areas>(entity =>
            {
                entity.HasKey(e => e.Areacode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("areas");

                entity.Property(e => e.Areacode)
                    .HasColumnName("areacode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Areamanagercode)
                    .HasColumnName("areamanagercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Areamanagerp)
                    .HasColumnName("areamanagerp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Areaname)
                    .IsRequired()
                    .HasColumnName("areaname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Provincecode).HasColumnName("provincecode");

                entity.Property(e => e.Repcode)
                    .HasColumnName("repcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Repp)
                    .HasColumnName("repp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Supervisorcode)
                    .HasColumnName("supervisorcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Supervisorp)
                    .HasColumnName("supervisorp")
                    .HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<BackupInfo>(entity =>
            {
                entity.HasKey(e => e.BackupTime);

                entity.ToTable("backup_info");

                entity.HasIndex(e => e.BackupDate)
                    .HasName("backup_ndx1");

                entity.Property(e => e.BackupTime)
                    .HasColumnName("backup_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.BackupDate)
                    .HasColumnName("backup_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Backupresult)
                    .HasColumnName("backupresult")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Backuptime1).HasColumnName("backuptime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BackupInfoDel>(entity =>
            {
                entity.HasKey(e => e.BackupTime);

                entity.ToTable("backup_info_del");

                entity.Property(e => e.BackupTime)
                    .HasColumnName("backup_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.BackupDate)
                    .HasColumnName("backup_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Bankcurrencies>(entity =>
            {
                entity.HasKey(e => e.Bcurrency);

                entity.ToTable("bankcurrencies");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Bankcurrencytafkit)
                    .HasColumnName("bankcurrencytafkit")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcurrencytafkit2)
                    .HasColumnName("bankcurrencytafkit2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcurrencytafkit2e)
                    .HasColumnName("bankcurrencytafkit2e")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcurrencytafkite)
                    .HasColumnName("bankcurrencytafkite")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.BcrateMaxpay)
                    .HasColumnName("bcrate_maxpay")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.BcrateMinreceive)
                    .HasColumnName("bcrate_minreceive")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrencydescr)
                    .IsRequired()
                    .HasColumnName("bcurrencydescr")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Bankcurrenciestrans>(entity =>
            {
                entity.HasKey(e => new { e.Bcurrency, e.TransTime });

                entity.ToTable("bankcurrenciestrans");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.BcrateMaxpay)
                    .HasColumnName("bcrate_maxpay")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.BcrateMinreceive)
                    .HasColumnName("bcrate_minreceive")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Banks>(entity =>
            {
                entity.HasKey(e => e.Bankcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("banks");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode2)
                    .HasColumnName("accitemcode2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode3)
                    .HasColumnName("accitemcode3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode4)
                    .HasColumnName("accitemcode4")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode5)
                    .HasColumnName("accitemcode5")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml6)
                    .HasColumnName("acciteml6")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Bankaccountbalance)
                    .HasColumnName("bankaccountbalance")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.BankaccountbalanceLc)
                    .HasColumnName("bankaccountbalance_lc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Bankaccountno)
                    .HasColumnName("bankaccountno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Bankname)
                    .IsRequired()
                    .HasColumnName("bankname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Bankprint)
                    .HasColumnName("bankprint")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Banktype).HasColumnName("banktype");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Banks2>(entity =>
            {
                entity.HasKey(e => e.Bankcode2);

                entity.ToTable("banks2");

                entity.Property(e => e.Bankcode2)
                    .HasColumnName("bankcode2")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Bankname)
                    .IsRequired()
                    .HasColumnName("bankname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<BanksDate>(entity =>
            {
                entity.HasKey(e => new { e.Refdate, e.Bankcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("banks_date");

                entity.Property(e => e.Refdate)
                    .HasColumnName("refdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Bankaccountbalance)
                    .HasColumnName("bankaccountbalance")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.BankaccountbalanceLc)
                    .HasColumnName("bankaccountbalance_lc")
                    .HasColumnType("decimal(12, 4)");
            });

            modelBuilder.Entity<Banksopenbal>(entity =>
            {
                entity.HasKey(e => e.Bankcode);

                entity.ToTable("banksopenbal");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Bankopencredit)
                    .HasColumnName("bankopencredit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BankopencreditLc)
                    .HasColumnName("bankopencredit_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Bankopendate)
                    .HasColumnName("bankopendate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankopendebit)
                    .HasColumnName("bankopendebit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BankopendebitLc)
                    .HasColumnName("bankopendebit_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Opentrans)
                    .HasColumnName("opentrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BanksSafePending>(entity =>
            {
                entity.HasKey(e => e.PendingSno);

                entity.ToTable("banks_safe_pending");

                entity.Property(e => e.PendingSno)
                    .HasColumnName("pending_sno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cashvalue)
                    .HasColumnName("cashvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ClosedDate)
                    .HasColumnName("closed_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ClosedTransTime)
                    .HasColumnName("closed_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.ClosedUsercode)
                    .HasColumnName("closed_usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.GivenDate)
                    .HasColumnName("given_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GivenTo)
                    .IsRequired()
                    .HasColumnName("given_to")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GivenToEmpcode)
                    .HasColumnName("given_to_empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Incusttype).HasColumnName("incusttype");

                entity.Property(e => e.Pendingnote)
                    .HasColumnName("pendingnote")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pendingstatus).HasColumnName("pendingstatus");

                entity.Property(e => e.Tempduedate)
                    .HasColumnName("tempduedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bankstrans>(entity =>
            {
                entity.HasKey(e => e.TransCounter)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("bankstrans");

                entity.Property(e => e.TransCounter)
                    .HasColumnName("trans_counter")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TransNote)
                    .HasColumnName("trans_note")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Transcredit)
                    .HasColumnName("transcredit")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transdebit)
                    .HasColumnName("transdebit")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Transdescr)
                    .IsRequired()
                    .HasColumnName("transdescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Banksusers>(entity =>
            {
                entity.HasKey(e => new { e.Bankcode, e.Personcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("banksusers");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcomment)
                    .HasColumnName("bankcomment")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personblocked).HasColumnName("personblocked");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Banksx>(entity =>
            {
                entity.HasKey(e => e.Bankcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("banksx");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Acciteml6)
                    .HasColumnName("acciteml6")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Bankaccountbalance)
                    .HasColumnName("bankaccountbalance")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Bankaccountno)
                    .HasColumnName("bankaccountno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Bankname)
                    .IsRequired()
                    .HasColumnName("bankname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Banktype).HasColumnName("banktype");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BasicData>(entity =>
            {
                entity.HasKey(e => new { e.Bdatasno, e.Bdatacode });

                entity.ToTable("basic_data");

                entity.Property(e => e.Bdatasno).HasColumnName("bdatasno");

                entity.Property(e => e.Bdatacode)
                    .HasColumnName("bdatacode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BdataHelp)
                    .HasColumnName("bdata_help")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BdataInt1).HasColumnName("bdata_int1");

                entity.Property(e => e.BdataInt2).HasColumnName("bdata_int2");

                entity.Property(e => e.BdataLastupdate)
                    .HasColumnName("bdata_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BdataLong).HasColumnName("bdata_long");

                entity.Property(e => e.BdataValue)
                    .HasColumnName("bdata_value")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BdataValue2)
                    .HasColumnName("bdata_value2")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BdataVchar1)
                    .HasColumnName("bdata_vchar1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BdataVchar2)
                    .HasColumnName("bdata_vchar2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BdataVchar3)
                    .HasColumnName("bdata_vchar3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Bdataclassif)
                    .HasColumnName("bdataclassif")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Bdataname)
                    .IsRequired()
                    .HasColumnName("bdataname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bdatanamearabic)
                    .HasColumnName("bdatanamearabic")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bdblock).HasColumnName("bdblock");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BasicDataWs>(entity =>
            {
                entity.HasKey(e => new { e.Bdatasno, e.Bdatacode });

                entity.ToTable("basic_data_ws");

                entity.Property(e => e.Bdatasno).HasColumnName("bdatasno");

                entity.Property(e => e.Bdatacode)
                    .HasColumnName("bdatacode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BdataHelp)
                    .HasColumnName("bdata_help")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.BdataInt1).HasColumnName("bdata_int1");

                entity.Property(e => e.BdataInt2).HasColumnName("bdata_int2");

                entity.Property(e => e.BdataLastupdate)
                    .HasColumnName("bdata_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BdataLong).HasColumnName("bdata_long");

                entity.Property(e => e.BdataValue)
                    .HasColumnName("bdata_value")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BdataValue2)
                    .HasColumnName("bdata_value2")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.BdataVchar1)
                    .HasColumnName("bdata_vchar1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BdataVchar2)
                    .HasColumnName("bdata_vchar2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BdataVchar3)
                    .HasColumnName("bdata_vchar3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Bdataclassif)
                    .HasColumnName("bdataclassif")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Bdataname)
                    .IsRequired()
                    .HasColumnName("bdataname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bdatanamearabic)
                    .HasColumnName("bdatanamearabic")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bdblock).HasColumnName("bdblock");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bath>(entity =>
            {
                entity.HasKey(e => e.Bak);

                entity.ToTable("bath");

                entity.Property(e => e.Bak)
                    .HasColumnName("bak")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<Bloodgroups>(entity =>
            {
                entity.HasKey(e => e.Bloodgroup)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("bloodgroups");

                entity.Property(e => e.Bloodgroup)
                    .HasColumnName("bloodgroup")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bloodgroupdescr)
                    .IsRequired()
                    .HasColumnName("bloodgroupdescr")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BranchBackup>(entity =>
            {
                entity.HasKey(e => new { e.BakSno, e.BakDate });

                entity.ToTable("branch_backup");

                entity.Property(e => e.BakSno).HasColumnName("bak_sno");

                entity.Property(e => e.BakDate)
                    .HasColumnName("bak_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<BranchBackupin>(entity =>
            {
                entity.HasKey(e => e.BakSno);

                entity.ToTable("branch_backupin");

                entity.Property(e => e.BakSno)
                    .HasColumnName("bak_sno")
                    .ValueGeneratedNever();

                entity.Property(e => e.BakDate)
                    .HasColumnName("bak_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Branches>(entity =>
            {
                entity.HasKey(e => e.Branchcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branches");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode2)
                    .HasColumnName("accitemcode2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode3)
                    .HasColumnName("accitemcode3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml1)
                    .HasColumnName("acciteml1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BranchLastupdate)
                    .HasColumnName("branch_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchaddress)
                    .HasColumnName("branchaddress")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Branchdialup)
                    .HasColumnName("branchdialup")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Branchename)
                    .HasColumnName("branchename")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchip)
                    .HasColumnName("branchip")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasColumnName("branchname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchphones)
                    .HasColumnName("branchphones")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Brelationtype)
                    .IsRequired()
                    .HasColumnName("brelationtype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BsellPercent)
                    .HasColumnName("bsell_percent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.BsellPolicy).HasColumnName("bsell_policy");

                entity.Property(e => e.Btype)
                    .HasColumnName("btype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Commercialno)
                    .HasColumnName("commercialno")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Companycode)
                    .HasColumnName("companycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Exp).HasColumnName("exp");

                entity.Property(e => e.ItemsalepriceNo).HasColumnName("itemsaleprice_no");

                entity.Property(e => e.Jodate)
                    .HasColumnName("jodate")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lastdocnumberin)
                    .HasColumnName("lastdocnumberin")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Lastdocnumberout)
                    .HasColumnName("lastdocnumberout")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Motalbaname)
                    .HasColumnName("motalbaname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Negbal).HasColumnName("negbal");

                entity.Property(e => e.Nomodififrevised).HasColumnName("nomodififrevised");

                entity.Property(e => e.Noofstores)
                    .HasColumnName("noofstores")
                    .HasColumnType("decimal(2, 0)");

                entity.Property(e => e.Noresultifnorevise).HasColumnName("noresultifnorevise");

                entity.Property(e => e.Pdate)
                    .HasColumnName("pdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performbranchname)
                    .HasColumnName("performbranchname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Picpoints).HasColumnName("picpoints");

                entity.Property(e => e.Resultpbranch)
                    .IsRequired()
                    .HasColumnName("resultpbranch")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sname)
                    .HasColumnName("sname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Taxcardno)
                    .HasColumnName("taxcardno")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Taxdept)
                    .HasColumnName("taxdept")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Taxfileno)
                    .HasColumnName("taxfileno")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1).HasColumnName("vf1");

                entity.Property(e => e.Vf2).HasColumnName("vf2");

                entity.Property(e => e.Vf3)
                    .HasColumnName("vf3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf4)
                    .HasColumnName("vf4")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branches9>(entity =>
            {
                entity.HasKey(e => e.Branchcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branches9");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Acciteml1)
                    .HasColumnName("acciteml1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.BranchLastupdate)
                    .HasColumnName("branch_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchaddress)
                    .HasColumnName("branchaddress")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasColumnName("branchname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchphones)
                    .HasColumnName("branchphones")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Brelationtype)
                    .IsRequired()
                    .HasColumnName("brelationtype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BsellPercent)
                    .HasColumnName("bsell_percent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.BsellPolicy).HasColumnName("bsell_policy");

                entity.Property(e => e.Exp).HasColumnName("exp");

                entity.Property(e => e.ItemsalepriceNo).HasColumnName("itemsaleprice_no");

                entity.Property(e => e.Lastdocnumberin)
                    .HasColumnName("lastdocnumberin")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Lastdocnumberout)
                    .HasColumnName("lastdocnumberout")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Negbal).HasColumnName("negbal");

                entity.Property(e => e.Noofstores)
                    .HasColumnName("noofstores")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.ReceiptP)
                    .HasColumnName("receipt_p")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Sname)
                    .HasColumnName("sname")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesales>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Paymentsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesales");

                entity.HasIndex(e => new { e.Branchcode, e.Intervaldocdate })
                    .HasName("branchesales_ndx3");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("branchesales_dump");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.LocalpaymentSno })
                    .HasName("branchesales_ndx2");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.RefDocnumber })
                    .HasName("branchesales_ndx5");

                entity.HasIndex(e => new { e.Branchcode, e.Docdate, e.Samedayhours })
                    .HasName("branchesales_ndx0")
                    .ForSqlServerIsClustered();

                entity.HasIndex(e => new { e.Usercode, e.Paymenttype, e.TransTime })
                    .HasName("branchesales_trial");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .HasName("branchesales_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentsno).HasColumnName("paymentsno");

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Creditcardtype).HasColumnName("creditcardtype");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.HourOfDay).HasColumnName("hour_of_day");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Intervaldocdate)
                    .HasColumnName("intervaldocdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LocalpaymentRemain)
                    .HasColumnName("localpayment_remain")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.LocalpaymentSno).HasColumnName("localpayment_sno");

                entity.Property(e => e.Paymenttype)
                    .IsRequired()
                    .HasColumnName("paymenttype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentvalue)
                    .HasColumnName("paymentvalue")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.RefDocnumber)
                    .HasColumnName("ref_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Samedayhours)
                    .HasColumnName("samedayhours")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesales5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Paymentsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesales5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentsno).HasColumnName("paymentsno");

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Creditcardtype).HasColumnName("creditcardtype");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.HourOfDay).HasColumnName("hour_of_day");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Intervaldocdate)
                    .HasColumnName("intervaldocdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LocalpaymentRemain)
                    .HasColumnName("localpayment_remain")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.LocalpaymentSno).HasColumnName("localpayment_sno");

                entity.Property(e => e.Paymenttype)
                    .IsRequired()
                    .HasColumnName("paymenttype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentvalue)
                    .HasColumnName("paymentvalue")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.RefDocnumber)
                    .HasColumnName("ref_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Samedayhours)
                    .HasColumnName("samedayhours")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesalescc>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Costcentercode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesalescc");

                entity.HasIndex(e => new { e.Branchcode, e.Usercode, e.Paymentsno })
                    .HasName("branchesalescc_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Moneyvalue)
                    .HasColumnName("moneyvalue")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Paymentsno).HasColumnName("paymentsno");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesalescc5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Costcentercode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesalescc5");

                entity.HasIndex(e => new { e.Branchcode, e.Usercode, e.Paymentsno })
                    .HasName("branchesalescc5_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Moneyvalue)
                    .HasColumnName("moneyvalue")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Paymentsno).HasColumnName("paymentsno");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesalesres>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Paymentsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesalesres");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentsno).HasColumnName("paymentsno");

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Creditcardtype).HasColumnName("creditcardtype");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.HourOfDay).HasColumnName("hour_of_day");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Intervaldocdate)
                    .HasColumnName("intervaldocdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LocalpaymentRemain)
                    .HasColumnName("localpayment_remain")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.LocalpaymentSno).HasColumnName("localpayment_sno");

                entity.Property(e => e.Paymenttype)
                    .IsRequired()
                    .HasColumnName("paymenttype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentvalue)
                    .HasColumnName("paymentvalue")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.RefDocnumber)
                    .HasColumnName("ref_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Samedayhours)
                    .HasColumnName("samedayhours")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BranchesAll>(entity =>
            {
                entity.HasKey(e => e.Branchcode);

                entity.ToTable("branches_all");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasColumnName("branchname")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchescash>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cashdate, e.Intervalcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchescash");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cashdate)
                    .HasColumnName("cashdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Salescash)
                    .HasColumnName("salescash")
                    .HasColumnType("numeric(8, 2)");

                entity.Property(e => e.Spentcash)
                    .HasColumnName("spentcash")
                    .HasColumnType("numeric(8, 2)");
            });

            modelBuilder.Entity<BranchesDel>(entity =>
            {
                entity.HasKey(e => e.Branchcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branches_del");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasColumnName("branchname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Branchphones)
                    .HasColumnName("branchphones")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FatoraP)
                    .HasColumnName("fatora_p")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsalP)
                    .HasColumnName("isal_p")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JoborderP)
                    .IsRequired()
                    .HasColumnName("joborder_p")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Noofstores).HasColumnName("noofstores");

                entity.Property(e => e.Pdate)
                    .HasColumnName("pdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PicMod)
                    .HasColumnName("pic_mod")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProfilePack)
                    .HasColumnName("profile_pack")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Sname)
                    .HasColumnName("sname")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesgeography>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Personcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesgeography");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchlocked).HasColumnName("branchlocked");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personorder).HasColumnName("personorder");

                entity.Property(e => e.Personsal).HasColumnName("personsal");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesintervals>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.HourOfDay1 })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesintervals");

                entity.HasIndex(e => new { e.Branchcode, e.HourOfDay1, e.Samedayhours })
                    .HasName("branchesintervals_ndx2");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.HourOfDay1).HasColumnName("hour_of_day");

                entity.Property(e => e.Hourofday)
                    .HasColumnName("hourofday")
                    .HasColumnType("datetime");

                entity.Property(e => e.Intervalcode)
                    .IsRequired()
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Samedayhours)
                    .IsRequired()
                    .HasColumnName("samedayhours")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchesspends>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Spendsdate, e.Intervalcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchesspends");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Spendsdate)
                    .HasColumnName("spendsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Spentcash)
                    .HasColumnName("spentcash")
                    .HasColumnType("numeric(8, 2)");

                entity.Property(e => e.Spentdescr)
                    .HasColumnName("spentdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchestat>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Tatpos })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchestat");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Tatpos).HasColumnName("tatpos");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Posdel).HasColumnName("posdel");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BranchesTrans>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branches_trans");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyFromMain)
                    .HasColumnName("buy_from_main")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.CashToMain)
                    .HasColumnName("cash_to_main")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ReturnToMain)
                    .HasColumnName("return_to_main")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.SalesCredit)
                    .HasColumnName("sales_credit")
                    .HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<Branchimages>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Phcodesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchimages");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodesno).HasColumnName("phcodesno");

                entity.Property(e => e.Imagecomment)
                    .HasColumnName("imagecomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Imagetype).HasColumnName("imagetype");

                entity.Property(e => e.Itempicture)
                    .HasColumnName("itempicture")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BranchMain>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.TableDumped });

                entity.ToTable("branch_main");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<BranchMain30>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.TableDumped })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branch_main30");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Specialuser)
                    .HasColumnName("specialuser")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Tomaindate)
                    .HasColumnName("tomaindate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchprints>(entity =>
            {
                entity.HasKey(e => e.Branchcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("branchprints");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Invautogen).HasColumnName("invautogen");

                entity.Property(e => e.Invcopies).HasColumnName("invcopies");

                entity.Property(e => e.Invform).HasColumnName("invform");

                entity.Property(e => e.Joautop).HasColumnName("joautop");

                entity.Property(e => e.Joitemsautop).HasColumnName("joitemsautop");

                entity.Property(e => e.Jomoney).HasColumnName("jomoney");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Monreccopies).HasColumnName("monreccopies");

                entity.Property(e => e.Monrecform).HasColumnName("monrecform");

                entity.Property(e => e.Monrecmessagear)
                    .HasColumnName("monrecmessagear")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Monrecmessageen)
                    .HasColumnName("monrecmessageen")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notyetautoprint).HasColumnName("notyetautoprint");

                entity.Property(e => e.Resreccopies).HasColumnName("resreccopies");

                entity.Property(e => e.Resrecform).HasColumnName("resrecform");

                entity.Property(e => e.Resrecmessagear)
                    .HasColumnName("resrecmessagear")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Resrecmessageen)
                    .HasColumnName("resrecmessageen")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Resrecmoney).HasColumnName("resrecmoney");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Branchstores>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Storecode });

                entity.ToTable("branchstores");

                entity.HasIndex(e => e.Storecode)
                    .HasName("branchstores_ndex1")
                    .IsUnique();

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Defpos)
                    .HasColumnName("defpos")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Britems>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Itemcode, e.TransTime });

                entity.ToTable("britems");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Itemcostprice)
                    .HasColumnName("itemcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Unitcode)
                    .IsRequired()
                    .HasColumnName("unitcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsaleprice)
                    .HasColumnName("unitsaleprice")
                    .HasColumnType("decimal(11, 4)");
            });

            modelBuilder.Entity<Callslog>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("callslog");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Calldate)
                    .HasColumnName("calldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Callduration).HasColumnName("callduration");

                entity.Property(e => e.Calllineno).HasColumnName("calllineno");

                entity.Property(e => e.Calltime)
                    .HasColumnName("calltime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Extno).HasColumnName("extno");

                entity.Property(e => e.Otherno)
                    .HasColumnName("otherno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Resultstring)
                    .IsRequired()
                    .HasColumnName("resultstring")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Caraccidents>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.AccidentSno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("caraccidents");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AccidentSno).HasColumnName("accident_sno");

                entity.Property(e => e.AccidentUpgrade).HasColumnName("accident_upgrade");

                entity.Property(e => e.Accidentarea).HasColumnName("accidentarea");

                entity.Property(e => e.Accidentclassifcode)
                    .HasColumnName("accidentclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Accidentcompensation)
                    .HasColumnName("accidentcompensation")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.Accidentcost)
                    .HasColumnName("accidentcost")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.Accidentdamages)
                    .HasColumnName("accidentdamages")
                    .HasColumnType("text");

                entity.Property(e => e.Accidentdate)
                    .HasColumnName("accidentdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Accidentdescr)
                    .HasColumnName("accidentdescr")
                    .HasColumnType("text");

                entity.Property(e => e.Accidentplace)
                    .HasColumnName("accidentplace")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Accidentreasoncode)
                    .HasColumnName("accidentreasoncode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Accidenttime)
                    .HasColumnName("accidenttime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carno)
                    .IsRequired()
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Chequedate)
                    .HasColumnName("chequedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ChequedateRec)
                    .HasColumnName("chequedate_rec")
                    .HasColumnType("datetime");

                entity.Property(e => e.Chequeno)
                    .HasColumnName("chequeno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Chequeto).HasColumnName("chequeto");

                entity.Property(e => e.Drivercode)
                    .IsRequired()
                    .HasColumnName("drivercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Insurancecompanyno)
                    .HasColumnName("insurancecompanyno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Kmreading).HasColumnName("kmreading");

                entity.Property(e => e.Maintduration).HasColumnName("maintduration");

                entity.Property(e => e.Maintenddate)
                    .HasColumnName("maintenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Maintstartdate)
                    .HasColumnName("maintstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Suppcode)
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Cars>(entity =>
            {
                entity.HasKey(e => e.Carno)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cars");

                entity.Property(e => e.Carno)
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchsdate)
                    .HasColumnName("branchsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CarFacode).HasColumnName("car_facode");

                entity.Property(e => e.CarRented).HasColumnName("car_rented");

                entity.Property(e => e.CarRentedSupp)
                    .HasColumnName("car_rented_supp")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CarRentedType).HasColumnName("car_rented_type");

                entity.Property(e => e.Carcapacitycode)
                    .HasColumnName("carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicenserenew)
                    .HasColumnName("carlicenserenew")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicensestartdate)
                    .HasColumnName("carlicensestartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicensetilldate)
                    .HasColumnName("carlicensetilldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carmaxpassenger).HasColumnName("carmaxpassenger");

                entity.Property(e => e.Carminpassenger).HasColumnName("carminpassenger");

                entity.Property(e => e.Carnowkm).HasColumnName("carnowkm");

                entity.Property(e => e.Carowntype)
                    .HasColumnName("carowntype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carproductionyear).HasColumnName("carproductionyear");

                entity.Property(e => e.Carstartdate)
                    .HasColumnName("carstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carstatus)
                    .HasColumnName("carstatus")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cartype)
                    .HasColumnName("cartype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Currentdrivercode)
                    .HasColumnName("currentdrivercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Currentdrivercode2)
                    .HasColumnName("currentdrivercode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Drivergetcardate)
                    .HasColumnName("drivergetcardate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Endservicecode)
                    .HasColumnName("endservicecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Endservicedate)
                    .HasColumnName("endservicedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Engineno)
                    .IsRequired()
                    .HasColumnName("engineno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExpcodeAcc).HasColumnName("expcode_acc");

                entity.Property(e => e.ExpcodeExp).HasColumnName("expcode_exp");

                entity.Property(e => e.ExpcodeExp2).HasColumnName("expcode_exp2");

                entity.Property(e => e.ExpcodeIncome).HasColumnName("expcode_income");

                entity.Property(e => e.ExpcodeIncome2).HasColumnName("expcode_income2");

                entity.Property(e => e.Fuelcode)
                    .HasColumnName("fuelcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Fuelperleter).HasColumnName("fuelperleter");

                entity.Property(e => e.Insuranceno1)
                    .HasColumnName("insuranceno1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Insuranceno1Date)
                    .HasColumnName("insuranceno1_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Insuranceno2)
                    .HasColumnName("insuranceno2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Insuranceno2Date)
                    .HasColumnName("insuranceno2_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemlastupdated)
                    .HasColumnName("itemlastupdated")
                    .HasColumnType("datetime");

                entity.Property(e => e.MinistryDate)
                    .HasColumnName("ministry_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MinistryNo)
                    .HasColumnName("ministry_no")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MinistryNo2)
                    .HasColumnName("ministry_no2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Modelcode)
                    .IsRequired()
                    .HasColumnName("modelcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.NoSale).HasColumnName("no_sale");

                entity.Property(e => e.NoSaleDescr)
                    .HasColumnName("no_sale_descr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoSaleEnddate)
                    .HasColumnName("no_sale_enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Purchasedate)
                    .HasColumnName("purchasedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Shaseeno)
                    .IsRequired()
                    .HasColumnName("shaseeno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Taxfreeenddate)
                    .HasColumnName("taxfreeenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.WarrantyEnddate)
                    .HasColumnName("warranty_enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.WarrantyKm).HasColumnName("warranty_km");
            });

            modelBuilder.Entity<CarsDailystatus>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.TransTime, e.Carno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cars_dailystatus");

                entity.HasIndex(e => new { e.Carno, e.Readingdate })
                    .HasName("cars_dailystatus_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carno)
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Carbranchcode)
                    .IsRequired()
                    .HasColumnName("carbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carsleep).HasColumnName("carsleep");

                entity.Property(e => e.Carstatus)
                    .IsRequired()
                    .HasColumnName("carstatus")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Entrybranchcode)
                    .HasColumnName("entrybranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Kmreading).HasColumnName("kmreading");

                entity.Property(e => e.KmreadingEst).HasColumnName("kmreading_est");

                entity.Property(e => e.Readingdate)
                    .HasColumnName("readingdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CarsItemschanges>(entity =>
            {
                entity.HasKey(e => new { e.Costcentercode, e.Itemcode, e.Branchcode, e.Doccode, e.Docnumber, e.Dblitemflag });

                entity.ToTable("cars_itemschanges");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Changedate1)
                    .HasColumnName("changedate1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Changedate1th)
                    .HasColumnName("changedate1th")
                    .HasColumnType("datetime");

                entity.Property(e => e.Changedate2)
                    .HasColumnName("changedate2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Changedel).HasColumnName("changedel");

                entity.Property(e => e.Followtype).HasColumnName("followtype");

                entity.Property(e => e.Kmreading1).HasColumnName("kmreading1");

                entity.Property(e => e.Kmreading1th).HasColumnName("kmreading1th");

                entity.Property(e => e.Kmreading2).HasColumnName("kmreading2");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Carsmodif>(entity =>
            {
                entity.HasKey(e => new { e.Carno, e.Carnonew })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("carsmodif");

                entity.Property(e => e.Carno)
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Carnonew)
                    .HasColumnName("carnonew")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcarsPlan>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Scheduledate, e.Schedulesno, e.Carno, e.Tripsno, e.Tripcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("ccars_plan");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Scheduledate)
                    .HasColumnName("scheduledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Schedulesno).HasColumnName("schedulesno");

                entity.Property(e => e.Carno)
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Tripsno).HasColumnName("tripsno");

                entity.Property(e => e.Tripcode).HasColumnName("tripcode");

                entity.Property(e => e.Carorder).HasColumnName("carorder");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Triporder).HasColumnName("triporder");

                entity.Property(e => e.Tripso)
                    .IsRequired()
                    .HasColumnName("tripso")
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcarsPlanm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Scheduledate, e.Schedulesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("ccars_planm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Scheduledate)
                    .HasColumnName("scheduledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Schedulesno).HasColumnName("schedulesno");

                entity.Property(e => e.Carsfree).HasColumnName("carsfree");

                entity.Property(e => e.Planincome)
                    .HasColumnName("planincome")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Planrent)
                    .HasColumnName("planrent")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripstorent).HasColumnName("tripstorent");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcarsTripsinplan>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Tripdate, e.Tripsno, e.Tripactdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("ccars_tripsinplan");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Tripdate)
                    .HasColumnName("tripdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripsno).HasColumnName("tripsno");

                entity.Property(e => e.Tripactdate)
                    .HasColumnName("tripactdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CarRented).HasColumnName("car_rented");

                entity.Property(e => e.Carnoactual)
                    .HasColumnName("carnoactual")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Carnobylaw)
                    .HasColumnName("carnobylaw")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Carrentprice)
                    .HasColumnName("carrentprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.CustCarcapacitycode)
                    .HasColumnName("cust_carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .IsRequired()
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Dayclosed)
                    .HasColumnName("dayclosed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Noofpassengers).HasColumnName("noofpassengers");

                entity.Property(e => e.Pdtripsno).HasColumnName("pdtripsno");

                entity.Property(e => e.Serviceorderno)
                    .HasColumnName("serviceorderno")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.SuppCarcapacitycode)
                    .HasColumnName("supp_carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Tripacttime1)
                    .HasColumnName("tripacttime1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripacttime2)
                    .HasColumnName("tripacttime2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripcode).HasColumnName("tripcode");

                entity.Property(e => e.Tripdate2)
                    .HasColumnName("tripdate2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripftime)
                    .HasColumnName("tripftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripnoshow).HasColumnName("tripnoshow");

                entity.Property(e => e.Tripprice)
                    .HasColumnName("tripprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Triprepres)
                    .HasColumnName("triprepres")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tripspecialprice)
                    .HasColumnName("tripspecialprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Tripstartfrom)
                    .HasColumnName("tripstartfrom")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tripstime)
                    .HasColumnName("tripstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercodebylaw)
                    .HasColumnName("usercodebylaw")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcarsTripsprevented>(entity =>
            {
                entity.HasKey(e => new { e.Triptype, e.Carno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("ccars_tripsprevented");

                entity.Property(e => e.Triptype)
                    .HasColumnName("triptype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carno)
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Cfarmalog>(entity =>
            {
                entity.HasKey(e => new { e.TransTime, e.Transtype, e.Transsno, e.RunTime });

                entity.ToTable("cfarmalog");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtype)
                    .HasColumnName("transtype")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Transsno).HasColumnName("transsno");

                entity.Property(e => e.RunTime)
                    .HasColumnName("run_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.RunResult).HasColumnName("run_result");

                entity.Property(e => e.Runcomment)
                    .HasColumnName("runcomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Runcomment2)
                    .HasColumnName("runcomment2")
                    .HasColumnType("text");

                entity.Property(e => e.Transbuild)
                    .IsRequired()
                    .HasColumnName("transbuild")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Transver)
                    .IsRequired()
                    .HasColumnName("transver")
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfarmalogSsb9>(entity =>
            {
                entity.HasKey(e => new { e.TransTime, e.Transtype });

                entity.ToTable("cfarmalog_ssb9");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtype)
                    .HasColumnName("transtype")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfarmaMessages>(entity =>
            {
                entity.HasKey(e => e.Messagecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cfarma_messages");

                entity.Property(e => e.Messagecode)
                    .HasColumnName("messagecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Messagedescr)
                    .IsRequired()
                    .HasColumnName("messagedescr")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Messagedescren)
                    .IsRequired()
                    .HasColumnName("messagedescren")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Cfarmasetup>(entity =>
            {
                entity.HasKey(e => new { e.Cfsetupcode, e.Cfsetupvalue })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cfarmasetup");

                entity.Property(e => e.Cfsetupcode).HasColumnName("cfsetupcode");

                entity.Property(e => e.Cfsetupvalue)
                    .HasColumnName("cfsetupvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Cfsetupclassif)
                    .HasColumnName("cfsetupclassif")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cfsetupdate)
                    .HasColumnName("cfsetupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cfsetuphelp)
                    .HasColumnName("cfsetuphelp")
                    .HasColumnType("text");

                entity.Property(e => e.Cfsetuptext)
                    .HasColumnName("cfsetuptext")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Cfsetuptext2)
                    .HasColumnName("cfsetuptext2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfsetuptype)
                    .HasColumnName("cfsetuptype")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfarmaTransmessages>(entity =>
            {
                entity.HasKey(e => new { e.Cfmbranchcode, e.Cfmdatetime, e.Mitemname });

                entity.ToTable("cfarma_transmessages");

                entity.HasIndex(e => new { e.Cfmbranchcode, e.Mitemname, e.Cfmdatetime })
                    .HasName("cfarma_transmessages_ndx10");

                entity.Property(e => e.Cfmbranchcode)
                    .HasColumnName("cfmbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cfmdatetime)
                    .HasColumnName("cfmdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mitemname)
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cfmclass)
                    .HasColumnName("cfmclass")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cfmevent)
                    .IsRequired()
                    .HasColumnName("cfmevent")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cfmrecommend)
                    .IsRequired()
                    .HasColumnName("cfmrecommend")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Cheques>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cheqsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cheques");

                entity.HasIndex(e => new { e.Personcode, e.Cheqcashdate })
                    .HasName("cheques_ndx5");

                entity.HasIndex(e => new { e.Personcode, e.Cheqregisterdate })
                    .HasName("cheques_ndx6");

                entity.HasIndex(e => new { e.Branchcode, e.Bankcode, e.Cheqtype })
                    .HasName("cheques_ndx4");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcode2)
                    .HasColumnName("bankcode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Banknewbal)
                    .HasColumnName("banknewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BanknewbalLc)
                    .HasColumnName("banknewbal_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BanktransTime)
                    .HasColumnName("banktrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.BcrateStd)
                    .HasColumnName("bcrate_std")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Blockinv).HasColumnName("blockinv");

                entity.Property(e => e.Cashtype).HasColumnName("cashtype");

                entity.Property(e => e.Cheqcashdate)
                    .HasColumnName("cheqcashdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqcashfees)
                    .HasColumnName("cheqcashfees")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqno)
                    .IsRequired()
                    .HasColumnName("cheqno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqregisterdate)
                    .HasColumnName("cheqregisterdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqtobankdate)
                    .HasColumnName("cheqtobankdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqtype)
                    .IsRequired()
                    .HasColumnName("cheqtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Chequenote)
                    .HasColumnName("chequenote")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqvalue)
                    .HasColumnName("cheqvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CheqvalueLc)
                    .HasColumnName("cheqvalue_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Cheqvaluedamgha)
                    .HasColumnName("cheqvaluedamgha")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluediscount)
                    .HasColumnName("cheqvaluediscount")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvalueother)
                    .HasColumnName("cheqvalueother")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluetax)
                    .HasColumnName("cheqvaluetax")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Creditcardtype).HasColumnName("creditcardtype");

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Financialdoccode)
                    .IsRequired()
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Handedto)
                    .HasColumnName("handedto")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpenTrans).HasColumnName("open_trans");

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Ourcheqsno).HasColumnName("ourcheqsno");

                entity.Property(e => e.Ourcheqsnop).HasColumnName("ourcheqsnop");

                entity.Property(e => e.Payrefusesno).HasColumnName("payrefusesno");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RefuseCharges)
                    .HasColumnName("refuse_charges")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.RefuseReason).HasColumnName("refuse_reason");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TfBankcode)
                    .HasColumnName("tf_bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TfBranchcode)
                    .HasColumnName("tf_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TfCheqsno).HasColumnName("tf_cheqsno");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WenttoBankstrans)
                    .HasColumnName("wentto_bankstrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Cheques5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cheqsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cheques5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcode2)
                    .HasColumnName("bankcode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Banknewbal)
                    .HasColumnName("banknewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BanknewbalLc)
                    .HasColumnName("banknewbal_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BanktransTime)
                    .HasColumnName("banktrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.BcrateStd)
                    .HasColumnName("bcrate_std")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Blockinv).HasColumnName("blockinv");

                entity.Property(e => e.Cashtype).HasColumnName("cashtype");

                entity.Property(e => e.Cheqcashdate)
                    .HasColumnName("cheqcashdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqcashfees)
                    .HasColumnName("cheqcashfees")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqno)
                    .IsRequired()
                    .HasColumnName("cheqno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqregisterdate)
                    .HasColumnName("cheqregisterdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqtobankdate)
                    .HasColumnName("cheqtobankdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqtype)
                    .IsRequired()
                    .HasColumnName("cheqtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Chequenote)
                    .HasColumnName("chequenote")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqvalue)
                    .HasColumnName("cheqvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CheqvalueLc)
                    .HasColumnName("cheqvalue_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Cheqvaluedamgha)
                    .HasColumnName("cheqvaluedamgha")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluediscount)
                    .HasColumnName("cheqvaluediscount")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvalueother)
                    .HasColumnName("cheqvalueother")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluetax)
                    .HasColumnName("cheqvaluetax")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Creditcardtype).HasColumnName("creditcardtype");

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Financialdoccode)
                    .IsRequired()
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Handedto)
                    .HasColumnName("handedto")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpenTrans).HasColumnName("open_trans");

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Ourcheqsno).HasColumnName("ourcheqsno");

                entity.Property(e => e.Ourcheqsnop).HasColumnName("ourcheqsnop");

                entity.Property(e => e.Payrefusesno).HasColumnName("payrefusesno");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RefuseCharges)
                    .HasColumnName("refuse_charges")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.RefuseReason).HasColumnName("refuse_reason");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TfBankcode)
                    .HasColumnName("tf_bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TfBranchcode)
                    .HasColumnName("tf_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TfCheqsno).HasColumnName("tf_cheqsno");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WenttoBankstrans)
                    .HasColumnName("wentto_bankstrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Cheques51>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cheqsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cheques_5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcode2)
                    .HasColumnName("bankcode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Banknewbal)
                    .HasColumnName("banknewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BanknewbalLc)
                    .HasColumnName("banknewbal_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.BanktransTime)
                    .HasColumnName("banktrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.BcrateStd)
                    .HasColumnName("bcrate_std")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Blockinv).HasColumnName("blockinv");

                entity.Property(e => e.Cashtype).HasColumnName("cashtype");

                entity.Property(e => e.Cheqcashdate)
                    .HasColumnName("cheqcashdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqcashfees)
                    .HasColumnName("cheqcashfees")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqno)
                    .IsRequired()
                    .HasColumnName("cheqno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqregisterdate)
                    .HasColumnName("cheqregisterdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqtobankdate)
                    .HasColumnName("cheqtobankdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqtype)
                    .IsRequired()
                    .HasColumnName("cheqtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Chequenote)
                    .HasColumnName("chequenote")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqvalue)
                    .HasColumnName("cheqvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.CheqvalueLc)
                    .HasColumnName("cheqvalue_lc")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Cheqvaluedamgha)
                    .HasColumnName("cheqvaluedamgha")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluediscount)
                    .HasColumnName("cheqvaluediscount")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvalueother)
                    .HasColumnName("cheqvalueother")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluetax)
                    .HasColumnName("cheqvaluetax")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Creditcardtype).HasColumnName("creditcardtype");

                entity.Property(e => e.Financialdoccode)
                    .IsRequired()
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Handedto)
                    .HasColumnName("handedto")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.OpenTrans).HasColumnName("open_trans");

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Ourcheqsno).HasColumnName("ourcheqsno");

                entity.Property(e => e.Ourcheqsnop).HasColumnName("ourcheqsnop");

                entity.Property(e => e.Payrefusesno).HasColumnName("payrefusesno");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RefuseCharges)
                    .HasColumnName("refuse_charges")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.RefuseReason).HasColumnName("refuse_reason");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TfBankcode)
                    .HasColumnName("tf_bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TfBranchcode)
                    .HasColumnName("tf_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TfCheqsno).HasColumnName("tf_cheqsno");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WenttoBankstrans)
                    .HasColumnName("wentto_bankstrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Chequesash>(entity =>
            {
                entity.HasKey(e => new { e.Financialdoccode, e.Cheqtype, e.Cheqno, e.Cheqdate, e.Bankcode, e.Personcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("chequesash");

                entity.Property(e => e.Financialdoccode)
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqtype)
                    .HasColumnName("cheqtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqno)
                    .HasColumnName("cheqno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcode2)
                    .HasColumnName("bankcode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cashtype).HasColumnName("cashtype");

                entity.Property(e => e.Cheqcashdate)
                    .HasColumnName("cheqcashdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqregisterdate)
                    .HasColumnName("cheqregisterdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Cheqtobankdate)
                    .HasColumnName("cheqtobankdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Chequenote)
                    .HasColumnName("chequenote")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqvalue)
                    .HasColumnName("cheqvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluedamgha)
                    .HasColumnName("cheqvaluedamgha")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluediscount)
                    .HasColumnName("cheqvaluediscount")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluetax)
                    .HasColumnName("cheqvaluetax")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Ourcheqsno).HasColumnName("ourcheqsno");

                entity.Property(e => e.Payrefusesno).HasColumnName("payrefusesno");

                entity.Property(e => e.RefuseCharges)
                    .HasColumnName("refuse_charges")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.RefuseReason).HasColumnName("refuse_reason");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WenttoBankstrans)
                    .HasColumnName("wentto_bankstrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChequesCashed>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cheqsno });

                entity.ToTable("cheques_cashed");

                entity.HasIndex(e => new { e.Bankcode, e.Cheqcashdate })
                    .HasName("cheques_cashed_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cashnote)
                    .HasColumnName("cashnote")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cashtype).HasColumnName("cashtype");

                entity.Property(e => e.Cheqcashdate)
                    .HasColumnName("cheqcashdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqcashfees)
                    .HasColumnName("cheqcashfees")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.RefuseReason).HasColumnName("refuse_reason");

                entity.Property(e => e.Safecode)
                    .HasColumnName("safecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Chequeslevels>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Personcode, e.LeveltransTime });

                entity.ToTable("chequeslevels");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LeveltransTime)
                    .HasColumnName("leveltrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Levelcomments)
                    .HasColumnName("levelcomments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Leveldirectcash)
                    .HasColumnName("leveldirectcash")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Leveldirectcredit)
                    .HasColumnName("leveldirectcredit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Levelindirectcash)
                    .HasColumnName("levelindirectcash")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Levelindirectcredit)
                    .HasColumnName("levelindirectcredit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Levelusercode)
                    .IsRequired()
                    .HasColumnName("levelusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personblock).HasColumnName("personblock");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Chequeslimits>(entity =>
            {
                entity.HasKey(e => new { e.Cheqyear, e.Cheqmonth })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("chequeslimits");

                entity.Property(e => e.Cheqyear).HasColumnName("cheqyear");

                entity.Property(e => e.Cheqmonth).HasColumnName("cheqmonth");

                entity.Property(e => e.Cheqlimit)
                    .HasColumnName("cheqlimit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChequesToBank>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cheqsno });

                entity.ToTable("cheques_to_bank");

                entity.HasIndex(e => new { e.Bankcode, e.Cheqtobankdate })
                    .HasName("cheques_to_bank_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Bankcode)
                    .IsRequired()
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcodeorig)
                    .HasColumnName("bankcodeorig")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqtobankdate)
                    .HasColumnName("cheqtobankdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tobanknote)
                    .HasColumnName("tobanknote")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Chequestrans>(entity =>
            {
                entity.HasKey(e => new { e.Cheqbranchcode, e.Cheqsno, e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("chequestrans");

                entity.HasIndex(e => e.Cheqsno)
                    .HasName("chequestrans_ndx1");

                entity.HasIndex(e => new { e.Cheqbranchcode, e.TableDumped })
                    .HasName("chequestrans_ndx3");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .HasName("chequestrans_ndx2");

                entity.Property(e => e.Cheqbranchcode)
                    .HasColumnName("cheqbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvaluepaid)
                    .HasColumnName("docvaluepaid")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.Docvaluepaynow)
                    .HasColumnName("docvaluepaynow")
                    .HasColumnType("numeric(12, 4)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Chequestrans5>(entity =>
            {
                entity.HasKey(e => new { e.Cheqsno, e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Cheqbranchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("chequestrans5");

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqbranchcode)
                    .HasColumnName("cheqbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docvaluepaid)
                    .HasColumnName("docvaluepaid")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepaynow)
                    .HasColumnName("docvaluepaynow")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChequesTrial>(entity =>
            {
                entity.HasKey(e => new { e.Financialdoccode, e.Cheqtype, e.Cheqno, e.Cheqdate, e.Bankcode, e.Personcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cheques_trial");

                entity.Property(e => e.Financialdoccode)
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqtype)
                    .HasColumnName("cheqtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqno)
                    .HasColumnName("cheqno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Bankcode2)
                    .HasColumnName("bankcode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cashtype).HasColumnName("cashtype");

                entity.Property(e => e.Cheqcashdate)
                    .HasColumnName("cheqcashdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqregisterdate)
                    .HasColumnName("cheqregisterdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Cheqtobankdate)
                    .HasColumnName("cheqtobankdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Chequenote)
                    .HasColumnName("chequenote")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqvalue)
                    .HasColumnName("cheqvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluedamgha)
                    .HasColumnName("cheqvaluedamgha")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluediscount)
                    .HasColumnName("cheqvaluediscount")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Cheqvaluetax)
                    .HasColumnName("cheqvaluetax")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Ourcheqsno).HasColumnName("ourcheqsno");

                entity.Property(e => e.Payrefusesno).HasColumnName("payrefusesno");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.RefuseCharges)
                    .HasColumnName("refuse_charges")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.RefuseReason).HasColumnName("refuse_reason");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WenttoBankstrans)
                    .HasColumnName("wentto_bankstrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChequesTrial1>(entity =>
            {
                entity.HasKey(e => e.TransTime)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cheques_trial1");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Clabsetup>(entity =>
            {
                entity.HasKey(e => e.Clsetupcode);

                entity.ToTable("clabsetup");

                entity.HasIndex(e => new { e.Clsetupcode, e.Clsetupvalue })
                    .HasName("clabsetup_ndx1");

                entity.Property(e => e.Clsetupcode)
                    .HasColumnName("clsetupcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Clsetupdate)
                    .HasColumnName("clsetupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Clsetuptext)
                    .HasColumnName("clsetuptext")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Clsetupvalue)
                    .HasColumnName("clsetupvalue")
                    .HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<CnIssues2>(entity =>
            {
                entity.HasKey(e => new { e.Issuecode, e.Issuereplycode });

                entity.ToTable("cn_issues2");

                entity.Property(e => e.Issuecode).HasColumnName("issuecode");

                entity.Property(e => e.Issuereplycode).HasColumnName("issuereplycode");

                entity.Property(e => e.Cccodes)
                    .HasColumnName("cccodes")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ccnames)
                    .HasColumnName("ccnames")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Issue)
                    .IsRequired()
                    .HasColumnName("issue")
                    .HasColumnType("text");

                entity.Property(e => e.Issueby)
                    .IsRequired()
                    .HasColumnName("issueby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Issueclosed1)
                    .HasColumnName("issueclosed1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Issueclosed2)
                    .HasColumnName("issueclosed2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Issuedate)
                    .HasColumnName("issuedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Issuedeleted)
                    .HasColumnName("issuedeleted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Issuedelivered)
                    .HasColumnName("issuedelivered")
                    .HasColumnType("datetime");

                entity.Property(e => e.Issuepriority).HasColumnName("issuepriority");

                entity.Property(e => e.Issuered)
                    .HasColumnName("issuered")
                    .HasColumnType("datetime");

                entity.Property(e => e.Issuetitle)
                    .HasColumnName("issuetitle")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Issueto)
                    .IsRequired()
                    .HasColumnName("issueto")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Issuetype).HasColumnName("issuetype");
            });

            modelBuilder.Entity<CommunicTselect>(entity =>
            {
                entity.HasKey(e => e.Tsno);

                entity.ToTable("communic_tselect");

                entity.Property(e => e.Tsno)
                    .HasColumnName("tsno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Mitemsys)
                    .IsRequired()
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Tfname)
                    .IsRequired()
                    .HasColumnName("tfname")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Tname)
                    .IsRequired()
                    .HasColumnName("tname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Tselect).HasColumnName("tselect");

                entity.Property(e => e.Tselect2).HasColumnName("tselect2");

                entity.Property(e => e.Ttype)
                    .IsRequired()
                    .HasColumnName("ttype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Tuserename)
                    .IsRequired()
                    .HasColumnName("tuserename")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tusername)
                    .IsRequired()
                    .HasColumnName("tusername")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommunicTselecthd>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Tsno, e.TransTime });

                entity.ToTable("communic_tselecthd");

                entity.HasIndex(e => new { e.Branchcode, e.Tsno, e.Transresult, e.Successdate })
                    .HasName("communic_tselecthd_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Tsno).HasColumnName("tsno");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Contime).HasColumnName("contime");

                entity.Property(e => e.Reccount).HasColumnName("reccount");

                entity.Property(e => e.Successdate)
                    .HasColumnName("successdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumpedsince)
                    .HasColumnName("table_dumpedsince")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transresult).HasColumnName("transresult");
            });

            modelBuilder.Entity<CommunicTselects>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Tsno, e.Communictime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("communic_tselects");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Tsno).HasColumnName("tsno");

                entity.Property(e => e.Communictime)
                    .HasColumnName("communictime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Communicact1).HasColumnName("communicact1");

                entity.Property(e => e.Communicact2).HasColumnName("communicact2");

                entity.Property(e => e.Communicact3).HasColumnName("communicact3");

                entity.Property(e => e.Communicact4).HasColumnName("communicact4");

                entity.Property(e => e.Communicact5).HasColumnName("communicact5");

                entity.Property(e => e.Communicact6).HasColumnName("communicact6");

                entity.Property(e => e.Communicact7).HasColumnName("communicact7");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Companiesitems>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("companiesitems");

                entity.HasIndex(e => e.Patientname)
                    .HasName("companiesitems_ndx5");

                entity.HasIndex(e => new { e.Branchcode, e.Docnumber, e.Docdate })
                    .HasName("companiesitems_ndx2");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Deptname)
                    .HasColumnName("deptname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Examdate)
                    .HasColumnName("examdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fileno)
                    .HasColumnName("fileno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Financialno)
                    .HasColumnName("financialno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HiTypecode)
                    .HasColumnName("hi_typecode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Membershipno)
                    .HasColumnName("membershipno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Patientnationality)
                    .HasColumnName("patientnationality")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Patientno)
                    .HasColumnName("patientno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Relativedegree)
                    .HasColumnName("relativedegree")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Roshettano)
                    .HasColumnName("roshettano")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Companiesitems5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("companiesitems5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Deptname)
                    .HasColumnName("deptname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Examdate)
                    .HasColumnName("examdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fileno)
                    .HasColumnName("fileno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Financialno)
                    .HasColumnName("financialno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HiTypecode)
                    .HasColumnName("hi_typecode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Membershipno)
                    .HasColumnName("membershipno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Patientname)
                    .HasColumnName("patientname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Patientnationality)
                    .HasColumnName("patientnationality")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Patientno)
                    .HasColumnName("patientno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Relativedegree)
                    .HasColumnName("relativedegree")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Roshettano)
                    .HasColumnName("roshettano")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Contractstypes>(entity =>
            {
                entity.HasKey(e => e.Paytypecode);

                entity.ToTable("contractstypes");

                entity.Property(e => e.Paytypecode)
                    .HasColumnName("paytypecode")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Paytypedescr)
                    .IsRequired()
                    .HasColumnName("paytypedescr")
                    .HasMaxLength(70)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Costcenterclassif>(entity =>
            {
                entity.HasKey(e => e.Costcenterclassifcode);

                entity.ToTable("costcenterclassif");

                entity.Property(e => e.Costcenterclassifcode)
                    .HasColumnName("costcenterclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Ccclassiftype)
                    .HasColumnName("ccclassiftype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Costcenterclassifdescr)
                    .IsRequired()
                    .HasColumnName("costcenterclassifdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Costcenters>(entity =>
            {
                entity.HasKey(e => e.Costcentercode);

                entity.ToTable("costcenters");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Ccclosed)
                    .HasColumnName("ccclosed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CcctransTime)
                    .HasColumnName("ccctrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cccusercode)
                    .HasColumnName("cccusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcenterclassifcode)
                    .IsRequired()
                    .HasColumnName("costcenterclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcenterdescr)
                    .IsRequired()
                    .HasColumnName("costcenterdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Costcenterssources>(entity =>
            {
                entity.HasKey(e => e.Costcentersource);

                entity.ToTable("costcenterssources");

                entity.Property(e => e.Costcentersource).HasColumnName("costcentersource");

                entity.Property(e => e.Costcentersourcedescr)
                    .IsRequired()
                    .HasColumnName("costcentersourcedescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Costcenterstrans>(entity =>
            {
                entity.HasKey(e => new { e.VerBranchcode, e.Ccsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("costcenterstrans");

                entity.HasIndex(e => e.Recdata)
                    .HasName("costcenterstrans_ndx10");

                entity.Property(e => e.VerBranchcode)
                    .HasColumnName("ver_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsno).HasColumnName("ccsno");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Costcentercode)
                    .IsRequired()
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Costvalue)
                    .HasColumnName("costvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Recdata)
                    .HasColumnName("recdata")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransSign)
                    .HasColumnName("trans_sign")
                    .HasColumnType("decimal(1, 0)");

                entity.Property(e => e.TransSource).HasColumnName("trans_source");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Costcenterstrans5>(entity =>
            {
                entity.HasKey(e => new { e.VerBranchcode, e.Ccsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("costcenterstrans5");

                entity.Property(e => e.VerBranchcode)
                    .HasColumnName("ver_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ccsno).HasColumnName("ccsno");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Costcentercode)
                    .IsRequired()
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Costvalue)
                    .HasColumnName("costvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Recdata)
                    .HasColumnName("recdata")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransSign)
                    .HasColumnName("trans_sign")
                    .HasColumnType("decimal(1, 0)");

                entity.Property(e => e.TransSource).HasColumnName("trans_source");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CpBrancheshawafez>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Yearno, e.Monthno });

                entity.ToTable("cp_brancheshawafez");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Yearno).HasColumnName("yearno");

                entity.Property(e => e.Monthno).HasColumnName("monthno");

                entity.Property(e => e.Branchtothafez)
                    .HasColumnName("branchtothafez")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Branchtotpoints)
                    .HasColumnName("branchtotpoints")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.MoneyReal)
                    .HasColumnName("money_real")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecProtect)
                    .IsRequired()
                    .HasColumnName("rec_protect")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CpBranchestargets>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Yearno, e.Monthno, e.MoneyTargetf });

                entity.ToTable("cp_branchestargets");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Yearno).HasColumnName("yearno");

                entity.Property(e => e.Monthno).HasColumnName("monthno");

                entity.Property(e => e.MoneyTargetf)
                    .HasColumnName("money_targetf")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Hafezp)
                    .HasColumnName("hafezp")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.MoneyTargett)
                    .HasColumnName("money_targett")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecProtect)
                    .IsRequired()
                    .HasColumnName("rec_protect")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CpEmphawafez>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Yearno, e.Monthno, e.Personcode, e.Hafeztype });

                entity.ToTable("cp_emphawafez");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Yearno).HasColumnName("yearno");

                entity.Property(e => e.Monthno).HasColumnName("monthno");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Hafeztype)
                    .HasColumnName("hafeztype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EmpPoints)
                    .HasColumnName("emp_points")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Emptothafez)
                    .HasColumnName("emptothafez")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.HafezF1)
                    .HasColumnName("hafez_f1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF2)
                    .HasColumnName("hafez_f2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF3)
                    .HasColumnName("hafez_f3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF4)
                    .HasColumnName("hafez_f4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF5)
                    .HasColumnName("hafez_f5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF6)
                    .HasColumnName("hafez_f6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Pointvalue)
                    .HasColumnName("pointvalue")
                    .HasColumnType("decimal(6, 2)");
            });

            modelBuilder.Entity<CpEmphawafez2>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Yearno, e.Monthno, e.Personcode, e.Hafeztype });

                entity.ToTable("cp_emphawafez2");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Yearno).HasColumnName("yearno");

                entity.Property(e => e.Monthno).HasColumnName("monthno");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Hafeztype)
                    .HasColumnName("hafeztype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EmpPoints)
                    .HasColumnName("emp_points")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Emptothafez)
                    .HasColumnName("emptothafez")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.HafezF1)
                    .HasColumnName("hafez_f1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF2)
                    .HasColumnName("hafez_f2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF3)
                    .HasColumnName("hafez_f3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF4)
                    .HasColumnName("hafez_f4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF5)
                    .HasColumnName("hafez_f5")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.HafezF6)
                    .HasColumnName("hafez_f6")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Pointvalue)
                    .HasColumnName("pointvalue")
                    .HasColumnType("decimal(6, 2)");
            });

            modelBuilder.Entity<CrmBasicdata>(entity =>
            {
                entity.HasKey(e => new { e.Crmcode, e.Crmcodeclassif, e.Crmcodeclassifdescr })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("crm_basicdata");

                entity.Property(e => e.Crmcode).HasColumnName("crmcode");

                entity.Property(e => e.Crmcodeclassif).HasColumnName("crmcodeclassif");

                entity.Property(e => e.Crmcodeclassifdescr)
                    .HasColumnName("crmcodeclassifdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Crmcodeclassif1).HasColumnName("crmcodeclassif1");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custbranchcontract>(entity =>
            {
                entity.HasKey(e => new { e.Custcode, e.Custbranchcode, e.Empstime, e.Contractstartdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custbranchcontract");

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Contractstartdate)
                    .HasColumnName("contractstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcontractblocked)
                    .HasColumnName("bcontractblocked")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Contractenddate)
                    .HasColumnName("contractenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifyLastupdate)
                    .HasColumnName("modify_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Monthlyfees)
                    .HasColumnName("monthlyfees")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Monthlyno).HasColumnName("monthlyno");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custcancelsno>(entity =>
            {
                entity.HasKey(e => new { e.Custcode, e.Sno1, e.Sno2 })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custcancelsno");

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Sno1).HasColumnName("sno1");

                entity.Property(e => e.Sno2).HasColumnName("sno2");

                entity.Property(e => e.Cancelcomment)
                    .HasColumnName("cancelcomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fromdate)
                    .HasColumnName("fromdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Todate)
                    .HasColumnName("todate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custcaretrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Serviceorderno, e.Soassignedtotime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custcaretrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Serviceorderno).HasColumnName("serviceorderno");

                entity.Property(e => e.Soassignedtotime)
                    .HasColumnName("soassignedtotime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Soassigneddue)
                    .HasColumnName("soassigneddue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Soassignedto)
                    .IsRequired()
                    .HasColumnName("soassignedto")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custcaretransdetail>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Serviceorderno, e.Detailsno });

                entity.ToTable("custcaretransdetail");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Serviceorderno).HasColumnName("serviceorderno");

                entity.Property(e => e.Detailsno).HasColumnName("detailsno");

                entity.Property(e => e.CanceltransTime)
                    .HasColumnName("canceltrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cancelusercode)
                    .HasColumnName("cancelusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Detailcancelled).HasColumnName("detailcancelled");

                entity.Property(e => e.Sordercomments)
                    .HasColumnName("sordercomments")
                    .HasColumnType("text");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custcaretransdetailx>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Serviceorderno });

                entity.ToTable("custcaretransdetailx");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Serviceorderno).HasColumnName("serviceorderno");

                entity.Property(e => e.CanceltransTime)
                    .HasColumnName("canceltrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cancelusercode)
                    .HasColumnName("cancelusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Detailcancelled).HasColumnName("detailcancelled");

                entity.Property(e => e.Detailsno).HasColumnName("detailsno");

                entity.Property(e => e.Sordercomments)
                    .HasColumnName("sordercomments")
                    .HasColumnType("text");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custcaretransm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Serviceorderno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custcaretransm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Serviceorderno).HasColumnName("serviceorderno");

                entity.Property(e => e.Calldirection).HasColumnName("calldirection");

                entity.Property(e => e.CustRepres)
                    .IsRequired()
                    .HasColumnName("cust_repres")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranchcode)
                    .IsRequired()
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .IsRequired()
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Newcustdescr)
                    .HasColumnName("newcustdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phonetype).HasColumnName("phonetype");

                entity.Property(e => e.Refserviceorderno).HasColumnName("refserviceorderno");

                entity.Property(e => e.Soassigneddue)
                    .HasColumnName("soassigneddue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Soassignedto)
                    .HasColumnName("soassignedto")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Soassignedtotime)
                    .HasColumnName("soassignedtotime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Soclosedtime)
                    .HasColumnName("soclosedtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Soclosedusercode)
                    .HasColumnName("soclosedusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sorderclassif1).HasColumnName("sorderclassif1");

                entity.Property(e => e.Sorderclassif2).HasColumnName("sorderclassif2");

                entity.Property(e => e.Sorderdate)
                    .HasColumnName("sorderdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sorderfinishtime)
                    .HasColumnName("sorderfinishtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sorderstarttime)
                    .HasColumnName("sorderstarttime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sorderstatus).HasColumnName("sorderstatus");

                entity.Property(e => e.Sordertime).HasColumnName("sordertime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Worknature).HasColumnName("worknature");

                entity.Property(e => e.Workpriority).HasColumnName("workpriority");

                entity.Property(e => e.Workpriorityorig).HasColumnName("workpriorityorig");
            });

            modelBuilder.Entity<Custdiscounts>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Custdiscpcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custdiscounts");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscpcode)
                    .HasColumnName("custdiscpcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AllowSell).HasColumnName("allow_sell");

                entity.Property(e => e.CustLastupdate)
                    .HasColumnName("cust_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Custdiscp2)
                    .HasColumnName("custdiscp2")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custdiscp3)
                    .HasColumnName("custdiscp3")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custdiscp4)
                    .HasColumnName("custdiscp4")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CustdiscpNomore)
                    .IsRequired()
                    .HasColumnName("custdiscp_nomore")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscptype)
                    .IsRequired()
                    .HasColumnName("custdiscptype")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustdiscountsHist>(entity =>
            {
                entity.HasKey(e => new { e.Transdate, e.Personcode, e.Custdiscpcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custdiscounts_hist");

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscpcode)
                    .HasColumnName("custdiscpcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AllowSell).HasColumnName("allow_sell");

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custdiscp2)
                    .HasColumnName("custdiscp2")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custdiscp3)
                    .HasColumnName("custdiscp3")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custdiscp4)
                    .HasColumnName("custdiscp4")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CustdiscpNomore)
                    .IsRequired()
                    .HasColumnName("custdiscp_nomore")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscptype)
                    .IsRequired()
                    .HasColumnName("custdiscptype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custdiscountstrans>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Transdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custdiscountstrans");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PatientMaxfatora)
                    .HasColumnName("patient_maxfatora")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.PatientPaypercent)
                    .HasColumnName("patient_paypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PatientPaytype)
                    .IsRequired()
                    .HasColumnName("patient_paytype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Personmaxbal)
                    .HasColumnName("personmaxbal")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personname)
                    .HasColumnName("personname")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custdiscpclassif>(entity =>
            {
                entity.HasKey(e => e.Custdiscpcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custdiscpclassif");

                entity.Property(e => e.Custdiscpcode)
                    .HasColumnName("custdiscpcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Custdiscpdescr)
                    .IsRequired()
                    .HasColumnName("custdiscpdescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Custmaint>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custmaint");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ItempartNo)
                    .HasColumnName("itempart_no")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custmaintm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custmaintm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Branchcustaddress1)
                    .IsRequired()
                    .HasColumnName("branchcustaddress1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustaddress2)
                    .HasColumnName("branchcustaddress2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustphone)
                    .IsRequired()
                    .HasColumnName("branchcustphone")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custname)
                    .IsRequired()
                    .HasColumnName("custname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Custrepname)
                    .HasColumnName("custrepname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Finishdate)
                    .HasColumnName("finishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Finishusercode)
                    .HasColumnName("finishusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maintcomments)
                    .HasColumnName("maintcomments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Maintdoneby)
                    .HasColumnName("maintdoneby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maintdonedescr)
                    .HasColumnName("maintdonedescr")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Maintproblems)
                    .HasColumnName("maintproblems")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Maintreceivedby)
                    .IsRequired()
                    .HasColumnName("maintreceivedby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maintreceiveddescr)
                    .IsRequired()
                    .HasColumnName("maintreceiveddescr")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Maintserialno)
                    .HasColumnName("maintserialno")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Maintstatus).HasColumnName("maintstatus");

                entity.Property(e => e.Phcode)
                    .IsRequired()
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Planfinishdate)
                    .HasColumnName("planfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pphcode)
                    .HasColumnName("pphcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Refserviceordersno).HasColumnName("refserviceordersno");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custnosaleitems>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Familycode });

                entity.ToTable("custnosaleitems");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Familycode)
                    .HasColumnName("familycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AllowSell).HasColumnName("allow_sell");

                entity.Property(e => e.CustLastupdate)
                    .HasColumnName("cust_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CustnosaleitemsHist>(entity =>
            {
                entity.HasKey(e => new { e.Transdate, e.Personcode, e.Familycode });

                entity.ToTable("custnosaleitems_hist");

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Familycode)
                    .HasColumnName("familycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AllowSell).HasColumnName("allow_sell");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Customerbranches>(entity =>
            {
                entity.HasKey(e => new { e.Custcode, e.Custbranchcode });

                entity.ToTable("customerbranches");

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Braddress)
                    .HasColumnName("braddress")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Branchblocked)
                    .HasColumnName("branchblocked")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Branchclassif)
                    .IsRequired()
                    .HasColumnName("branchclassif")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Branchexpirydate)
                    .HasColumnName("branchexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchstartdate)
                    .HasColumnName("branchstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Brphone)
                    .HasColumnName("brphone")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Contractenddate)
                    .HasColumnName("contractenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Contractstartdate)
                    .HasColumnName("contractstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custbranchname)
                    .IsRequired()
                    .HasColumnName("custbranchname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Custbrglobalcode)
                    .HasColumnName("custbrglobalcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifyLastupdate)
                    .HasColumnName("modify_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Monthlyfees)
                    .HasColumnName("monthlyfees")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustOrders>(entity =>
            {
                entity.HasKey(e => new { e.Orderid, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("cust_orders");

                entity.Property(e => e.Orderid).HasColumnName("orderid");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Customerpic)
                    .IsRequired()
                    .HasColumnName("customerpic")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Itemprice)
                    .HasColumnName("itemprice")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Itemquantity)
                    .HasColumnName("itemquantity")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Orderdate)
                    .HasColumnName("orderdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderdone).HasColumnName("orderdone");

                entity.Property(e => e.Orderdownloaddate)
                    .HasColumnName("orderdownloaddate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Custpatientrelatives>(entity =>
            {
                entity.HasKey(e => new { e.Custcode, e.Relativecode });

                entity.ToTable("custpatientrelatives");

                entity.HasIndex(e => e.Custcode)
                    .HasName("custpatientrelatives_ndx1");

                entity.HasIndex(e => new { e.Custcode, e.Relativecode })
                    .HasName("custpatientrelatives_ndx2")
                    .IsUnique();

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientpaypercent)
                    .HasColumnName("patientpaypercent")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Relativecodeactive)
                    .HasColumnName("relativecodeactive")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custpayments>(entity =>
            {
                entity.HasKey(e => new { e.Custcode, e.Custpaydate, e.Custpayvalue });

                entity.ToTable("custpayments");

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custpaydate)
                    .HasColumnName("custpaydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custpayvalue)
                    .HasColumnName("custpayvalue")
                    .HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Custdeductvalue)
                    .HasColumnName("custdeductvalue")
                    .HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Userentrydate)
                    .HasColumnName("userentrydate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Custrefdoctors>(entity =>
            {
                entity.HasKey(e => new { e.Refdoctorcode, e.Custcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custrefdoctors");

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custcodelock).HasColumnName("custcodelock");

                entity.Property(e => e.Custcomment)
                    .HasColumnName("custcomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Doctortime1).HasColumnName("doctortime1");

                entity.Property(e => e.Doctortime2).HasColumnName("doctortime2");

                entity.Property(e => e.Doctortime3).HasColumnName("doctortime3");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTimeLock)
                    .HasColumnName("trans_time_lock")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsercodeLock)
                    .HasColumnName("usercode_lock")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custrelativespercent>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Relativecode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custrelativespercent");

                entity.HasIndex(e => new { e.Testcode, e.Pcategorycode })
                    .HasName("custrelativespercent_ndx6");

                entity.HasIndex(e => new { e.Testcode, e.Personcode })
                    .HasName("custrelativespercent_ndx5");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custdiscp0)
                    .HasColumnName("custdiscp0")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custtestprice)
                    .HasColumnName("custtestprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Custtestprice0)
                    .HasColumnName("custtestprice0")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Pcategorycode0).HasColumnName("pcategorycode0");

                entity.Property(e => e.Pricetype)
                    .IsRequired()
                    .HasColumnName("pricetype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Relativepaypercent)
                    .HasColumnName("relativepaypercent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Relativepaypercent0)
                    .HasColumnName("relativepaypercent0")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testincontract).HasColumnName("testincontract");

                entity.Property(e => e.Testpricedel)
                    .HasColumnName("testpricedel")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Valuetype)
                    .IsRequired()
                    .HasColumnName("valuetype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Valuetype0)
                    .HasColumnName("valuetype0")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custrelativespercentsource>(entity =>
            {
                entity.HasKey(e => new { e.PersoncodeFrom, e.PersoncodeTo })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custrelativespercentsource");

                entity.Property(e => e.PersoncodeFrom)
                    .HasColumnName("personcode_from")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PersoncodeTo)
                    .HasColumnName("personcode_to")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Custtests>(entity =>
            {
                entity.HasKey(e => new { e.Custcode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("custtests");

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Custtestcode)
                    .IsRequired()
                    .HasColumnName("custtestcode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Custtestname)
                    .IsRequired()
                    .HasColumnName("custtestname")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Dailyexpenses>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Expensedate, e.Intervalcode, e.Expcode, e.Cheqsno, e.DaySno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("dailyexpenses");

                entity.HasIndex(e => e.Cheqsno)
                    .HasName("dailyexpenses_ndx1");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("dailyexpenses_dmp");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Expensedate)
                    .HasColumnName("expensedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.DaySno).HasColumnName("day_sno");

                entity.Property(e => e.Branchcode2)
                    .IsRequired()
                    .HasColumnName("branchcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Expcomment)
                    .HasColumnName("expcomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expsource).HasColumnName("expsource");

                entity.Property(e => e.Expusercode)
                    .HasColumnName("expusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Expvalue)
                    .HasColumnName("expvalue")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Dailyexpenses5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Expensedate, e.Intervalcode, e.Expcode, e.Cheqsno, e.DaySno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("dailyexpenses5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Expensedate)
                    .HasColumnName("expensedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.DaySno).HasColumnName("day_sno");

                entity.Property(e => e.Branchcode2)
                    .IsRequired()
                    .HasColumnName("branchcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Expcomment)
                    .HasColumnName("expcomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expsource).HasColumnName("expsource");

                entity.Property(e => e.Expusercode)
                    .HasColumnName("expusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Expvalue)
                    .HasColumnName("expvalue")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Diseasegroups>(entity =>
            {
                entity.HasKey(e => e.DisGrpId);

                entity.ToTable("diseasegroups");

                entity.Property(e => e.DisGrpId)
                    .HasColumnName("dis_grp_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisGrpAname)
                    .IsRequired()
                    .HasColumnName("dis_grp_aname")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DisGrpCode).HasColumnName("dis_grp_code");

                entity.Property(e => e.DisGrpName)
                    .IsRequired()
                    .HasColumnName("dis_grp_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DisSecId).HasColumnName("dis_sec_id");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Diseases>(entity =>
            {
                entity.HasKey(e => e.DisId);

                entity.ToTable("diseases");

                entity.Property(e => e.DisId)
                    .HasColumnName("dis_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisAname)
                    .IsRequired()
                    .HasColumnName("dis_aname")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DisCode).HasColumnName("dis_code");

                entity.Property(e => e.DisGrpId).HasColumnName("dis_grp_id");

                entity.Property(e => e.DisName)
                    .IsRequired()
                    .HasColumnName("dis_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DisSecId).HasColumnName("dis_sec_id");

                entity.Property(e => e.DisWhoCode)
                    .IsRequired()
                    .HasColumnName("dis_who_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Diseasesdata>(entity =>
            {
                entity.HasKey(e => e.DisId);

                entity.ToTable("diseasesdata");

                entity.Property(e => e.DisId)
                    .HasColumnName("dis_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisExc)
                    .HasColumnName("dis_exc")
                    .HasColumnType("text");

                entity.Property(e => e.DisInc)
                    .HasColumnName("dis_inc")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Diseasesections>(entity =>
            {
                entity.HasKey(e => e.DisSecCode);

                entity.ToTable("diseasesections");

                entity.Property(e => e.DisSecCode)
                    .HasColumnName("dis_sec_code")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisSecAname)
                    .IsRequired()
                    .HasColumnName("dis_sec_aname")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DisSecId).HasColumnName("dis_sec_id");

                entity.Property(e => e.DisSecName)
                    .IsRequired()
                    .HasColumnName("dis_sec_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Districts>(entity =>
            {
                entity.HasKey(e => e.Districtcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("districts");

                entity.Property(e => e.Districtcode)
                    .HasColumnName("districtcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Districtname)
                    .IsRequired()
                    .HasColumnName("districtname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Doctorsspecialty>(entity =>
            {
                entity.HasKey(e => e.Specialtycode);

                entity.ToTable("doctorsspecialty");

                entity.HasIndex(e => new { e.Specialtycode, e.Specialtydescr })
                    .HasName("doctorsspecialty_aa");

                entity.Property(e => e.Specialtycode)
                    .HasColumnName("specialtycode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Specialtydescr)
                    .IsRequired()
                    .HasColumnName("specialtydescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Drugsclassif>(entity =>
            {
                entity.HasKey(e => e.Drugclassifcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("drugsclassif");

                entity.Property(e => e.Drugclassifcode)
                    .HasColumnName("drugclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Drugclassifdescr)
                    .IsRequired()
                    .HasColumnName("drugclassifdescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empagingtypes>(entity =>
            {
                entity.HasKey(e => e.Empagingtypecode);

                entity.ToTable("empagingtypes");

                entity.Property(e => e.Empagingtypecode)
                    .HasColumnName("empagingtypecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.EmpagingYearsf)
                    .HasColumnName("empaging_yearsf")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.EmpagingYearst)
                    .HasColumnName("empaging_yearst")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.HawafezF5)
                    .HasColumnName("hawafez_f5")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Empattendance>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Attenddate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empattendance");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Attenddate)
                    .HasColumnName("attenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Attendnote)
                    .HasColumnName("attendnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Finishtime)
                    .HasColumnName("finishtime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.HoursExtra)
                    .HasColumnName("hours_extra")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.HoursMissing)
                    .HasColumnName("hours_missing")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Leavetype)
                    .IsRequired()
                    .HasColumnName("leavetype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Saltimededuction)
                    .HasColumnName("saltimededuction")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Saltimeextra)
                    .HasColumnName("saltimeextra")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Starttime)
                    .HasColumnName("starttime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empattenddeductions>(entity =>
            {
                entity.HasKey(e => new { e.Latefrom, e.Lateto, e.Ruletype })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empattenddeductions");

                entity.Property(e => e.Latefrom)
                    .HasColumnName("latefrom")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Lateto)
                    .HasColumnName("lateto")
                    .HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Ruletype)
                    .HasColumnName("ruletype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Deductionofdays)
                    .HasColumnName("deductionofdays")
                    .HasColumnType("numeric(6, 4)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Penaltycode).HasColumnName("penaltycode");
            });

            modelBuilder.Entity<Empattenddeductions2>(entity =>
            {
                entity.HasKey(e => new { e.Ptclassifcode, e.Latefrom, e.Lateto, e.Ruletype })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empattenddeductions2");

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Latefrom)
                    .HasColumnName("latefrom")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Lateto)
                    .HasColumnName("lateto")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Ruletype)
                    .HasColumnName("ruletype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Deductionofdays)
                    .HasColumnName("deductionofdays")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Extrarateleavedays)
                    .HasColumnName("extrarateleavedays")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Extraratenightshift)
                    .HasColumnName("extraratenightshift")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Extrarateoffdays)
                    .HasColumnName("extrarateoffdays")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Empattendspecial>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Eassdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empattendspecial");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Eassdate)
                    .HasColumnName("eassdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Attendsys).HasColumnName("attendsys");

                entity.Property(e => e.Eascomment)
                    .HasColumnName("eascomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Easdeleted).HasColumnName("easdeleted");

                entity.Property(e => e.Easfdate)
                    .HasColumnName("easfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTimedeleted)
                    .HasColumnName("trans_timedeleted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercodedeleted)
                    .HasColumnName("usercodedeleted")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empborrow>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Borrowdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empborrow");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Borrowdate)
                    .HasColumnName("borrowdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Borrowcomments)
                    .HasColumnName("borrowcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Borrowvalue)
                    .HasColumnName("borrowvalue")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.Empcashed)
                    .HasColumnName("empcashed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empborrowpayments>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Borrowdate, e.Borrowreturndate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empborrowpayments");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Borrowdate)
                    .HasColumnName("borrowdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Borrowreturndate)
                    .HasColumnName("borrowreturndate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Blockpayment)
                    .HasColumnName("blockpayment")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Borrowpaydate)
                    .HasColumnName("borrowpaydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Borrowpayvalue)
                    .HasColumnName("borrowpayvalue")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empbuys>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Empbuydate, e.Empbuyvalue })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empbuys");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empbuydate)
                    .HasColumnName("empbuydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empbuyvalue)
                    .HasColumnName("empbuyvalue")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.Empbuycomment)
                    .HasColumnName("empbuycomment")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empcomments>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Commentdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empcomments");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Commentdate)
                    .HasColumnName("commentdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasColumnType("text");

                entity.Property(e => e.Secretrepmark)
                    .HasColumnName("secretrepmark")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Secretreptypecode).HasColumnName("secretreptypecode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Whowrotethis)
                    .IsRequired()
                    .HasColumnName("whowrotethis")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empdailyattendance>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Transtime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empdailyattendance");

                entity.HasIndex(e => new { e.Attendbranchcode, e.TableDumped })
                    .HasName("empdailyattendance_ndx10");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Transtime)
                    .HasColumnName("transtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Attendbranchcode)
                    .IsRequired()
                    .HasColumnName("attendbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empsalclosed)
                    .IsRequired()
                    .HasColumnName("empsalclosed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Emptransdel).HasColumnName("emptransdel");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transcomment)
                    .HasColumnName("transcomment")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Transdir).HasColumnName("transdir");

                entity.Property(e => e.Transdir1).HasColumnName("transdir1");

                entity.Property(e => e.Transreasoncode)
                    .HasColumnName("transreasoncode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Transstatus).HasColumnName("transstatus");

                entity.Property(e => e.Transtime1)
                    .HasColumnName("transtime1")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserTransTime)
                    .HasColumnName("user_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empdailyattendance2>(entity =>
            {
                entity.HasKey(e => e.Personcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empdailyattendance2");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Transdir).HasColumnName("transdir");
            });

            modelBuilder.Entity<Empdailyattendancecalc>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Attenddate, e.Transtime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empdailyattendancecalc");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Attenddate)
                    .HasColumnName("attenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtime)
                    .HasColumnName("transtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Apply2).HasColumnName("apply2");

                entity.Property(e => e.Attendduration).HasColumnName("attendduration");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Calccomments)
                    .HasColumnName("calccomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Daytimecontr).HasColumnName("daytimecontr");

                entity.Property(e => e.Deductionofdays)
                    .HasColumnName("deductionofdays")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Deductmoney)
                    .HasColumnName("deductmoney")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Deductok).HasColumnName("deductok");

                entity.Property(e => e.Deducttranstime)
                    .HasColumnName("deducttranstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Deductusercode)
                    .HasColumnName("deductusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptransdel).HasColumnName("emptransdel");

                entity.Property(e => e.Extramoney)
                    .HasColumnName("extramoney")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Extraofdays)
                    .HasColumnName("extraofdays")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Extraok).HasColumnName("extraok");

                entity.Property(e => e.Extratranstime)
                    .HasColumnName("extratranstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Extrausercode)
                    .HasColumnName("extrausercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Isnightshift).HasColumnName("isnightshift");

                entity.Property(e => e.Isoffday)
                    .HasColumnName("isoffday")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Latetime).HasColumnName("latetime");

                entity.Property(e => e.Outdeductmoney)
                    .HasColumnName("outdeductmoney")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Outdeductofdays)
                    .HasColumnName("outdeductofdays")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Outdeductok).HasColumnName("outdeductok");

                entity.Property(e => e.Outdeducttranstime)
                    .HasColumnName("outdeducttranstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Outdeductusercode)
                    .HasColumnName("outdeductusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Outtime).HasColumnName("outtime");

                entity.Property(e => e.Overtime).HasColumnName("overtime");

                entity.Property(e => e.Shiftno).HasColumnName("shiftno");

                entity.Property(e => e.Transdir).HasColumnName("transdir");
            });

            modelBuilder.Entity<Empdailyattendanceclose>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Sdate, e.Fdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empdailyattendanceclose");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sdate)
                    .HasColumnName("sdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fdate)
                    .HasColumnName("fdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empdailyattendancesum>(entity =>
            {
                entity.HasKey(e => new { e.Attendyear, e.Attendmonth, e.Personcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empdailyattendancesum");

                entity.Property(e => e.Attendyear).HasColumnName("attendyear");

                entity.Property(e => e.Attendmonth).HasColumnName("attendmonth");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empattendtype)
                    .IsRequired()
                    .HasColumnName("empattendtype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empdeduction)
                    .HasColumnName("empdeduction")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.LatetimeReal)
                    .HasColumnName("latetime_real")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.LatetimeWeighted)
                    .HasColumnName("latetime_weighted")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.OvertimeReal)
                    .HasColumnName("overtime_real")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.OvertimeWeighted)
                    .HasColumnName("overtime_weighted")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empdailytimes>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Dayno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empdailytimes");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Dayno).HasColumnName("dayno");

                entity.Property(e => e.Apply2).HasColumnName("apply2");

                entity.Property(e => e.Dailytimesp).HasColumnName("dailytimesp");

                entity.Property(e => e.Dailytimestd).HasColumnName("dailytimestd");

                entity.Property(e => e.Empftime)
                    .IsRequired()
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime1)
                    .IsRequired()
                    .HasColumnName("empftime1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime2)
                    .HasColumnName("empftime2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime3)
                    .HasColumnName("empftime3")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .IsRequired()
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime1)
                    .IsRequired()
                    .HasColumnName("empstime1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime2)
                    .HasColumnName("empstime2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime3)
                    .HasColumnName("empstime3")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nightshift).HasColumnName("nightshift");

                entity.Property(e => e.Nightshift2).HasColumnName("nightshift2");

                entity.Property(e => e.Weeklyleave).HasColumnName("weeklyleave");
            });

            modelBuilder.Entity<Empdailytimes2>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Attenddate, e.Attenddatesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empdailytimes2");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Attenddate)
                    .HasColumnName("attenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Attenddatesno).HasColumnName("attenddatesno");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empdatatrans>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.TransTime });

                entity.ToTable("empdatatrans");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EmpOwner).HasColumnName("emp_owner");

                entity.Property(e => e.Empattendance).HasColumnName("empattendance");

                entity.Property(e => e.Empattendtype)
                    .HasColumnName("empattendtype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empcontractdate)
                    .HasColumnName("empcontractdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empdatacomment)
                    .HasColumnName("empdatacomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empinsurance).HasColumnName("empinsurance");

                entity.Property(e => e.Empinsurancedate)
                    .HasColumnName("empinsurancedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empinsuranceno)
                    .HasColumnName("empinsuranceno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empinwork)
                    .HasColumnName("empinwork")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empsocialstatus)
                    .IsRequired()
                    .HasColumnName("empsocialstatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Emptimepermonth)
                    .HasColumnName("emptimepermonth")
                    .HasColumnType("decimal(4, 1)");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Insurebranchcode)
                    .HasColumnName("insurebranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personfdate)
                    .HasColumnName("personfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personsdate)
                    .HasColumnName("personsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode40)
                    .IsRequired()
                    .HasColumnName("ptclassifcode40")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empdegrees>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Empdegree });

                entity.ToTable("empdegrees");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empdegree)
                    .HasColumnName("empdegree")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Degreedate)
                    .HasColumnName("degreedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empcollege)
                    .IsRequired()
                    .HasColumnName("empcollege")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empcurentdegree)
                    .IsRequired()
                    .HasColumnName("empcurentdegree")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empdegreecode)
                    .HasColumnName("empdegreecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empgrade).HasColumnName("empgrade");

                entity.Property(e => e.Empschool)
                    .IsRequired()
                    .HasColumnName("empschool")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empspecialty)
                    .IsRequired()
                    .HasColumnName("empspecialty")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empspecialtycode)
                    .HasColumnName("empspecialtycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empdepts>(entity =>
            {
                entity.HasKey(e => e.Jhccode);

                entity.ToTable("empdepts");

                entity.Property(e => e.Jhccode)
                    .HasColumnName("jhccode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Deptcode).HasColumnName("deptcode");

                entity.Property(e => e.Deptdescr)
                    .IsRequired()
                    .HasColumnName("deptdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ismanager).HasColumnName("ismanager");

                entity.Property(e => e.Jhcl1)
                    .IsRequired()
                    .HasColumnName("jhcl1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Jhcl2)
                    .IsRequired()
                    .HasColumnName("jhcl2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Salmax)
                    .HasColumnName("salmax")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Salmin)
                    .HasColumnName("salmin")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmpEarntax>(entity =>
            {
                entity.HasKey(e => new { e.Earnyear, e.Earnmonth, e.Branchcode, e.Personcode });

                entity.ToTable("emp_earntax");

                entity.Property(e => e.Earnyear).HasColumnName("earnyear");

                entity.Property(e => e.Earnmonth).HasColumnName("earnmonth");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empjoballow)
                    .HasColumnName("empjoballow")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsocialstatus)
                    .IsRequired()
                    .HasColumnName("empsocialstatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifdescr)
                    .IsRequired()
                    .HasColumnName("ptclassifdescr")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empexchanges>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Empdate, e.Empstime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empexchanges");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empdate)
                    .HasColumnName("empdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empcode2)
                    .IsRequired()
                    .HasColumnName("empcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Exchcomment)
                    .HasColumnName("exchcomment")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Exchdel).HasColumnName("exchdel");

                entity.Property(e => e.ExchdeltransTime)
                    .HasColumnName("exchdeltrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Exchdelusercode)
                    .HasColumnName("exchdelusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empexperiences>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Expsdate });

                entity.ToTable("empexperiences");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Expsdate)
                    .HasColumnName("expsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empexpyears)
                    .HasColumnName("empexpyears")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Empexpyearsapp)
                    .HasColumnName("empexpyearsapp")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Expdescr)
                    .IsRequired()
                    .HasColumnName("expdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expfdate)
                    .HasColumnName("expfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expplace)
                    .IsRequired()
                    .HasColumnName("expplace")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exptitle)
                    .IsRequired()
                    .HasColumnName("exptitle")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empgifts>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Actiondate, e.Actionsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empgifts");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Actiondate)
                    .HasColumnName("actiondate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Actionsno).HasColumnName("actionsno");

                entity.Property(e => e.Actionnote)
                    .HasColumnName("actionnote")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Appliedbycode)
                    .HasColumnName("appliedbycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Effectdate)
                    .HasColumnName("effectdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Effectstatus).HasColumnName("effectstatus");

                entity.Property(e => e.Effectuser)
                    .HasColumnName("effectuser")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Effectvalue)
                    .HasColumnName("effectvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empsalperday)
                    .HasColumnName("empsalperday")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Giftattendance).HasColumnName("giftattendance");

                entity.Property(e => e.Giftdays)
                    .HasColumnName("giftdays")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Giftvalue)
                    .HasColumnName("giftvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Penaltycode).HasColumnName("penaltycode");

                entity.Property(e => e.Penaltydays)
                    .HasColumnName("penaltydays")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Penaltyno).HasColumnName("penaltyno");

                entity.Property(e => e.Penaltyvalue)
                    .HasColumnName("penaltyvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtype).HasColumnName("transtype");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empjobdescription>(entity =>
            {
                entity.HasKey(e => e.Empcode);

                entity.ToTable("empjobdescription");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Empjobdescr)
                    .IsRequired()
                    .HasColumnName("empjobdescr")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empleaves>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Leavesdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empleaves");

                entity.HasIndex(e => new { e.Personcode, e.Leavesdate, e.Leavefdate })
                    .HasName("empleaves_ndx1");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Leavesdate)
                    .HasColumnName("leavesdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Leavedays).HasColumnName("leavedays");

                entity.Property(e => e.Leavefdate)
                    .HasColumnName("leavefdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Leavenote)
                    .HasColumnName("leavenote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leavesource)
                    .HasColumnName("leavesource")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Leavetype)
                    .IsRequired()
                    .HasColumnName("leavetype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Shiftleave).HasColumnName("shiftleave");

                entity.Property(e => e.Slftime)
                    .HasColumnName("slftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Slstime)
                    .HasColumnName("slstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Employeeshawafez>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Moneytargetf });

                entity.ToTable("employeeshawafez");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Moneytargetf)
                    .HasColumnName("moneytargetf")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Hafezp)
                    .HasColumnName("hafezp")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Moneytargett)
                    .HasColumnName("moneytargett")
                    .HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<Employeesimages>(entity =>
            {
                entity.HasKey(e => e.Empcode);

                entity.ToTable("employeesimages");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Emppicture)
                    .HasColumnName("emppicture")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Employeesimages2>(entity =>
            {
                entity.HasKey(e => e.Empcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("employeesimages2");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Empsign)
                    .HasColumnName("empsign")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Empmilitary>(entity =>
            {
                entity.HasKey(e => e.Empcode);

                entity.ToTable("empmilitary");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Certificatedate)
                    .HasColumnName("certificatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Certificateno)
                    .HasColumnName("certificateno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Empfreeedate)
                    .HasColumnName("empfreeedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empfreereason).HasColumnName("empfreereason");

                entity.Property(e => e.Empfreesdate)
                    .HasColumnName("empfreesdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MilitaryDays).HasColumnName("military_days");

                entity.Property(e => e.MilitaryMonths).HasColumnName("military_months");

                entity.Property(e => e.MilitaryYears).HasColumnName("military_years");

                entity.Property(e => e.Militarycomments)
                    .HasColumnName("militarycomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Militaryfdate)
                    .HasColumnName("militaryfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Militarygradecode).HasColumnName("militarygradecode");

                entity.Property(e => e.Militarysdate)
                    .HasColumnName("militarysdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Militarystatuscode).HasColumnName("militarystatuscode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empnightshifts>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Nsdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empnightshifts");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Nsdate)
                    .HasColumnName("nsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nsblocked).HasColumnName("nsblocked");

                entity.Property(e => e.Nscomment)
                    .HasColumnName("nscomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nsftime)
                    .IsRequired()
                    .HasColumnName("nsftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Nsstime)
                    .IsRequired()
                    .HasColumnName("nsstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empoffdays>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Offdaysdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empoffdays");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Offdaysdate)
                    .HasColumnName("offdaysdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Approvecomment)
                    .HasColumnName("approvecomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Approvetranstime)
                    .HasColumnName("approvetranstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Approveusercode)
                    .HasColumnName("approveusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Offdayapproval).HasColumnName("offdayapproval");

                entity.Property(e => e.Offdayblocked).HasColumnName("offdayblocked");

                entity.Property(e => e.Offdaycomment)
                    .HasColumnName("offdaycomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Offdayfdate)
                    .HasColumnName("offdayfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Offdays).HasColumnName("offdays");

                entity.Property(e => e.Offdaytype)
                    .IsRequired()
                    .HasColumnName("offdaytype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Empoffdaystrans>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Transdate, e.RecSource })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empoffdaystrans");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RecSource).HasColumnName("rec_source");

                entity.Property(e => e.Empoldarda).HasColumnName("empoldarda");

                entity.Property(e => e.Empoldoffdays)
                    .HasColumnName("empoldoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empoldrr).HasColumnName("empoldrr");

                entity.Property(e => e.Empoldsick).HasColumnName("empoldsick");

                entity.Property(e => e.Empremainarda).HasColumnName("empremainarda");

                entity.Property(e => e.Empremainoffdays)
                    .HasColumnName("empremainoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empremainrr).HasColumnName("empremainrr");

                entity.Property(e => e.Empremainsick).HasColumnName("empremainsick");

                entity.Property(e => e.Empyrlyarda).HasColumnName("empyrlyarda");

                entity.Property(e => e.Empyrlyoffdays)
                    .HasColumnName("empyrlyoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empyrlyrr).HasColumnName("empyrlyrr");

                entity.Property(e => e.Empyrlysick).HasColumnName("empyrlysick");

                entity.Property(e => e.Offdayscomment)
                    .HasColumnName("offdayscomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empothers>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Actiondate, e.Othersclassif })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empothers");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Actiondate)
                    .HasColumnName("actiondate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Othersclassif).HasColumnName("othersclassif");

                entity.Property(e => e.Empsalperday)
                    .HasColumnName("empsalperday")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Othersapprovedby)
                    .IsRequired()
                    .HasColumnName("othersapprovedby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Otherscomments)
                    .HasColumnName("otherscomments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Othersmoney)
                    .HasColumnName("othersmoney")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empovertime>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Actiondate, e.Otime1 })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empovertime");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Actiondate)
                    .HasColumnName("actiondate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Otime1)
                    .HasColumnName("otime1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empsalperhour)
                    .HasColumnName("empsalperhour")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Otapprovedby)
                    .IsRequired()
                    .HasColumnName("otapprovedby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Otcomments)
                    .HasColumnName("otcomments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Otfactor)
                    .HasColumnName("otfactor")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Othours)
                    .HasColumnName("othours")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Otime2)
                    .HasColumnName("otime2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Otmoney)
                    .HasColumnName("otmoney")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Otoffdays).HasColumnName("otoffdays");

                entity.Property(e => e.Otpaid).HasColumnName("otpaid");

                entity.Property(e => e.Otpaidby)
                    .IsRequired()
                    .HasColumnName("otpaidby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Otrealhours)
                    .HasColumnName("otrealhours")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emppausesalary>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("emppausesalary");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pausecomment)
                    .HasColumnName("pausecomment")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pausesalary).HasColumnName("pausesalary");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emppenaltyrules>(entity =>
            {
                entity.HasKey(e => e.Penaltycode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("emppenaltyrules");

                entity.Property(e => e.Penaltycode)
                    .HasColumnName("penaltycode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Attendrule).HasColumnName("attendrule");

                entity.Property(e => e.Editrule).HasColumnName("editrule");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Penaltyclassif)
                    .HasColumnName("penaltyclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Penaltydays1)
                    .HasColumnName("penaltydays1")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Penaltydays2)
                    .HasColumnName("penaltydays2")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Penaltydays3)
                    .HasColumnName("penaltydays3")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Penaltydays4)
                    .HasColumnName("penaltydays4")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Penaltydescr)
                    .HasColumnName("penaltydescr")
                    .HasColumnType("text");

                entity.Property(e => e.Penaltyname)
                    .IsRequired()
                    .HasColumnName("penaltyname")
                    .HasColumnType("text");

                entity.Property(e => e.Penaltyruleblock).HasColumnName("penaltyruleblock");

                entity.Property(e => e.Penaltyvalue1)
                    .HasColumnName("penaltyvalue1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Penaltyvalue2)
                    .HasColumnName("penaltyvalue2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Penaltyvalue3)
                    .HasColumnName("penaltyvalue3")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Penaltyvalue4)
                    .HasColumnName("penaltyvalue4")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empplan>(entity =>
            {
                entity.HasKey(e => new { e.Planyear, e.Planmonth, e.Branchcode, e.Jhccode, e.Jobcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empplan");

                entity.Property(e => e.Planyear).HasColumnName("planyear");

                entity.Property(e => e.Planmonth).HasColumnName("planmonth");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Jhccode)
                    .HasColumnName("jhccode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Jobcode)
                    .HasColumnName("jobcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Actualno).HasColumnName("actualno");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Planno).HasColumnName("planno");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emprecruit>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Recruitcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("emprecruit");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Recruitcode)
                    .HasColumnName("recruitcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Recruitreceived).HasColumnName("recruitreceived");

                entity.Property(e => e.Recruitreceivedate)
                    .HasColumnName("recruitreceivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emprelatives>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Relativesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("emprelatives");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Relativesno).HasColumnName("relativesno");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativecode)
                    .IsRequired()
                    .HasColumnName("relativecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Relativedep).HasColumnName("relativedep");

                entity.Property(e => e.Relativedobirth)
                    .HasColumnName("relativedobirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativejob)
                    .HasColumnName("relativejob")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relativename)
                    .IsRequired()
                    .HasColumnName("relativename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Relativevip).HasColumnName("relativevip");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empsalaries>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Salarydate, e.TransTime });

                entity.ToTable("empsalaries");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Salarydate)
                    .HasColumnName("salarydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.EmpinsuranceInjury).HasColumnName("empinsurance_injury");

                entity.Property(e => e.Empjoballow)
                    .HasColumnName("empjoballow")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Empsal08)
                    .HasColumnName("empsal08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empsal09)
                    .HasColumnName("empsal09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalSpecial)
                    .HasColumnName("empsal_special")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Origintaxtype).HasColumnName("origintaxtype");

                entity.Property(e => e.Pausesalary).HasColumnName("pausesalary");

                entity.Property(e => e.Realsalmodif)
                    .HasColumnName("realsalmodif")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Salary)
                    .HasColumnName("salary")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.Salarycomment)
                    .HasColumnName("salarycomment")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Salarydiff)
                    .HasColumnName("salarydiff")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.Taxsal01).HasColumnName("taxsal01");

                entity.Property(e => e.Taxsal02).HasColumnName("taxsal02");

                entity.Property(e => e.Taxsal03).HasColumnName("taxsal03");

                entity.Property(e => e.Taxsal04).HasColumnName("taxsal04");

                entity.Property(e => e.Taxsal05).HasColumnName("taxsal05");

                entity.Property(e => e.Taxsal06).HasColumnName("taxsal06");

                entity.Property(e => e.Taxsal07).HasColumnName("taxsal07");

                entity.Property(e => e.Taxsal08).HasColumnName("taxsal08");

                entity.Property(e => e.Taxsal09).HasColumnName("taxsal09");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empsalesplan>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Personcode, e.Planyear, e.Planmonth, e.Custdiscpcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empsalesplan");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Planyear).HasColumnName("planyear");

                entity.Property(e => e.Planmonth).HasColumnName("planmonth");

                entity.Property(e => e.Custdiscpcode)
                    .HasColumnName("custdiscpcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Actualsales)
                    .HasColumnName("actualsales")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Planquota)
                    .HasColumnName("planquota")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Plantarget)
                    .HasColumnName("plantarget")
                    .HasColumnType("decimal(9, 0)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empspecialdeduct>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Deductdate, e.Deductitem })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("empspecialdeduct");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Deductdate)
                    .HasColumnName("deductdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Deductitem)
                    .HasColumnName("deductitem")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Deductcomments)
                    .HasColumnName("deductcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Deductvalue)
                    .HasColumnName("deductvalue")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empspecialgifts>(entity =>
            {
                entity.HasKey(e => new { e.Specialgiftsno, e.Empcode });

                entity.ToTable("empspecialgifts");

                entity.Property(e => e.Specialgiftsno).HasColumnName("specialgiftsno");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empsocialstatus)
                    .IsRequired()
                    .HasColumnName("empsocialstatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empspecialgiftvalue)
                    .HasColumnName("empspecialgiftvalue")
                    .HasColumnType("decimal(8, 2)");
            });

            modelBuilder.Entity<Empspecialgiftsm>(entity =>
            {
                entity.HasKey(e => e.Specialgiftsno);

                entity.ToTable("empspecialgiftsm");

                entity.Property(e => e.Specialgiftsno)
                    .HasColumnName("specialgiftsno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Empfromsdate).HasColumnName("empfromsdate");

                entity.Property(e => e.Maxvalue)
                    .HasColumnName("maxvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Minvalue)
                    .HasColumnName("minvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Specialgiftclosed)
                    .HasColumnName("specialgiftclosed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Specialgiftdate)
                    .HasColumnName("specialgiftdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Specialgiftdescr)
                    .IsRequired()
                    .HasColumnName("specialgiftdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Specialgiftvalue)
                    .HasColumnName("specialgiftvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emptasks>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Emptasksno });

                entity.ToTable("emptasks");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptasksno).HasColumnName("emptasksno");

                entity.Property(e => e.Empcode)
                    .IsRequired()
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptaskby)
                    .IsRequired()
                    .HasColumnName("emptaskby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptaskclassif)
                    .IsRequired()
                    .HasColumnName("emptaskclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptaskdate)
                    .HasColumnName("emptaskdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Emptaskdescr)
                    .IsRequired()
                    .HasColumnName("emptaskdescr")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Emptaskdone).HasColumnName("emptaskdone");

                entity.Property(e => e.Emptaskftime)
                    .HasColumnName("emptaskftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Emptaskpriority).HasColumnName("emptaskpriority");

                entity.Property(e => e.Emptaskstime)
                    .HasColumnName("emptaskstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TaskdoneTransTime)
                    .HasColumnName("taskdone_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TaskdoneUsercode)
                    .HasColumnName("taskdone_usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmpTaxfreeitems>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Taxfreeitem });

                entity.ToTable("emp_taxfreeitems");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Taxfreeitem)
                    .HasColumnName("taxfreeitem")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemactive).HasColumnName("itemactive");

                entity.Property(e => e.Taxfreevalue)
                    .HasColumnName("taxfreevalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.TaxpercentInsur1).HasColumnName("taxpercent_insur1");

                entity.Property(e => e.TaxpercentInsur2).HasColumnName("taxpercent_insur2");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emptimes>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Dayno, e.Interval });

                entity.ToTable("emptimes");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Dayno).HasColumnName("dayno");

                entity.Property(e => e.Interval)
                    .HasColumnName("interval")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime)
                    .IsRequired()
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .IsRequired()
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emptraining>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Trainingname, e.Trainingsdate });

                entity.ToTable("emptraining");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Trainingname)
                    .HasColumnName("trainingname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Trainingsdate)
                    .HasColumnName("trainingsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Trainingcost)
                    .HasColumnName("trainingcost")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Trainingcostwho).HasColumnName("trainingcostwho");

                entity.Property(e => e.Trainingdescr)
                    .IsRequired()
                    .HasColumnName("trainingdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Trainingfdate)
                    .HasColumnName("trainingfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Traininggrade).HasColumnName("traininggrade");

                entity.Property(e => e.Traininghours).HasColumnName("traininghours");

                entity.Property(e => e.Trainingplace)
                    .IsRequired()
                    .HasColumnName("trainingplace")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Trainingplaceclassif).HasColumnName("trainingplaceclassif");

                entity.Property(e => e.Trainingtype)
                    .HasColumnName("trainingtype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empyearlyincrease>(entity =>
            {
                entity.HasKey(e => new { e.Empyear, e.Branchcode });

                entity.ToTable("empyearlyincrease");

                entity.Property(e => e.Empyear).HasColumnName("empyear");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empcomments)
                    .HasColumnName("empcomments")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empincreasep)
                    .HasColumnName("empincreasep")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Empincreasevalue)
                    .HasColumnName("empincreasevalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empincreasevalue2)
                    .HasColumnName("empincreasevalue2")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Maxvalue)
                    .HasColumnName("maxvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Minvalue)
                    .HasColumnName("minvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Empyearlyincrease2>(entity =>
            {
                entity.HasKey(e => new { e.Empyear, e.Branchcode, e.Empcode });

                entity.ToTable("empyearlyincrease2");

                entity.Property(e => e.Empyear).HasColumnName("empyear");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EmpsalFixed1)
                    .HasColumnName("empsal_fixed1")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalFixed2)
                    .HasColumnName("empsal_fixed2")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalSpecial1)
                    .HasColumnName("empsal_special1")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalSpecial2)
                    .HasColumnName("empsal_special2")
                    .HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<ErrorMessages>(entity =>
            {
                entity.HasKey(e => new { e.Dbtype, e.ErrMsgcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("error_messages");

                entity.Property(e => e.Dbtype)
                    .HasColumnName("dbtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ErrMsgcode).HasColumnName("err_msgcode");

                entity.Property(e => e.ErrMsgdescr)
                    .IsRequired()
                    .HasColumnName("err_msgdescr")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ErrMsgdescren)
                    .HasColumnName("err_msgdescren")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ErrorMessagesSys>(entity =>
            {
                entity.HasKey(e => new { e.Dbtype, e.ErrMsgcode, e.ErrMsgtime, e.Mitemname, e.Usercode });

                entity.ToTable("error_messages_sys");

                entity.Property(e => e.Dbtype)
                    .HasColumnName("dbtype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ErrMsgcode).HasColumnName("err_msgcode");

                entity.Property(e => e.ErrMsgtime)
                    .HasColumnName("err_msgtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mitemname)
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ErrMsgtext)
                    .IsRequired()
                    .HasColumnName("err_msgtext")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Expenses>(entity =>
            {
                entity.HasKey(e => e.Expcode);

                entity.ToTable("expenses");

                entity.Property(e => e.Expcode)
                    .HasColumnName("expcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Allmonths).HasColumnName("allmonths");

                entity.Property(e => e.Expaccitemcode)
                    .HasColumnName("expaccitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Expclassifcode).HasColumnName("expclassifcode");

                entity.Property(e => e.Expdescr)
                    .IsRequired()
                    .HasColumnName("expdescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Exptype)
                    .HasColumnName("exptype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Expensesclassif>(entity =>
            {
                entity.HasKey(e => e.Expclassifcode);

                entity.ToTable("expensesclassif");

                entity.Property(e => e.Expclassifcode)
                    .HasColumnName("expclassifcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Expclassifdescr)
                    .IsRequired()
                    .HasColumnName("expclassifdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exptype)
                    .HasColumnName("exptype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Expensesopenbal>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Expcode, e.Bankcode });

                entity.ToTable("expensesopenbal");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expopencredit)
                    .HasColumnName("expopencredit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Expopendate)
                    .HasColumnName("expopendate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expopendebit)
                    .HasColumnName("expopendebit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Openbaltype)
                    .HasColumnName("openbaltype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Opentrans)
                    .HasColumnName("opentrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaClassif1>(entity =>
            {
                entity.HasKey(e => e.Faclassif11);

                entity.ToTable("fa_classif1");

                entity.Property(e => e.Faclassif11)
                    .HasColumnName("faclassif1")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode2)
                    .HasColumnName("accitemcode2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Accitemcode3)
                    .HasColumnName("accitemcode3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Faclassif1descr)
                    .IsRequired()
                    .HasColumnName("faclassif1descr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Falife)
                    .HasColumnName("falife")
                    .HasColumnType("decimal(6, 2)");
            });

            modelBuilder.Entity<FaClassif2>(entity =>
            {
                entity.HasKey(e => e.Faclassif21);

                entity.ToTable("fa_classif2");

                entity.Property(e => e.Faclassif21)
                    .HasColumnName("faclassif2")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.FaLife)
                    .HasColumnName("fa_life")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.FaYearlydepp)
                    .HasColumnName("fa_yearlydepp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Faclassif1)
                    .IsRequired()
                    .HasColumnName("faclassif1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Faclassif2descr)
                    .IsRequired()
                    .HasColumnName("faclassif2descr")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaClassif3>(entity =>
            {
                entity.HasKey(e => e.Faclassif31);

                entity.ToTable("fa_classif3");

                entity.Property(e => e.Faclassif31)
                    .HasColumnName("faclassif3")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Faclassif3descr)
                    .IsRequired()
                    .HasColumnName("faclassif3descr")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaFixedassets>(entity =>
            {
                entity.HasKey(e => e.Facode);

                entity.ToTable("fa_fixedassets");

                entity.HasIndex(e => new { e.BuyBranchcode, e.BuyDocnumber })
                    .HasName("fa_fixedassets_ndx1");

                entity.HasIndex(e => new { e.SellBranchcode, e.SellDocnumber })
                    .HasName("fa_fixedassets_ndx2");

                entity.Property(e => e.Facode)
                    .HasColumnName("facode")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedtoFacode).HasColumnName("addedto_facode");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyBranchcode)
                    .IsRequired()
                    .HasColumnName("buy_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyDocnumber)
                    .HasColumnName("buy_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Endwarrantydate)
                    .HasColumnName("endwarrantydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.FaEnddate)
                    .HasColumnName("fa_enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FaEndreason).HasColumnName("fa_endreason");

                entity.Property(e => e.Fabuydate)
                    .HasColumnName("fabuydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Faclassif1)
                    .IsRequired()
                    .HasColumnName("faclassif1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Faclassif2)
                    .HasColumnName("faclassif2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Faclassif3)
                    .HasColumnName("faclassif3")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Facomments)
                    .HasColumnName("facomments")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Facost)
                    .HasColumnName("facost")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.FacostAdded)
                    .HasColumnName("facost_added")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Falastupdate)
                    .HasColumnName("falastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Falife)
                    .HasColumnName("falife")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Faname)
                    .IsRequired()
                    .HasColumnName("faname")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Fanowvalue)
                    .HasColumnName("fanowvalue")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Fasno)
                    .HasColumnName("fasno")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fastatus)
                    .HasColumnName("fastatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fasuppcode)
                    .IsRequired()
                    .HasColumnName("fasuppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fayearlydepp)
                    .HasColumnName("fayearlydepp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Holdercode)
                    .IsRequired()
                    .HasColumnName("holdercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Locationcode)
                    .IsRequired()
                    .HasColumnName("locationcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellBranchcode)
                    .HasColumnName("sell_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SellDocnumber)
                    .HasColumnName("sell_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SellFacost)
                    .HasColumnName("sell_facost")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.SellFanowvalue)
                    .HasColumnName("sell_fanowvalue")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaFixedassetsComment>(entity =>
            {
                entity.HasKey(e => e.Facode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("fa_fixedassets_comment");

                entity.Property(e => e.Facode)
                    .HasColumnName("facode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Facomment)
                    .HasColumnName("facomment")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<FaFixedassetsDate>(entity =>
            {
                entity.HasKey(e => new { e.Refdate, e.Facode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("fa_fixedassets_date");

                entity.Property(e => e.Refdate)
                    .HasColumnName("refdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Facode).HasColumnName("facode");

                entity.Property(e => e.Facost)
                    .HasColumnName("facost")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.FacostAdded)
                    .HasColumnName("facost_added")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Fanowvalue)
                    .HasColumnName("fanowvalue")
                    .HasColumnType("decimal(14, 2)");
            });

            modelBuilder.Entity<FaFixedassetsitems>(entity =>
            {
                entity.HasKey(e => new { e.BuyBranchcode, e.BuyDocnumber, e.Bsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("fa_fixedassetsitems");

                entity.Property(e => e.BuyBranchcode)
                    .HasColumnName("buy_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BuyDocnumber)
                    .HasColumnName("buy_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Bsno).HasColumnName("bsno");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaFixedassetsm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber });

                entity.ToTable("fa_fixedassetsm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber2)
                    .HasColumnName("docnumber2")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Docvalue2)
                    .HasColumnName("docvalue2")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Docvalue3)
                    .HasColumnName("docvalue3")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Docvaluepay)
                    .HasColumnName("docvaluepay")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Docvaluereal)
                    .HasColumnName("docvaluereal")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Docwritedate)
                    .HasColumnName("docwritedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FaComments)
                    .HasColumnName("fa_comments")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fasuppcode)
                    .IsRequired()
                    .HasColumnName("fasuppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fatcurrentstatus)
                    .IsRequired()
                    .HasColumnName("fatcurrentstatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Openassets).HasColumnName("openassets");

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Salestaxp)
                    .HasColumnName("salestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaFixedassetsTrans>(entity =>
            {
                entity.HasKey(e => new { e.Facode, e.TransTime });

                entity.ToTable("fa_fixedassets_trans");

                entity.Property(e => e.Facode).HasColumnName("facode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Endwarrantydate)
                    .HasColumnName("endwarrantydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.FaEnddate)
                    .HasColumnName("fa_enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FaEndreason).HasColumnName("fa_endreason");

                entity.Property(e => e.Facomments)
                    .HasColumnName("facomments")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Faname)
                    .IsRequired()
                    .HasColumnName("faname")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Fasno)
                    .HasColumnName("fasno")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fastatus)
                    .IsRequired()
                    .HasColumnName("fastatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Holdercode)
                    .IsRequired()
                    .HasColumnName("holdercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Locationcode)
                    .IsRequired()
                    .HasColumnName("locationcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OrigBranchcode)
                    .IsRequired()
                    .HasColumnName("orig_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaLocations>(entity =>
            {
                entity.HasKey(e => e.Locationcode);

                entity.ToTable("fa_locations");

                entity.Property(e => e.Locationcode)
                    .HasColumnName("locationcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Locationdescr)
                    .IsRequired()
                    .HasColumnName("locationdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaMonthlydep>(entity =>
            {
                entity.HasKey(e => new { e.Yearno, e.Monthno, e.Facode });

                entity.ToTable("fa_monthlydep");

                entity.Property(e => e.Yearno).HasColumnName("yearno");

                entity.Property(e => e.Monthno).HasColumnName("monthno");

                entity.Property(e => e.Facode).HasColumnName("facode");

                entity.Property(e => e.Monthdepvalue)
                    .HasColumnName("monthdepvalue")
                    .HasColumnType("decimal(14, 2)");
            });

            modelBuilder.Entity<Fatorastatus>(entity =>
            {
                entity.HasKey(e => e.Fatstatuscode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("fatorastatus");

                entity.Property(e => e.Fatstatuscode)
                    .HasColumnName("fatstatuscode")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Fatstatusdescr)
                    .IsRequired()
                    .HasColumnName("fatstatusdescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FaYearlydep>(entity =>
            {
                entity.HasKey(e => new { e.Facode, e.Fayear });

                entity.ToTable("fa_yearlydep");

                entity.Property(e => e.Facode).HasColumnName("facode");

                entity.Property(e => e.Fayear).HasColumnName("fayear");

                entity.Property(e => e.Fadepvalue)
                    .HasColumnName("fadepvalue")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Fadepvaluedone)
                    .HasColumnName("fadepvaluedone")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Fatotdep)
                    .HasColumnName("fatotdep")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Fatotvalue)
                    .HasColumnName("fatotvalue")
                    .HasColumnType("decimal(14, 2)");

                entity.Property(e => e.Fayearaddvalue)
                    .HasColumnName("fayearaddvalue")
                    .HasColumnType("decimal(14, 2)");
            });

            modelBuilder.Entity<Financialdocs>(entity =>
            {
                entity.HasKey(e => e.Financialdoccode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("financialdocs");

                entity.Property(e => e.Financialdoccode)
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Financialdocname)
                    .IsRequired()
                    .HasColumnName("financialdocname")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hciclaimforms>(entity =>
            {
                entity.HasKey(e => e.Receivesno);

                entity.ToTable("hciclaimforms");

                entity.Property(e => e.Receivesno)
                    .HasColumnName("receivesno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Claimcomment)
                    .HasColumnName("claimcomment")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Claimdel).HasColumnName("claimdel");

                entity.Property(e => e.Claimsno1).HasColumnName("claimsno1");

                entity.Property(e => e.Claimsno2).HasColumnName("claimsno2");

                entity.Property(e => e.Noofforms).HasColumnName("noofforms");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Receivedate)
                    .HasColumnName("receivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receivedby)
                    .IsRequired()
                    .HasColumnName("receivedby")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hcitrans>(entity =>
            {
                entity.HasKey(e => new { e.Softechprovidercode, e.Softechcustcode, e.Phcode, e.Transdatetime, e.Testtype, e.Pitemtestcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("hcitrans");

                entity.Property(e => e.Softechprovidercode)
                    .HasColumnName("softechprovidercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Softechcustcode)
                    .HasColumnName("softechcustcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Transdatetime)
                    .HasColumnName("transdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.Pitemtestcode)
                    .HasColumnName("pitemtestcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Appreason).HasColumnName("appreason");

                entity.Property(e => e.Approvaldatetime)
                    .HasColumnName("approvaldatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Approvalqty)
                    .HasColumnName("approvalqty")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Approvalsno).HasColumnName("approvalsno");

                entity.Property(e => e.Approvaltype).HasColumnName("approvaltype");

                entity.Property(e => e.Approvalusercode)
                    .IsRequired()
                    .HasColumnName("approvalusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Apptotalrequired)
                    .HasColumnName("apptotalrequired")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Capprovaldate)
                    .HasColumnName("capprovaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Capprovalfdate)
                    .HasColumnName("capprovalfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Citemtestcode)
                    .IsRequired()
                    .HasColumnName("citemtestcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Citemtestdescr)
                    .IsRequired()
                    .HasColumnName("citemtestdescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Citemunitprice)
                    .HasColumnName("citemunitprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Claimsno).HasColumnName("claimsno");

                entity.Property(e => e.Cptpaypercent)
                    .HasColumnName("cptpaypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cpttotaldue)
                    .HasColumnName("cpttotaldue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Ctotalrequired)
                    .HasColumnName("ctotalrequired")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Isrefund).HasColumnName("isrefund");

                entity.Property(e => e.Itemdays).HasColumnName("itemdays");

                entity.Property(e => e.Itemdose).HasColumnName("itemdose");

                entity.Property(e => e.Itemfreq).HasColumnName("itemfreq");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemunitprice)
                    .HasColumnName("itemunitprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Pitemtestdescr)
                    .IsRequired()
                    .HasColumnName("pitemtestdescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ppttotaldue)
                    .HasColumnName("ppttotaldue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Ptotalrequired)
                    .HasColumnName("ptotalrequired")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Ptpaypercent)
                    .HasColumnName("ptpaypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Softechproviderbranch)
                    .IsRequired()
                    .HasColumnName("softechproviderbranch")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Spdnappreason)
                    .HasColumnName("spdnappreason")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Spdndate)
                    .HasColumnName("spdndate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Spdnno).HasColumnName("spdnno");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testincontract).HasColumnName("testincontract");

                entity.Property(e => e.Transblock).HasColumnName("transblock");

                entity.Property(e => e.Transblocktime)
                    .HasColumnName("transblocktime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transblockusercode)
                    .HasColumnName("transblockusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hcitrans2>(entity =>
            {
                entity.HasKey(e => new { e.Softechprovidercode, e.Softechcustcode, e.Phcode, e.Transdatetime, e.Testtype, e.Pitemtestcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("hcitrans2");

                entity.Property(e => e.Softechprovidercode)
                    .HasColumnName("softechprovidercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Softechcustcode)
                    .HasColumnName("softechcustcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Transdatetime)
                    .HasColumnName("transdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.Pitemtestcode)
                    .HasColumnName("pitemtestcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Appreason).HasColumnName("appreason");

                entity.Property(e => e.Approvaldatetime)
                    .HasColumnName("approvaldatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Approvalqty)
                    .HasColumnName("approvalqty")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Approvalsno).HasColumnName("approvalsno");

                entity.Property(e => e.Approvaltype).HasColumnName("approvaltype");

                entity.Property(e => e.Approvalusercode)
                    .IsRequired()
                    .HasColumnName("approvalusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Apptotalrequired)
                    .HasColumnName("apptotalrequired")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Capprovaldate)
                    .HasColumnName("capprovaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Capprovalfdate)
                    .HasColumnName("capprovalfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Citemtestcode)
                    .IsRequired()
                    .HasColumnName("citemtestcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Citemtestdescr)
                    .IsRequired()
                    .HasColumnName("citemtestdescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Citemunitprice)
                    .HasColumnName("citemunitprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Claimsno).HasColumnName("claimsno");

                entity.Property(e => e.Cptpaypercent)
                    .HasColumnName("cptpaypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cpttotaldue)
                    .HasColumnName("cpttotaldue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Ctotalrequired)
                    .HasColumnName("ctotalrequired")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Isrefund).HasColumnName("isrefund");

                entity.Property(e => e.Itemdays).HasColumnName("itemdays");

                entity.Property(e => e.Itemdose).HasColumnName("itemdose");

                entity.Property(e => e.Itemfreq).HasColumnName("itemfreq");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemunitprice)
                    .HasColumnName("itemunitprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Pitemtestdescr)
                    .IsRequired()
                    .HasColumnName("pitemtestdescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ppttotaldue)
                    .HasColumnName("ppttotaldue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Ptotalrequired)
                    .HasColumnName("ptotalrequired")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Ptpaypercent)
                    .HasColumnName("ptpaypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Softechproviderbranch)
                    .IsRequired()
                    .HasColumnName("softechproviderbranch")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Spdnappreason)
                    .HasColumnName("spdnappreason")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Spdndate)
                    .HasColumnName("spdndate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Spdnno).HasColumnName("spdnno");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testincontract).HasColumnName("testincontract");

                entity.Property(e => e.Transblock).HasColumnName("transblock");

                entity.Property(e => e.Transblocktime)
                    .HasColumnName("transblocktime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transblockusercode)
                    .HasColumnName("transblockusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HistoryStore>(entity =>
            {
                entity.HasKey(e => new { e.TableName, e.PkDateDest })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("history_store");

                entity.Property(e => e.TableName)
                    .HasColumnName("table_name")
                    .HasMaxLength(50);

                entity.Property(e => e.PkDateDest)
                    .HasColumnName("pk_date_dest")
                    .HasMaxLength(400);

                entity.Property(e => e.PkDateSrc)
                    .IsRequired()
                    .HasColumnName("pk_date_src")
                    .HasMaxLength(400);

                entity.Property(e => e.RecordState).HasColumnName("record_state");

                entity.Property(e => e.Timemark)
                    .HasColumnName("timemark")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<HiTypes>(entity =>
            {
                entity.HasKey(e => e.HiTypecode);

                entity.ToTable("hi_types");

                entity.Property(e => e.HiTypecode)
                    .HasColumnName("hi_typecode")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.HiMaxitems).HasColumnName("hi_maxitems");

                entity.Property(e => e.HiTypedescr)
                    .IsRequired()
                    .HasColumnName("hi_typedescr")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Holidays>(entity =>
            {
                entity.HasKey(e => e.Startdate);

                entity.ToTable("holidays");

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Descr)
                    .HasColumnName("descr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Hrooms>(entity =>
            {
                entity.HasKey(e => e.Hroom)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("hrooms");

                entity.Property(e => e.Hroom)
                    .HasColumnName("hroom")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Hfloor).HasColumnName("hfloor");

                entity.Property(e => e.HroomExists)
                    .HasColumnName("hroom_exists")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Hroomno).HasColumnName("hroomno");

                entity.Property(e => e.Hroomstatus).HasColumnName("hroomstatus");

                entity.Property(e => e.Meddept)
                    .HasColumnName("meddept")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Noofbeds).HasColumnName("noofbeds");

                entity.Property(e => e.Noofbedsocc).HasColumnName("noofbedsocc");

                entity.Property(e => e.RoomIcu)
                    .HasColumnName("room_icu")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RoomOperations)
                    .HasColumnName("room_operations")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Testcode1).HasColumnName("testcode1");

                entity.Property(e => e.Testcode2).HasColumnName("testcode2");
            });

            modelBuilder.Entity<Hroomsbeds>(entity =>
            {
                entity.HasKey(e => new { e.Hroom, e.Hroombed })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("hroomsbeds");

                entity.Property(e => e.Hroom)
                    .HasColumnName("hroom")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hroombed)
                    .HasColumnName("hroombed")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Bedcompanion).HasColumnName("bedcompanion");

                entity.Property(e => e.Bedempty).HasColumnName("bedempty");

                entity.Property(e => e.Bedpatient).HasColumnName("bedpatient");

                entity.Property(e => e.Hroombedstatus).HasColumnName("hroombedstatus");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hroomstatuses>(entity =>
            {
                entity.HasKey(e => e.Hroomstatus)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("hroomstatuses");

                entity.Property(e => e.Hroomstatus)
                    .HasColumnName("hroomstatus")
                    .ValueGeneratedNever();

                entity.Property(e => e.Hroomstatusdescr)
                    .IsRequired()
                    .HasColumnName("hroomstatusdescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hservices>(entity =>
            {
                entity.HasKey(e => e.Hservicecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("hservices");

                entity.Property(e => e.Hservicecode)
                    .HasColumnName("hservicecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Hservicename)
                    .IsRequired()
                    .HasColumnName("hservicename")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Hserviceorder).HasColumnName("hserviceorder");
            });

            modelBuilder.Entity<IcuFluidbalance>(entity =>
            {
                entity.HasKey(e => new { e.Pic, e.Transdate, e.Transtime, e.Fluidcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_fluidbalance");

                entity.Property(e => e.Pic)
                    .HasColumnName("pic")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtime)
                    .HasColumnName("transtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fluidcode).HasColumnName("fluidcode");

                entity.Property(e => e.Fluidqty).HasColumnName("fluidqty");
            });

            modelBuilder.Entity<IcuFluids>(entity =>
            {
                entity.HasKey(e => e.Fluidcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_fluids");

                entity.Property(e => e.Fluidcode)
                    .HasColumnName("fluidcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Fluiddescr)
                    .HasColumnName("fluiddescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fluidname)
                    .IsRequired()
                    .HasColumnName("fluidname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fluidtype)
                    .IsRequired()
                    .HasColumnName("fluidtype")
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcuForm1ProblemList>(entity =>
            {
                entity.HasKey(e => new { e.Pic, e.Transdate, e.Sno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_form1_problem_list");

                entity.Property(e => e.Pic)
                    .HasColumnName("pic")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sno).HasColumnName("sno");

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Consultantcode).HasColumnName("consultantcode");

                entity.Property(e => e.ProblemEndDate)
                    .HasColumnName("problem_end_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProblemEndTime)
                    .HasColumnName("problem_end_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProblemStartDate)
                    .HasColumnName("problem_start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProblemStartTime)
                    .HasColumnName("problem_start_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Problemcode).HasColumnName("problemcode");

                entity.Property(e => e.Problemdescr)
                    .HasColumnName("problemdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcuMedications>(entity =>
            {
                entity.HasKey(e => e.Medicatecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_medications");

                entity.Property(e => e.Medicatecode)
                    .HasColumnName("medicatecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Medicatename)
                    .IsRequired()
                    .HasColumnName("medicatename")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcuNursesnotes>(entity =>
            {
                entity.HasKey(e => new { e.Pic, e.Transdate, e.Transtime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_nursesnotes");

                entity.Property(e => e.Pic)
                    .HasColumnName("pic")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtime)
                    .HasColumnName("transtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnName("notes")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Signature)
                    .IsRequired()
                    .HasColumnName("signature")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcuNursingmedicationshee>(entity =>
            {
                entity.HasKey(e => new { e.Pic, e.Transdate, e.Transtime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_nursingmedicationshee");

                entity.Property(e => e.Pic)
                    .HasColumnName("pic")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtime)
                    .HasColumnName("transtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dose).HasColumnName("dose");

                entity.Property(e => e.Medicatecode).HasColumnName("medicatecode");

                entity.Property(e => e.Observation)
                    .HasColumnName("observation")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Routecode).HasColumnName("routecode");

                entity.Property(e => e.Signature)
                    .IsRequired()
                    .HasColumnName("signature")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcuProblems>(entity =>
            {
                entity.HasKey(e => e.Problemcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_problems");

                entity.Property(e => e.Problemcode)
                    .HasColumnName("problemcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Problemname)
                    .IsRequired()
                    .HasColumnName("problemname")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcuRoutes>(entity =>
            {
                entity.HasKey(e => e.Routecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_routes");

                entity.Property(e => e.Routecode)
                    .HasColumnName("routecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Routename)
                    .IsRequired()
                    .HasColumnName("routename")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcuVitalsigns>(entity =>
            {
                entity.HasKey(e => new { e.Pic, e.Transdate, e.Transtime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("icu_vitalsigns");

                entity.Property(e => e.Pic)
                    .HasColumnName("pic")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transtime)
                    .HasColumnName("transtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bed)
                    .HasColumnName("bed")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Bldpresshigh).HasColumnName("bldpresshigh");

                entity.Property(e => e.Bldpresslow).HasColumnName("bldpresslow");

                entity.Property(e => e.Consultantcode).HasColumnName("consultantcode");

                entity.Property(e => e.Cvp)
                    .HasColumnName("cvp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cvptype).HasColumnName("cvptype");

                entity.Property(e => e.Heartrate).HasColumnName("heartrate");

                entity.Property(e => e.Resprate).HasColumnName("resprate");

                entity.Property(e => e.Tempr)
                    .HasColumnName("tempr")
                    .HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<Imports>(entity =>
            {
                entity.HasKey(e => new { e.Importsno, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("imports");

                entity.Property(e => e.Importsno).HasColumnName("importsno");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.ImportClosed).HasColumnName("import_closed");

                entity.Property(e => e.Itemcargo)
                    .HasColumnName("itemcargo")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ItemcargoPoints)
                    .HasColumnName("itemcargo_points")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Itemcostmm)
                    .HasColumnName("itemcostmm")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Itemcostreal)
                    .HasColumnName("itemcostreal")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Itemcredit)
                    .HasColumnName("itemcredit")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemcustoms)
                    .HasColumnName("itemcustoms")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Itemcustomsp)
                    .HasColumnName("itemcustomsp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Iteminsurance)
                    .HasColumnName("iteminsurance")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemothers1)
                    .HasColumnName("itemothers1")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemothers2)
                    .HasColumnName("itemothers2")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Itemqtyreal)
                    .HasColumnName("itemqtyreal")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Itemtakhlis1)
                    .HasColumnName("itemtakhlis1")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemtakhlis2)
                    .HasColumnName("itemtakhlis2")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemtotcost)
                    .HasColumnName("itemtotcost")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Itemtransport)
                    .HasColumnName("itemtransport")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Itemunitcost)
                    .HasColumnName("itemunitcost")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Itemunitsalestax)
                    .HasColumnName("itemunitsalestax")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Unitcode)
                    .IsRequired()
                    .HasColumnName("unitcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Importsm>(entity =>
            {
                entity.HasKey(e => e.Importsno);

                entity.ToTable("importsm");

                entity.Property(e => e.Importsno)
                    .HasColumnName("importsno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.ImportClosed).HasColumnName("import_closed");

                entity.Property(e => e.Importcomments)
                    .HasColumnName("importcomments")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Importdescr)
                    .IsRequired()
                    .HasColumnName("importdescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Importopendate)
                    .HasColumnName("importopendate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ImporttotCargo)
                    .HasColumnName("importtot_cargo")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotCredit)
                    .HasColumnName("importtot_credit")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotInsurance)
                    .HasColumnName("importtot_insurance")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotOthers1)
                    .HasColumnName("importtot_others1")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotOthers2)
                    .HasColumnName("importtot_others2")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotTakhlis1)
                    .HasColumnName("importtot_takhlis1")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotTakhlis2)
                    .HasColumnName("importtot_takhlis2")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotTransport)
                    .HasColumnName("importtot_transport")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotValue)
                    .HasColumnName("importtot_value")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Orderno)
                    .HasColumnName("orderno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Suppcode)
                    .IsRequired()
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Intervals>(entity =>
            {
                entity.HasKey(e => e.Intervalcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("intervals");

                entity.Property(e => e.Intervalcode)
                    .HasColumnName("intervalcode")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Intervalname)
                    .IsRequired()
                    .HasColumnName("intervalname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Invoices>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Invoiceserialno });

                entity.ToTable("invoices");

                entity.HasIndex(e => e.Invoiceserialno)
                    .HasName("invoices_ndx3");

                entity.HasIndex(e => e.Patientdeleted)
                    .HasName("invoices_ndx4");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("invoices_dump");

                entity.HasIndex(e => new { e.Branchcode, e.Patientcode })
                    .HasName("invoices_ndx2");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Invoiceserialno).HasColumnName("invoiceserialno");

                entity.Property(e => e.Invoicedate)
                    .HasColumnName("invoicedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Invoicedisc)
                    .HasColumnName("invoicedisc")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Invoicevalue)
                    .HasColumnName("invoicevalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Noofprints).HasColumnName("noofprints");

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Patientdeleted).HasColumnName("patientdeleted");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Picip).HasColumnName("picip");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ipinvclasses>(entity =>
            {
                entity.HasKey(e => new { e.Ipclasscode, e.Ipsubclasscode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("ipinvclasses");

                entity.Property(e => e.Ipclasscode)
                    .HasColumnName("ipclasscode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ipsubclasscode)
                    .HasColumnName("ipsubclasscode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ipsubclassename)
                    .IsRequired()
                    .HasColumnName("ipsubclassename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ipsubclassname)
                    .IsRequired()
                    .HasColumnName("ipsubclassname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itembarcode>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Itembarcode1 })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itembarcode");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itembarcode1)
                    .HasColumnName("itembarcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Blockbarcode)
                    .HasColumnName("blockbarcode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DeltransTime)
                    .HasColumnName("deltrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Delusercode)
                    .HasColumnName("delusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Mainbarcode)
                    .HasColumnName("mainbarcode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Items>(entity =>
            {
                entity.HasKey(e => e.Itemcode);

                entity.ToTable("items");

                entity.HasIndex(e => e.Fmi)
                    .HasName("items_ndx3");

                entity.HasIndex(e => e.Itemarchive)
                    .HasName("items_ndx92");

                entity.HasIndex(e => e.Itembarcode)
                    .HasName("items_ndx1");

                entity.HasIndex(e => e.Itemclassifcode)
                    .HasName("items_ndx4");

                entity.HasIndex(e => e.Itemname)
                    .HasName("items_ndx6");

                entity.HasIndex(e => e.Itemproducercode)
                    .HasName("items_ndx5");

                entity.HasIndex(e => e.Itemrefcode)
                    .HasName("items_ndx11");

                entity.HasIndex(e => e.Itemsaleprice)
                    .HasName("items_ndx8");

                entity.HasIndex(e => e.Itemslevel)
                    .HasName("items_ndx7");

                entity.HasIndex(e => new { e.Suppcode, e.Itemorigincode })
                    .HasName("items_ndx2");

                entity.HasIndex(e => new { e.Familycode, e.Itemcode, e.Itemname })
                    .HasName("GHFHF");

                entity.HasIndex(e => new { e.Itemcode, e.Suppcode, e.Itemname })
                    .HasName("items_ahm1");

                entity.HasIndex(e => new { e.Itemcode, e.Suppcode, e.Itemname, e.Itemsaleprice, e.ItemsalepriceExtrap })
                    .HasName("items_ahm2");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Familycode)
                    .IsRequired()
                    .HasColumnName("familycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Fmi)
                    .IsRequired()
                    .HasColumnName("fmi")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Fridgeitem)
                    .HasColumnName("fridgeitem")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Hasdifforigin)
                    .HasColumnName("hasdifforigin")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Hasdiffpacks)
                    .HasColumnName("hasdiffpacks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HiTypecode)
                    .IsRequired()
                    .HasColumnName("hi_typecode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemarchive).HasColumnName("itemarchive");

                entity.Property(e => e.Itembarcode)
                    .HasColumnName("itembarcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemclassifcode)
                    .HasColumnName("itemclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemcodeAlt1)
                    .HasColumnName("itemcode_alt1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemcodeAlt2)
                    .HasColumnName("itemcode_alt2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemcodeAlt3)
                    .HasColumnName("itemcode_alt3")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcomment)
                    .HasColumnName("itemcomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcostprice)
                    .HasColumnName("itemcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemeffectcode)
                    .HasColumnName("itemeffectcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemeffectcode2)
                    .HasColumnName("itemeffectcode2")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpcode).HasColumnName("itemexpcode");

                entity.Property(e => e.Itemexpiry)
                    .IsRequired()
                    .HasColumnName("itemexpiry")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemglobalcode)
                    .HasColumnName("itemglobalcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemlastupdate)
                    .HasColumnName("itemlastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemmanuf).HasColumnName("itemmanuf");

                entity.Property(e => e.Itemmedicine)
                    .IsRequired()
                    .HasColumnName("itemmedicine")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Itemmodified)
                    .HasColumnName("itemmodified")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemname)
                    .IsRequired()
                    .HasColumnName("itemname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemnameScientific)
                    .HasColumnName("itemname_scientific")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Itemnomoreuse)
                    .IsRequired()
                    .HasColumnName("itemnomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemnosaleclassif)
                    .HasColumnName("itemnosaleclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemonweb).HasColumnName("itemonweb");

                entity.Property(e => e.Itemorigincode)
                    .HasColumnName("itemorigincode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itempartno).HasColumnName("itempartno");

                entity.Property(e => e.Itemperformrate).HasColumnName("itemperformrate");

                entity.Property(e => e.Itempointsys).HasColumnName("itempointsys");

                entity.Property(e => e.Itemproducercode)
                    .HasColumnName("itemproducercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemrefcode)
                    .HasColumnName("itemrefcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Itemsaleprice2)
                    .HasColumnName("itemsaleprice2")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ItemsalepriceExtrap)
                    .HasColumnName("itemsaleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Itemsearchkey)
                    .HasColumnName("itemsearchkey")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Itemshapecode)
                    .HasColumnName("itemshapecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemslevel).HasColumnName("itemslevel");

                entity.Property(e => e.Itemsort).HasColumnName("itemsort");

                entity.Property(e => e.Itemstoreclassif)
                    .HasColumnName("itemstoreclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtrans)
                    .HasColumnName("itemtrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtrans1).HasColumnName("itemtrans1");

                entity.Property(e => e.Itemtrans2).HasColumnName("itemtrans2");

                entity.Property(e => e.Itemtrans3).HasColumnName("itemtrans3");

                entity.Property(e => e.ItemupdtMonthlyqty)
                    .HasColumnName("itemupdt_monthlyqty")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Posdiscp)
                    .HasColumnName("posdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PrintBarcode)
                    .HasColumnName("print_barcode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Suppcode)
                    .IsRequired()
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Suppitemcode)
                    .HasColumnName("suppitemcode")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Unitcode)
                    .IsRequired()
                    .HasColumnName("unitcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsaleprice)
                    .HasColumnName("unitsaleprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemsai>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Aicode });

                entity.ToTable("itemsai");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Aicode).HasColumnName("aicode");

                entity.Property(e => e.Aiblock)
                    .HasColumnName("aiblock")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemsChangefollow>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Modelcode });

                entity.ToTable("items_changefollow");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Modelcode)
                    .HasColumnName("modelcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Changevalue).HasColumnName("changevalue");

                entity.Property(e => e.Followtype).HasColumnName("followtype");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Itemsclassif>(entity =>
            {
                entity.HasKey(e => e.Itemsclassifcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemsclassif");

                entity.Property(e => e.Itemsclassifcode)
                    .HasColumnName("itemsclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Classifapply)
                    .HasColumnName("classifapply")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Classifnamearabic)
                    .HasColumnName("classifnamearabic")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsclassifname)
                    .IsRequired()
                    .HasColumnName("itemsclassifname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Itemscurrencycosts>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Suppcode });

                entity.ToTable("itemscurrencycosts");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Suppcode)
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Itemcurrcostprice)
                    .HasColumnName("itemcurrcostprice")
                    .HasColumnType("decimal(8, 2)");
            });

            modelBuilder.Entity<Itemseffect>(entity =>
            {
                entity.HasKey(e => e.Itemeffectcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemseffect");

                entity.Property(e => e.Itemeffectcode)
                    .HasColumnName("itemeffectcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Classifapply)
                    .HasColumnName("classifapply")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Effectnamearabic)
                    .HasColumnName("effectnamearabic")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Itemeffectname)
                    .IsRequired()
                    .HasColumnName("itemeffectname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Itemseffect1>(entity =>
            {
                entity.HasKey(e => new { e.Itemmedicine, e.Itemeffectcode });

                entity.ToTable("itemseffect_1");

                entity.Property(e => e.Itemmedicine)
                    .HasColumnName("itemmedicine")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemeffectcode)
                    .HasColumnName("itemeffectcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EffectLastupdate)
                    .HasColumnName("effect_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Isblocked).HasColumnName("isblocked");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemseffect2>(entity =>
            {
                entity.HasKey(e => new { e.Itemeffectcode, e.Itemeffectcode2 });

                entity.ToTable("itemseffect_2");

                entity.Property(e => e.Itemeffectcode)
                    .HasColumnName("itemeffectcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemeffectcode2)
                    .HasColumnName("itemeffectcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EffectLastupdate)
                    .HasColumnName("effect_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Isblocked).HasColumnName("isblocked");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemseffect21>(entity =>
            {
                entity.HasKey(e => e.Itemeffectcode2);

                entity.ToTable("itemseffect2");

                entity.Property(e => e.Itemeffectcode2)
                    .HasColumnName("itemeffectcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Classifapply)
                    .HasColumnName("classifapply")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Effectnamearabic2)
                    .HasColumnName("effectnamearabic2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Itemeffectname2)
                    .IsRequired()
                    .HasColumnName("itemeffectname2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Itemsfamily>(entity =>
            {
                entity.HasKey(e => e.Familycode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemsfamily");

                entity.Property(e => e.Familycode)
                    .HasColumnName("familycode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Classifapply)
                    .HasColumnName("classifapply")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Familyname)
                    .IsRequired()
                    .HasColumnName("familyname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Familynamearabic)
                    .HasColumnName("familynamearabic")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Itemshape>(entity =>
            {
                entity.HasKey(e => e.Itemshapecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemshape");

                entity.Property(e => e.Itemshapecode)
                    .HasColumnName("itemshapecode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Classifapply)
                    .HasColumnName("classifapply")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Itemshapename)
                    .IsRequired()
                    .HasColumnName("itemshapename")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Shapenamearabic)
                    .HasColumnName("shapenamearabic")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemsimages>(entity =>
            {
                entity.HasKey(e => e.Itemcode);

                entity.ToTable("itemsimages");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Itempicture)
                    .HasColumnName("itempicture")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Itemsimports>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Importsno, e.Importlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemsimports");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Importsno).HasColumnName("importsno");

                entity.Property(e => e.Importlineno).HasColumnName("importlineno");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.ImportBcfactor)
                    .HasColumnName("import_bcfactor")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.ImportItemtotcostlc)
                    .HasColumnName("import_itemtotcostlc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.ImportItemunitcostlc)
                    .HasColumnName("import_itemunitcostlc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemtotcostbc)
                    .HasColumnName("itemtotcostbc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Itemtotcostlc)
                    .HasColumnName("itemtotcostlc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Itemunitcostbc)
                    .HasColumnName("itemunitcostbc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Itemunitcostlc)
                    .HasColumnName("itemunitcostlc")
                    .HasColumnType("decimal(12, 4)");
            });

            modelBuilder.Entity<Itemsimportsm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Importsno });

                entity.ToTable("itemsimportsm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Importsno).HasColumnName("importsno");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Costcentercode)
                    .IsRequired()
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ImportBcfactor)
                    .HasColumnName("import_bcfactor")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Importcomments)
                    .HasColumnName("importcomments")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Importdescr)
                    .IsRequired()
                    .HasColumnName("importdescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Importopendate)
                    .HasColumnName("importopendate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ImporttotExpenses)
                    .HasColumnName("importtot_expenses")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotOrigintax)
                    .HasColumnName("importtot_origintax")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImporttotSalestax)
                    .HasColumnName("importtot_salestax")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Itemsreceivedate)
                    .HasColumnName("itemsreceivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderno)
                    .HasColumnName("orderno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppcode)
                    .IsRequired()
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Suppdocvaluebc)
                    .HasColumnName("suppdocvaluebc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Suppdocvaluelc)
                    .HasColumnName("suppdocvaluelc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemsManuf>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Itemcode2 });

                entity.ToTable("items_manuf");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode2)
                    .HasColumnName("itemcode2")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemunits)
                    .HasColumnName("itemunits")
                    .HasColumnType("decimal(9, 5)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemsorigin>(entity =>
            {
                entity.HasKey(e => e.Itemorigincode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemsorigin");

                entity.Property(e => e.Itemorigincode)
                    .HasColumnName("itemorigincode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Classifapply)
                    .HasColumnName("classifapply")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Importedorigin)
                    .HasColumnName("importedorigin")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemoriginname)
                    .IsRequired()
                    .HasColumnName("itemoriginname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Originnamearabic)
                    .HasColumnName("originnamearabic")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemspricestrans>(entity =>
            {
                entity.HasKey(e => e.Transdate);

                entity.ToTable("itemspricestrans");

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemname)
                    .HasColumnName("itemname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Itemorigincode)
                    .HasColumnName("itemorigincode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemsalepriceP)
                    .HasColumnName("itemsaleprice_p")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Suppcode)
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Transnote)
                    .HasColumnName("transnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemsproducers>(entity =>
            {
                entity.HasKey(e => e.Itemproducercode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemsproducers");

                entity.HasIndex(e => new { e.Itemproducercode, e.Itemproducername })
                    .HasName("itemsproducers_ndx1");

                entity.Property(e => e.Itemproducercode)
                    .HasColumnName("itemproducercode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Itemproducername)
                    .IsRequired()
                    .HasColumnName("itemproducername")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Itemproducertype).HasColumnName("itemproducertype");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personglobalcode)
                    .HasColumnName("personglobalcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemsReq>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Reqsno });

                entity.ToTable("items_req");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Reqsno).HasColumnName("reqsno");

                entity.Property(e => e.ClassifCode)
                    .IsRequired()
                    .HasColumnName("classif_code")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemmedicine)
                    .IsRequired()
                    .HasColumnName("itemmedicine")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Itemname)
                    .IsRequired()
                    .HasColumnName("itemname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Newitemcode)
                    .HasColumnName("newitemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Producername)
                    .IsRequired()
                    .HasColumnName("producername")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reqcomment)
                    .HasColumnName("reqcomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Reqstatus).HasColumnName("reqstatus");

                entity.Property(e => e.StatTransTime)
                    .HasColumnName("stat_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.StatUsercode)
                    .HasColumnName("stat_usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliername)
                    .IsRequired()
                    .HasColumnName("suppliername")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Unitcode)
                    .IsRequired()
                    .HasColumnName("unitcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemssno>(entity =>
            {
                entity.HasKey(e => e.Itemnew);

                entity.ToTable("itemssno");

                entity.Property(e => e.Itemnew)
                    .HasColumnName("itemnew")
                    .HasColumnType("numeric(6, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Itemold)
                    .IsRequired()
                    .HasColumnName("itemold")
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemssuppliers>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Suppcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemssuppliers");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Suppcode)
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Itemcostprice)
                    .HasColumnName("itemcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Itemsort).HasColumnName("itemsort");

                entity.Property(e => e.MainSupp)
                    .IsRequired()
                    .HasColumnName("main_supp")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Suppitemcode)
                    .HasColumnName("suppitemcode")
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemstext>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Itemtextlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemstext");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtextlineno).HasColumnName("itemtextlineno");

                entity.Property(e => e.Itemtext)
                    .HasColumnName("itemtext")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Linebold).HasColumnName("linebold");

                entity.Property(e => e.Linestrikeout).HasColumnName("linestrikeout");

                entity.Property(e => e.Lineunderline).HasColumnName("lineunderline");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemstitles>(entity =>
            {
                entity.HasKey(e => e.Ititlecode);

                entity.ToTable("itemstitles");

                entity.Property(e => e.Ititlecode)
                    .HasColumnName("ititlecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ititledescr)
                    .IsRequired()
                    .HasColumnName("ititledescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemstoreclassif>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Storesclassif })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemstoreclassif");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Storesclassif)
                    .HasColumnName("storesclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Blockclassif).HasColumnName("blockclassif");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemstores>(entity =>
            {
                entity.HasKey(e => e.Itemstoreclassif);

                entity.ToTable("itemstores");

                entity.Property(e => e.Itemstoreclassif)
                    .HasColumnName("itemstoreclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Itemstoreclassifdescr)
                    .IsRequired()
                    .HasColumnName("itemstoreclassifdescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Itemstrans>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Transdate, e.Transsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemstrans");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transsno).HasColumnName("transsno");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Familycode)
                    .HasColumnName("familycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemarchive).HasColumnName("itemarchive");

                entity.Property(e => e.Itembarcode)
                    .HasColumnName("itembarcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemclassifcode)
                    .HasColumnName("itemclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemcodeAlt3)
                    .HasColumnName("itemcode_alt3")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcostprice)
                    .HasColumnName("itemcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemeffectcode)
                    .HasColumnName("itemeffectcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemeffectcode2)
                    .HasColumnName("itemeffectcode2")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpiry)
                    .HasColumnName("itemexpiry")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemmedicine)
                    .HasColumnName("itemmedicine")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Itemname)
                    .HasColumnName("itemname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Itemnew)
                    .HasColumnName("itemnew")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemnomoreuse)
                    .HasColumnName("itemnomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemnosaleclassif)
                    .HasColumnName("itemnosaleclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemonweb).HasColumnName("itemonweb");

                entity.Property(e => e.Itemorigincode)
                    .HasColumnName("itemorigincode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemperformrate).HasColumnName("itemperformrate");

                entity.Property(e => e.Itempointsys).HasColumnName("itempointsys");

                entity.Property(e => e.Itemproducercode)
                    .HasColumnName("itemproducercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Itemsaleprice2)
                    .HasColumnName("itemsaleprice2")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ItemsalepriceExtrap)
                    .HasColumnName("itemsaleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Itemshapecode)
                    .HasColumnName("itemshapecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemslevel).HasColumnName("itemslevel");

                entity.Property(e => e.Itemtrans)
                    .HasColumnName("itemtrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtrans1).HasColumnName("itemtrans1");

                entity.Property(e => e.Itemtrans2).HasColumnName("itemtrans2");

                entity.Property(e => e.Itemtrans3).HasColumnName("itemtrans3");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Pricechange).HasColumnName("pricechange");

                entity.Property(e => e.PrintBarcode)
                    .IsRequired()
                    .HasColumnName("print_barcode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Suppcode)
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Transnote)
                    .HasColumnName("transnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsaleprice)
                    .HasColumnName("unitsaleprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemstree>(entity =>
            {
                entity.HasKey(e => e.Cdcode);

                entity.ToTable("itemstree");

                entity.Property(e => e.Cdcode)
                    .HasColumnName("cdcode")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Cdlcode)
                    .IsRequired()
                    .HasColumnName("cdlcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cdldescr)
                    .IsRequired()
                    .HasColumnName("cdldescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cdldescrar)
                    .IsRequired()
                    .HasColumnName("cdldescrar")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cdlevel).HasColumnName("cdlevel");

                entity.Property(e => e.Cdpcode)
                    .IsRequired()
                    .HasColumnName("cdpcode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Isblocked).HasColumnName("isblocked");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Itemsunits>(entity =>
            {
                entity.HasKey(e => e.Unitcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemsunits");

                entity.Property(e => e.Unitcode)
                    .HasColumnName("unitcode")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Unitname)
                    .IsRequired()
                    .HasColumnName("unitname")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemsunitsWs>(entity =>
            {
                entity.HasKey(e => e.Unitcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("itemsunits_ws");

                entity.Property(e => e.Unitcode)
                    .HasColumnName("unitcode")
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sno)
                    .HasColumnName("sno")
                    .HasColumnType("numeric(6, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Unitname)
                    .IsRequired()
                    .HasColumnName("unitname")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemsWs>(entity =>
            {
                entity.HasKey(e => e.Itemcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("items_ws");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Familycode)
                    .IsRequired()
                    .HasColumnName("familycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Fmi)
                    .IsRequired()
                    .HasColumnName("fmi")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Fridgeitem)
                    .HasColumnName("fridgeitem")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Hasdifforigin)
                    .HasColumnName("hasdifforigin")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Hasdiffpacks)
                    .HasColumnName("hasdiffpacks")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HiTypecode)
                    .IsRequired()
                    .HasColumnName("hi_typecode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemarchive).HasColumnName("itemarchive");

                entity.Property(e => e.Itembarcode)
                    .HasColumnName("itembarcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemclassifcode)
                    .HasColumnName("itemclassifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemcodeAlt1)
                    .HasColumnName("itemcode_alt1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemcodeAlt2)
                    .HasColumnName("itemcode_alt2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemcodeAlt3)
                    .HasColumnName("itemcode_alt3")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcomment)
                    .HasColumnName("itemcomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcostprice)
                    .HasColumnName("itemcostprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Itemeffectcode)
                    .HasColumnName("itemeffectcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemeffectcode2)
                    .HasColumnName("itemeffectcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpcode).HasColumnName("itemexpcode");

                entity.Property(e => e.Itemexpiry)
                    .IsRequired()
                    .HasColumnName("itemexpiry")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemglobalcode)
                    .HasColumnName("itemglobalcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemlastupdate)
                    .HasColumnName("itemlastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemmanuf).HasColumnName("itemmanuf");

                entity.Property(e => e.Itemmedicine)
                    .HasColumnName("itemmedicine")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemmodified)
                    .HasColumnName("itemmodified")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemname)
                    .IsRequired()
                    .HasColumnName("itemname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemnameScientific)
                    .HasColumnName("itemname_scientific")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Itemnomoreuse)
                    .IsRequired()
                    .HasColumnName("itemnomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemnosaleclassif)
                    .HasColumnName("itemnosaleclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemonweb).HasColumnName("itemonweb");

                entity.Property(e => e.Itemorigincode)
                    .HasColumnName("itemorigincode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itempartno).HasColumnName("itempartno");

                entity.Property(e => e.Itemperformrate).HasColumnName("itemperformrate");

                entity.Property(e => e.Itempointsys).HasColumnName("itempointsys");

                entity.Property(e => e.Itemproducercode)
                    .HasColumnName("itemproducercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemrefcode)
                    .HasColumnName("itemrefcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Itemsaleprice2)
                    .HasColumnName("itemsaleprice2")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.ItemsalepriceExtrap)
                    .HasColumnName("itemsaleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Itemsearchkey)
                    .HasColumnName("itemsearchkey")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Itemshapecode)
                    .HasColumnName("itemshapecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemslevel).HasColumnName("itemslevel");

                entity.Property(e => e.Itemsort).HasColumnName("itemsort");

                entity.Property(e => e.Itemstoreclassif)
                    .HasColumnName("itemstoreclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtrans)
                    .HasColumnName("itemtrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtrans1).HasColumnName("itemtrans1");

                entity.Property(e => e.Itemtrans2).HasColumnName("itemtrans2");

                entity.Property(e => e.Itemtrans3).HasColumnName("itemtrans3");

                entity.Property(e => e.ItemupdtMonthlyqty)
                    .HasColumnName("itemupdt_monthlyqty")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Posdiscp)
                    .HasColumnName("posdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PrintBarcode)
                    .HasColumnName("print_barcode")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Suppcode)
                    .IsRequired()
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Suppitemcode)
                    .HasColumnName("suppitemcode")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Unitcode)
                    .IsRequired()
                    .HasColumnName("unitcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsaleprice)
                    .HasColumnName("unitsaleprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Jocomments>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Commentsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("jocomments");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("jocomments_dmp");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Commentsno).HasColumnName("commentsno");

                entity.Property(e => e.Ptcomments)
                    .IsRequired()
                    .HasColumnName("ptcomments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Labunits>(entity =>
            {
                entity.HasKey(e => e.Labunitcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("labunits");

                entity.Property(e => e.Labunitcode)
                    .HasColumnName("labunitcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Emetgency).HasColumnName("emetgency");

                entity.Property(e => e.Labunitftime)
                    .HasColumnName("labunitftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Labunitname)
                    .IsRequired()
                    .HasColumnName("labunitname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Labunitspan).HasColumnName("labunitspan");

                entity.Property(e => e.Labunitstime)
                    .HasColumnName("labunitstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mainunit).HasColumnName("mainunit");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performunit).HasColumnName("performunit");

                entity.Property(e => e.Reservunit).HasColumnName("reservunit");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.Unitsno).HasColumnName("unitsno");

                entity.Property(e => e.Unitsymbol)
                    .HasColumnName("unitsymbol")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Lastdocnumbers>(entity =>
            {
                entity.HasKey(e => e.Branchcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("lastdocnumbers");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Accsno)
                    .HasColumnName("accsno")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Accsno2)
                    .HasColumnName("accsno2")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Accsno3)
                    .HasColumnName("accsno3")
                    .HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Branchcustcode)
                    .HasColumnName("branchcustcode")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.FaFacode).HasColumnName("fa_facode");

                entity.Property(e => e.FaLastdocnumberin)
                    .HasColumnName("fa_lastdocnumberin")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.FaLastdocnumberout)
                    .HasColumnName("fa_lastdocnumberout")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberin)
                    .HasColumnName("lastdocnumberin")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinCust)
                    .HasColumnName("lastdocnumberin_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinSupp)
                    .HasColumnName("lastdocnumberin_supp")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberout)
                    .HasColumnName("lastdocnumberout")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutCust)
                    .HasColumnName("lastdocnumberout_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutInv)
                    .HasColumnName("lastdocnumberout_inv")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutSupp)
                    .HasColumnName("lastdocnumberout_supp")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastpatientcodeC).HasColumnName("lastpatientcode_c");

                entity.Property(e => e.LastpatientcodeL).HasColumnName("lastpatientcode_l");

                entity.Property(e => e.LastpatientcodeR).HasColumnName("lastpatientcode_r");

                entity.Property(e => e.LastpatientcodeS).HasColumnName("lastpatientcode_s");

                entity.Property(e => e.LocalpaymentSno).HasColumnName("localpayment_sno");

                entity.Property(e => e.Paymentsno)
                    .HasColumnName("paymentsno")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.VerBranch)
                    .IsRequired()
                    .HasColumnName("ver_branch")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LastdocnumbersDate>(entity =>
            {
                entity.HasKey(e => new { e.Refdate, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("lastdocnumbers_date");

                entity.Property(e => e.Refdate)
                    .HasColumnName("refdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustcode)
                    .HasColumnName("branchcustcode")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.FaFacode).HasColumnName("fa_facode");

                entity.Property(e => e.FaLastdocnumberin)
                    .HasColumnName("fa_lastdocnumberin")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.FaLastdocnumberout)
                    .HasColumnName("fa_lastdocnumberout")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberin)
                    .HasColumnName("lastdocnumberin")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinCust)
                    .HasColumnName("lastdocnumberin_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinSupp)
                    .HasColumnName("lastdocnumberin_supp")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberout)
                    .HasColumnName("lastdocnumberout")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutCust)
                    .HasColumnName("lastdocnumberout_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutInv)
                    .HasColumnName("lastdocnumberout_inv")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutSupp)
                    .HasColumnName("lastdocnumberout_supp")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LocalpaymentSno).HasColumnName("localpayment_sno");

                entity.Property(e => e.Paymentsno)
                    .HasColumnName("paymentsno")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.VerBranch)
                    .IsRequired()
                    .HasColumnName("ver_branch")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LastdocnumbersInv>(entity =>
            {
                entity.HasKey(e => e.Branchcode);

                entity.ToTable("lastdocnumbers_inv");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Lastdocnumberin)
                    .HasColumnName("lastdocnumberin")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinCust)
                    .HasColumnName("lastdocnumberin_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinSupp)
                    .HasColumnName("lastdocnumberin_supp")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberout)
                    .HasColumnName("lastdocnumberout")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutCust)
                    .HasColumnName("lastdocnumberout_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutSupp)
                    .HasColumnName("lastdocnumberout_supp")
                    .HasColumnType("decimal(10, 0)");
            });

            modelBuilder.Entity<Lastdocnumberstt>(entity =>
            {
                entity.HasKey(e => e.Branchcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("lastdocnumberstt");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcustcode)
                    .HasColumnName("branchcustcode")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberin)
                    .HasColumnName("lastdocnumberin")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinCust)
                    .HasColumnName("lastdocnumberin_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberinSupp)
                    .HasColumnName("lastdocnumberin_supp")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberout)
                    .HasColumnName("lastdocnumberout")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutCust)
                    .HasColumnName("lastdocnumberout_cust")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutInv)
                    .HasColumnName("lastdocnumberout_inv")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LastdocnumberoutSupp)
                    .HasColumnName("lastdocnumberout_supp")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.LocalpaymentSno).HasColumnName("localpayment_sno");

                entity.Property(e => e.Paymentsno)
                    .HasColumnName("paymentsno")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.VerBranch)
                    .IsRequired()
                    .HasColumnName("ver_branch")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Lastorderno>(entity =>
            {
                entity.HasKey(e => e.Branchcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("lastorderno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Crmorderno).HasColumnName("crmorderno");

                entity.Property(e => e.Custmaintno)
                    .HasColumnName("custmaintno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Custoffersno)
                    .HasColumnName("custoffersno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Emptaskno)
                    .HasColumnName("emptaskno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Hcisapp).HasColumnName("hcisapp");

                entity.Property(e => e.Receiveorderno).HasColumnName("receiveorderno");

                entity.Property(e => e.Serviceno).HasColumnName("serviceno");
            });

            modelBuilder.Entity<Lastordernott>(entity =>
            {
                entity.HasKey(e => e.Branchcode);

                entity.ToTable("lastordernott");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Emptaskno)
                    .HasColumnName("emptaskno")
                    .HasColumnType("decimal(10, 0)");
            });

            modelBuilder.Entity<Lcpointstrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcode, e.Transsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("lcpointstrans");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("lcpointstrans_dump");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Transsno).HasColumnName("transsno");

                entity.Property(e => e.Conpoints).HasColumnName("conpoints");

                entity.Property(e => e.Conpointsold).HasColumnName("conpointsold");

                entity.Property(e => e.Phcodestatus)
                    .IsRequired()
                    .HasColumnName("phcodestatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Totpoints).HasColumnName("totpoints");

                entity.Property(e => e.Totpointsold).HasColumnName("totpointsold");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Leaves>(entity =>
            {
                entity.HasKey(e => e.Leavetype)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("leaves");

                entity.Property(e => e.Leavetype)
                    .HasColumnName("leavetype")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Applydays).HasColumnName("applydays");

                entity.Property(e => e.Hasbal).HasColumnName("hasbal");

                entity.Property(e => e.Leavedescr)
                    .IsRequired()
                    .HasColumnName("leavedescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Noofdays)
                    .HasColumnName("noofdays")
                    .HasColumnType("numeric(4, 2)");

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomers>(entity =>
            {
                entity.HasKey(e => e.Phcode);

                entity.ToTable("localcustomers");

                entity.HasIndex(e => e.Branchcustcode)
                    .HasName("localcustomers_ndxw");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("localcustomers_dump");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Apartmentno)
                    .HasColumnName("apartmentno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustaddress1)
                    .HasColumnName("branchcustaddress1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustaddress2)
                    .HasColumnName("branchcustaddress2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustclassif)
                    .IsRequired()
                    .HasColumnName("branchcustclassif")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustcode)
                    .HasColumnName("branchcustcode")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Branchcustname)
                    .IsRequired()
                    .HasColumnName("branchcustname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcustphone)
                    .HasColumnName("branchcustphone")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custcredit)
                    .HasColumnName("custcredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Custdate)
                    .HasColumnName("custdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdateactive)
                    .HasColumnName("custdateactive")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdebit)
                    .HasColumnName("custdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Custdofbirth)
                    .HasColumnName("custdofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custorigmember)
                    .HasColumnName("custorigmember")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Custorigmemberid)
                    .HasColumnName("custorigmemberid")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Custpiccredit)
                    .HasColumnName("custpiccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Dsource).HasColumnName("dsource");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Floorno).HasColumnName("floorno");

                entity.Property(e => e.Hentry)
                    .HasColumnName("hentry")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Hentryway).HasColumnName("hentryway");

                entity.Property(e => e.Hentryway2).HasColumnName("hentryway2");

                entity.Property(e => e.Hentrywaymemo)
                    .HasColumnName("hentrywaymemo")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Homeno).HasColumnName("homeno");

                entity.Property(e => e.Hroom)
                    .HasColumnName("hroom")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ischronic).HasColumnName("ischronic");

                entity.Property(e => e.Iscritical).HasColumnName("iscritical");

                entity.Property(e => e.Jobtitle)
                    .HasColumnName("jobtitle")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.Meddept)
                    .HasColumnName("meddept")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Mobileno)
                    .HasColumnName("mobileno")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality).HasColumnName("nationality");

                entity.Property(e => e.Orderbranchcode)
                    .HasColumnName("orderbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Pcpcode)
                    .HasColumnName("pcpcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodestatus)
                    .HasColumnName("phcodestatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodestatustime)
                    .HasColumnName("phcodestatustime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phcodestatususercode)
                    .HasColumnName("phcodestatususercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Picbloodgroup).HasColumnName("picbloodgroup");

                entity.Property(e => e.Picclassif)
                    .HasColumnName("picclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Piccredit)
                    .HasColumnName("piccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Picdebit)
                    .HasColumnName("picdebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Picdied).HasColumnName("picdied");

                entity.Property(e => e.Picdiscounts).HasColumnName("picdiscounts");

                entity.Property(e => e.Picemployment)
                    .HasColumnName("picemployment")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Picfileno)
                    .HasColumnName("picfileno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Picgeneration)
                    .HasColumnName("picgeneration")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Picgiftlimit).HasColumnName("picgiftlimit");

                entity.Property(e => e.Picid)
                    .HasColumnName("picid")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Piciddate)
                    .HasColumnName("piciddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Picidtype).HasColumnName("picidtype");

                entity.Property(e => e.Picip).HasColumnName("picip");

                entity.Property(e => e.Piclock).HasColumnName("piclock");

                entity.Property(e => e.Piclockname)
                    .HasColumnName("piclockname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Picpoints).HasColumnName("picpoints");

                entity.Property(e => e.Picpurchase).HasColumnName("picpurchase");

                entity.Property(e => e.Picpurchasedate)
                    .HasColumnName("picpurchasedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Picresidence)
                    .HasColumnName("picresidence")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Picsource)
                    .HasColumnName("picsource")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pictype)
                    .HasColumnName("pictype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Picvip).HasColumnName("picvip");

                entity.Property(e => e.Planguage)
                    .HasColumnName("planguage")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Pmstat)
                    .HasColumnName("pmstat")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Poboxno)
                    .HasColumnName("poboxno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Pphcode)
                    .HasColumnName("pphcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Prelision)
                    .HasColumnName("prelision")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Psex)
                    .HasColumnName("psex")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptitle).HasColumnName("ptitle");

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Streetname1)
                    .HasColumnName("streetname1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Streetname2)
                    .HasColumnName("streetname2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Zipcode)
                    .HasColumnName("zipcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Zonename)
                    .HasColumnName("zonename")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomers2>(entity =>
            {
                entity.HasKey(e => e.Phcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomers2");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Mgmdate)
                    .HasColumnName("mgmdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sourcepic)
                    .HasColumnName("sourcepic")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Sourcepicpoints).HasColumnName("sourcepicpoints");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomersapp>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Sappsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomersapp");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Sappsno).HasColumnName("sappsno");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Itemtestcode)
                    .IsRequired()
                    .HasColumnName("itemtestcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtestdescr)
                    .IsRequired()
                    .HasColumnName("itemtestdescr")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtestprice)
                    .HasColumnName("itemtestprice")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sappblocked).HasColumnName("sappblocked");

                entity.Property(e => e.Sappcomments)
                    .HasColumnName("sappcomments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Sappdate)
                    .HasColumnName("sappdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomersdata>(entity =>
            {
                entity.HasKey(e => e.Phcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomersdata");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phcodecomment)
                    .IsRequired()
                    .HasColumnName("phcodecomment")
                    .HasColumnType("text");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomersdatesd>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcodedatesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomersdatesd");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("localcustomersdatesd_ndx5");

                entity.HasIndex(e => new { e.Ptcode, e.Phcode })
                    .HasName("localcustomersdatesd_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodedatesno).HasColumnName("phcodedatesno");

                entity.Property(e => e.Actassignedto)
                    .HasColumnName("actassignedto")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Actassignedtodate)
                    .HasColumnName("actassignedtodate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Actdirection).HasColumnName("actdirection");

                entity.Property(e => e.Activityhist).HasColumnName("activityhist");

                entity.Property(e => e.Activityhist2).HasColumnName("activityhist2");

                entity.Property(e => e.Activityhist2date)
                    .HasColumnName("activityhist2date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Activityhist2user)
                    .HasColumnName("activityhist2user")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Activityhistdate)
                    .HasColumnName("activityhistdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Activityhistuser)
                    .HasColumnName("activityhistuser")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Activitystatus).HasColumnName("activitystatus");

                entity.Property(e => e.Activitystatusreason)
                    .HasColumnName("activitystatusreason")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Activitystatustime)
                    .HasColumnName("activitystatustime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Activitystatususer)
                    .HasColumnName("activitystatususer")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Actsource).HasColumnName("actsource");

                entity.Property(e => e.Collectcharge)
                    .HasColumnName("collectcharge")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.CustRepres)
                    .HasColumnName("cust_repres")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranch)
                    .HasColumnName("custbranch")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Deptcode)
                    .HasColumnName("deptcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Execcharge)
                    .HasColumnName("execcharge")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Execcost)
                    .HasColumnName("execcost")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Execdur1).HasColumnName("execdur1");

                entity.Property(e => e.Execdur2).HasColumnName("execdur2");

                entity.Property(e => e.Execfdate)
                    .HasColumnName("execfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Execlabor)
                    .HasColumnName("execlabor")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Execsdate)
                    .HasColumnName("execsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Execssdate)
                    .HasColumnName("execssdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemfreq).HasColumnName("itemfreq");

                entity.Property(e => e.Itemqty).HasColumnName("itemqty");

                entity.Property(e => e.Itemroute).HasColumnName("itemroute");

                entity.Property(e => e.Itemtestcode)
                    .HasColumnName("itemtestcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtestdescr)
                    .HasColumnName("itemtestdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Itemunit)
                    .HasColumnName("itemunit")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Noofdays).HasColumnName("noofdays");

                entity.Property(e => e.Onweb).HasColumnName("onweb");

                entity.Property(e => e.Onwebdate)
                    .HasColumnName("onwebdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Onwebuser)
                    .HasColumnName("onwebuser")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .IsRequired()
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodecomment)
                    .HasColumnName("phcodecomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodedate)
                    .HasColumnName("phcodedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phcodetype)
                    .IsRequired()
                    .HasColumnName("phcodetype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phoneno)
                    .HasColumnName("phoneno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refphcodedatesno).HasColumnName("refphcodedatesno");

                entity.Property(e => e.Scheduledate)
                    .HasColumnName("scheduledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scheduledateuser)
                    .HasColumnName("scheduledateuser")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sorderclassif2).HasColumnName("sorderclassif2");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Workpriority).HasColumnName("workpriority");
            });

            modelBuilder.Entity<Localcustomersdatesdd>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcodedatesno, e.Detailsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomersdatesdd");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodedatesno).HasColumnName("phcodedatesno");

                entity.Property(e => e.Detailsno).HasColumnName("detailsno");

                entity.Property(e => e.Actcomments)
                    .HasColumnName("actcomments")
                    .HasColumnType("text");

                entity.Property(e => e.CanceltransTime)
                    .HasColumnName("canceltrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cancelusercode)
                    .HasColumnName("cancelusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Detailcancelled).HasColumnName("detailcancelled");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomersdatesddh>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcodedatesno, e.Detailsno, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomersdatesddh");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodedatesno).HasColumnName("phcodedatesno");

                entity.Property(e => e.Detailsno).HasColumnName("detailsno");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Actcomments1)
                    .HasColumnName("actcomments1")
                    .HasColumnType("text");

                entity.Property(e => e.Actcomments2)
                    .HasColumnName("actcomments2")
                    .HasColumnType("text");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomersdrugs>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Itemcode });

                entity.ToTable("localcustomersdrugs");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemblock).HasColumnName("itemblock");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomerspoints>(entity =>
            {
                entity.HasKey(e => e.Phcode);

                entity.ToTable("localcustomerspoints");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("localcustomerspoints_dump");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Conpoints).HasColumnName("conpoints");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Totpoints).HasColumnName("totpoints");
            });

            modelBuilder.Entity<Localcustomersrelatives>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Relativesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomersrelatives");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Relativesno).HasColumnName("relativesno");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Relativedobirth)
                    .HasColumnName("relativedobirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativename)
                    .HasColumnName("relativename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Localcustomersusersd>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcodedatesno, e.Actassignedto })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("localcustomersusersd");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodedatesno).HasColumnName("phcodedatesno");

                entity.Property(e => e.Actassignedto)
                    .HasColumnName("actassignedto")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodedate)
                    .HasColumnName("phcodedate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MachineResults>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Machinecode, e.Machinetestcode, e.Machinetranstime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("machine_results");

                entity.HasIndex(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Parametercode })
                    .HasName("machine_results_ndx10");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Machinecode)
                    .HasColumnName("machinecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Machinetestcode)
                    .HasColumnName("machinetestcode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Machinetranstime)
                    .HasColumnName("machinetranstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Machinesamplecode)
                    .HasColumnName("machinesamplecode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.Resultcomment)
                    .HasColumnName("resultcomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Resultnormal1)
                    .HasColumnName("resultnormal1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Resultnormal2)
                    .HasColumnName("resultnormal2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Resultstring)
                    .IsRequired()
                    .HasColumnName("resultstring")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Resulttype).HasColumnName("resulttype");

                entity.Property(e => e.Resultunit)
                    .HasColumnName("resultunit")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Resultvalue)
                    .HasColumnName("resultvalue")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Retstat)
                    .HasColumnName("retstat")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Samplecode).HasColumnName("samplecode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testrerun).HasColumnName("testrerun");

                entity.Property(e => e.VerBranchL1)
                    .HasColumnName("ver_branch_l1")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Machines>(entity =>
            {
                entity.HasKey(e => e.Machinecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("machines");

                entity.Property(e => e.Machinecode)
                    .HasColumnName("machinecode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MachineSymbol)
                    .IsRequired()
                    .HasColumnName("machine_symbol")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Machinedescr)
                    .HasColumnName("machinedescr")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Machinename)
                    .IsRequired()
                    .HasColumnName("machinename")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Machinesyscode).HasColumnName("machinesyscode");

                entity.Property(e => e.Mahineactive).HasColumnName("mahineactive");
            });

            modelBuilder.Entity<MachineSamples>(entity =>
            {
                entity.HasKey(e => new { e.Samplecode, e.Machinecode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("machine_samples");

                entity.Property(e => e.Samplecode).HasColumnName("samplecode");

                entity.Property(e => e.Machinecode)
                    .HasColumnName("machinecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MachineTestLocked).HasColumnName("machine_test_locked");

                entity.Property(e => e.Machinesamplecode)
                    .IsRequired()
                    .HasColumnName("machinesamplecode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MachineTests>(entity =>
            {
                entity.HasKey(e => new { e.Parametercode, e.Machinecode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("machine_tests");

                entity.HasIndex(e => new { e.Parametercode, e.Machinecode, e.Machineparamcode })
                    .HasName("machine_tests_ndx10")
                    .IsUnique();

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.Machinecode)
                    .HasColumnName("machinecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MachineTestLocked).HasColumnName("machine_test_locked");

                entity.Property(e => e.Machineparamcode)
                    .IsRequired()
                    .HasColumnName("machineparamcode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Machineparamcodeout)
                    .HasColumnName("machineparamcodeout")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Roundparamcodeout).HasColumnName("roundparamcodeout");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MainBranch30>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.TableDumped })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("main_branch30");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ttype).HasColumnName("ttype");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Maintforms>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Formno, e.Formsno, e.Formlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("maintforms");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Formno).HasColumnName("formno");

                entity.Property(e => e.Formsno).HasColumnName("formsno");

                entity.Property(e => e.Formlineno).HasColumnName("formlineno");

                entity.Property(e => e.Formclosed).HasColumnName("formclosed");

                entity.Property(e => e.FormclosedtransTime)
                    .HasColumnName("formclosedtrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Formclosedusercode)
                    .HasColumnName("formclosedusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Formrequest)
                    .IsRequired()
                    .HasColumnName("formrequest")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(8, 5)");

                entity.Property(e => e.ItemqtyDone)
                    .HasColumnName("itemqty_done")
                    .HasColumnType("decimal(8, 5)");

                entity.Property(e => e.Maintcomments)
                    .HasColumnName("maintcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Maintemp1)
                    .HasColumnName("maintemp1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maintemp2)
                    .HasColumnName("maintemp2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maintminutes).HasColumnName("maintminutes");

                entity.Property(e => e.Maintupgrade).HasColumnName("maintupgrade");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Outmaint).HasColumnName("outmaint");

                entity.Property(e => e.Outmaintagent).HasColumnName("outmaintagent");

                entity.Property(e => e.RefFormlineno).HasColumnName("ref_formlineno");

                entity.Property(e => e.RefFormno).HasColumnName("ref_formno");

                entity.Property(e => e.RefFormsno).HasColumnName("ref_formsno");

                entity.Property(e => e.RequestAccept).HasColumnName("request_accept");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Maintformsm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Formno, e.Formsno });

                entity.ToTable("maintformsm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Formno).HasColumnName("formno");

                entity.Property(e => e.Formsno).HasColumnName("formsno");

                entity.Property(e => e.Carkm).HasColumnName("carkm");

                entity.Property(e => e.Carno)
                    .IsRequired()
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Drivercode)
                    .IsRequired()
                    .HasColumnName("drivercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Formdate)
                    .HasColumnName("formdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Managercode)
                    .HasColumnName("managercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Noofprints).HasColumnName("noofprints");

                entity.Property(e => e.RefFormno).HasColumnName("ref_formno");

                entity.Property(e => e.RefFormsno).HasColumnName("ref_formsno");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Managerdiscount>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("managerdiscount");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.MaxCustdiscp)
                    .HasColumnName("max_custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.MdiscLastupdate)
                    .HasColumnName("mdisc_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Mglevels>(entity =>
            {
                entity.HasKey(e => new { e.Usergroup, e.Mitemname });

                entity.ToTable("mglevels");

                entity.HasIndex(e => new { e.Usergroup, e.Mitemname, e.Mitemenable, e.Mitemshow, e.Mitemsave, e.Mitemprint, e.Mitemretrieve })
                    .HasName("mglevels_ndx1");

                entity.Property(e => e.Usergroup).HasColumnName("usergroup");

                entity.Property(e => e.Mitemname)
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mitembrmb)
                    .IsRequired()
                    .HasColumnName("mitembrmb")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemcost)
                    .HasColumnName("mitemcost")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemdata)
                    .IsRequired()
                    .HasColumnName("mitemdata")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemdatain)
                    .HasColumnName("mitemdatain")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemenable).HasColumnName("mitemenable");

                entity.Property(e => e.Mitemmoney)
                    .HasColumnName("mitemmoney")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemprint)
                    .IsRequired()
                    .HasColumnName("mitemprint")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemretrieve)
                    .IsRequired()
                    .HasColumnName("mitemretrieve")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsave)
                    .IsRequired()
                    .HasColumnName("mitemsave")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemscan)
                    .IsRequired()
                    .HasColumnName("mitemscan")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemscanedit)
                    .IsRequired()
                    .HasColumnName("mitemscanedit")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemshortcut)
                    .IsRequired()
                    .HasColumnName("mitemshortcut")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemshow).HasColumnName("mitemshow");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mhcomp>(entity =>
            {
                entity.HasKey(e => e.Mhccode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("mhcomp");

                entity.Property(e => e.Mhccode)
                    .HasColumnName("mhccode")
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Mhcl1)
                    .IsRequired()
                    .HasColumnName("mhcl1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mhcl2)
                    .IsRequired()
                    .HasColumnName("mhcl2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Mhcl3)
                    .IsRequired()
                    .HasColumnName("mhcl3")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Mhcl4)
                    .IsRequired()
                    .HasColumnName("mhcl4")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Mhcl5)
                    .IsRequired()
                    .HasColumnName("mhcl5")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Mhcl6)
                    .IsRequired()
                    .HasColumnName("mhcl6")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Mhcname)
                    .IsRequired()
                    .HasColumnName("mhcname")
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mi3Patientdata>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode });

                entity.ToTable("mi3_patientdata");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Patientdobirth)
                    .HasColumnName("patientdobirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientname)
                    .IsRequired()
                    .HasColumnName("patientname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Patientsex)
                    .IsRequired()
                    .HasColumnName("patientsex")
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mi3Patienttests>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("mi3_patienttests");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testsampledate)
                    .HasColumnName("testsampledate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Mi3Trans>(entity =>
            {
                entity.HasKey(e => new { e.Sdate, e.Fdate });

                entity.ToTable("mi3_trans");

                entity.Property(e => e.Sdate)
                    .HasColumnName("sdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fdate)
                    .HasColumnName("fdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Mitems>(entity =>
            {
                entity.HasKey(e => e.Mitemname);

                entity.ToTable("mitems");

                entity.Property(e => e.Mitemname)
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Mitemallow)
                    .IsRequired()
                    .HasColumnName("mitemallow")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemdescr)
                    .IsRequired()
                    .HasColumnName("mitemdescr")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemedescr)
                    .IsRequired()
                    .HasColumnName("mitemedescr")
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemesubsys2)
                    .HasColumnName("mitemesubsys2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemflag1).HasColumnName("mitemflag1");

                entity.Property(e => e.Mitemflag2).HasColumnName("mitemflag2");

                entity.Property(e => e.Mitemorder).HasColumnName("mitemorder");

                entity.Property(e => e.Mitemsubsys)
                    .IsRequired()
                    .HasColumnName("mitemsubsys")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsubsys2)
                    .HasColumnName("mitemsubsys2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .IsRequired()
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mitemshist>(entity =>
            {
                entity.HasKey(e => e.Stranssno)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("mitemshist");

                entity.Property(e => e.Stranssno)
                    .HasColumnName("stranssno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Applydate)
                    .HasColumnName("applydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Entrydate)
                    .HasColumnName("entrydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mitemname)
                    .IsRequired()
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Transbold).HasColumnName("transbold");

                entity.Property(e => e.Transclassif).HasColumnName("transclassif");

                entity.Property(e => e.Transcolor).HasColumnName("transcolor");

                entity.Property(e => e.Transdescr)
                    .IsRequired()
                    .HasColumnName("transdescr")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Transedescr)
                    .IsRequired()
                    .HasColumnName("transedescr")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Transfont).HasColumnName("transfont");

                entity.Property(e => e.Translevel).HasColumnName("translevel");

                entity.Property(e => e.Transunderline).HasColumnName("transunderline");
            });

            modelBuilder.Entity<Mitemssys>(entity =>
            {
                entity.HasKey(e => e.Mitemsys);

                entity.ToTable("mitemssys");

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Mitemsys2)
                    .HasColumnName("mitemsys2")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsysallow).HasColumnName("mitemsysallow");

                entity.Property(e => e.Mitemsysdescr)
                    .IsRequired()
                    .HasColumnName("mitemsysdescr")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Modelspecs>(entity =>
            {
                entity.HasKey(e => e.Modelcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("modelspecs");

                entity.Property(e => e.Modelcode)
                    .HasColumnName("modelcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Abs).HasColumnName("abs");

                entity.Property(e => e.Ac)
                    .HasColumnName("ac")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Amplifier).HasColumnName("amplifier");

                entity.Property(e => e.Batterycode)
                    .HasColumnName("batterycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cassette).HasColumnName("cassette");

                entity.Property(e => e.Curtains).HasColumnName("curtains");

                entity.Property(e => e.Enginepower)
                    .HasColumnName("enginepower")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Enginetype)
                    .HasColumnName("enginetype")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fridgecapacity).HasColumnName("fridgecapacity");

                entity.Property(e => e.Fridgetype).HasColumnName("fridgetype");

                entity.Property(e => e.Fueltankmain).HasColumnName("fueltankmain");

                entity.Property(e => e.Fueltankspare).HasColumnName("fueltankspare");

                entity.Property(e => e.Gearboxtype)
                    .HasColumnName("gearboxtype")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Microphone).HasColumnName("microphone");

                entity.Property(e => e.Modelcountry)
                    .HasColumnName("modelcountry")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Modelyear).HasColumnName("modelyear");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Noofbatteries).HasColumnName("noofbatteries");

                entity.Property(e => e.Noofseats).HasColumnName("noofseats");

                entity.Property(e => e.Nooftires).HasColumnName("nooftires");

                entity.Property(e => e.Oiltankcapacity).HasColumnName("oiltankcapacity");

                entity.Property(e => e.Telema).HasColumnName("telema");

                entity.Property(e => e.Tirecode)
                    .HasColumnName("tirecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Toilet).HasColumnName("toilet");

                entity.Property(e => e.Turbo).HasColumnName("turbo");

                entity.Property(e => e.Tv).HasColumnName("tv");

                entity.Property(e => e.Vcr).HasColumnName("vcr");
            });

            modelBuilder.Entity<Monthes>(entity =>
            {
                entity.HasKey(e => e.Monthcode);

                entity.ToTable("monthes");

                entity.Property(e => e.Monthcode)
                    .HasColumnName("monthcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Monthname)
                    .IsRequired()
                    .HasColumnName("monthname")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Motalba>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Motalbano, e.Branchcode, e.Docnumber, e.MotalbaDocorder });

                entity.ToTable("motalba");

                entity.HasIndex(e => new { e.Personcode, e.Motalbano })
                    .HasName("trial");

                entity.HasIndex(e => new { e.Branchcode, e.Docnumber, e.Docdate })
                    .HasName("motalba_ndx2");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .HasName("motalba_ndx3");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Motalbano).HasColumnName("motalbano");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.MotalbaDocorder).HasColumnName("motalba_docorder");

                entity.Property(e => e.Branchcode2)
                    .HasColumnName("branchcode2")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocvalueGrandtotal)
                    .HasColumnName("docvalue_grandtotal")
                    .HasColumnType("numeric(10, 4)");

                entity.Property(e => e.Docvaluerequired)
                    .HasColumnName("docvaluerequired")
                    .HasColumnType("numeric(10, 4)");

                entity.Property(e => e.Invdel).HasColumnName("invdel");

                entity.Property(e => e.Motalbafdate)
                    .HasColumnName("motalbafdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Motalbasdate)
                    .HasColumnName("motalbasdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Ppersoncode)
                    .HasColumnName("ppersoncode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MotalbaClab>(entity =>
            {
                entity.HasKey(e => new { e.Motalbano, e.Custcode, e.Branchcode, e.Patientcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("motalba_clab");

                entity.HasIndex(e => new { e.Custcode, e.Motalbano })
                    .HasName("motalba_clab_trial1");

                entity.HasIndex(e => new { e.Custcode, e.Branchcode, e.Motalbasdate, e.Motalbafdate })
                    .HasName("motalba_clab_trial2");

                entity.Property(e => e.Motalbano).HasColumnName("motalbano");

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Branchcode2)
                    .HasColumnName("branchcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.DocvalueGrandtotal)
                    .HasColumnName("docvalue_grandtotal")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Docvaluerequired)
                    .HasColumnName("docvaluerequired")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.MotalbaDocorder).HasColumnName("motalba_docorder");

                entity.Property(e => e.Motalbafdate)
                    .HasColumnName("motalbafdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Motalbasdate)
                    .HasColumnName("motalbasdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientdate)
                    .HasColumnName("patientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MotalbaFields>(entity =>
            {
                entity.HasKey(e => e.Dw2Reportname);

                entity.ToTable("motalba_fields");

                entity.Property(e => e.Dw2Reportname)
                    .HasColumnName("dw2_reportname")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.F1).HasColumnName("f1");

                entity.Property(e => e.F10).HasColumnName("f10");

                entity.Property(e => e.F11).HasColumnName("f11");

                entity.Property(e => e.F12).HasColumnName("f12");

                entity.Property(e => e.F2).HasColumnName("f2");

                entity.Property(e => e.F3).HasColumnName("f3");

                entity.Property(e => e.F4).HasColumnName("f4");

                entity.Property(e => e.F5).HasColumnName("f5");

                entity.Property(e => e.F6).HasColumnName("f6");

                entity.Property(e => e.F7).HasColumnName("f7");

                entity.Property(e => e.F8).HasColumnName("f8");

                entity.Property(e => e.F9).HasColumnName("f9");

                entity.Property(e => e.FieldsLastupdate)
                    .HasColumnName("fields_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.T1)
                    .HasColumnName("t1")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T10)
                    .HasColumnName("t10")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T11)
                    .HasColumnName("t11")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T12)
                    .HasColumnName("t12")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T2)
                    .HasColumnName("t2")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T3)
                    .HasColumnName("t3")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T4)
                    .HasColumnName("t4")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T5)
                    .HasColumnName("t5")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T6)
                    .HasColumnName("t6")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T7)
                    .HasColumnName("t7")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T8)
                    .HasColumnName("t8")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.T9)
                    .HasColumnName("t9")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te1)
                    .HasColumnName("te1")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te10)
                    .HasColumnName("te10")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te11)
                    .HasColumnName("te11")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te12)
                    .HasColumnName("te12")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te2)
                    .HasColumnName("te2")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te3)
                    .HasColumnName("te3")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te4)
                    .HasColumnName("te4")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te5)
                    .HasColumnName("te5")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te6)
                    .HasColumnName("te6")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te7)
                    .HasColumnName("te7")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te8)
                    .HasColumnName("te8")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Te9)
                    .HasColumnName("te9")
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MotalbaForms>(entity =>
            {
                entity.HasKey(e => e.Dw2Reportname);

                entity.ToTable("motalba_forms");

                entity.Property(e => e.Dw2Reportname)
                    .HasColumnName("dw2_reportname")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Formcomments)
                    .IsRequired()
                    .HasColumnName("formcomments")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Formdescr)
                    .IsRequired()
                    .HasColumnName("formdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MotalbaFormsClab>(entity =>
            {
                entity.HasKey(e => e.Dw2Reportname);

                entity.ToTable("motalba_forms_clab");

                entity.Property(e => e.Dw2Reportname)
                    .HasColumnName("dw2_reportname")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Formdescr)
                    .IsRequired()
                    .HasColumnName("formdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Motalbas>(entity =>
            {
                entity.HasKey(e => e.Motalbano);

                entity.ToTable("motalbas");

                entity.Property(e => e.Motalbano)
                    .HasColumnName("motalbano")
                    .ValueGeneratedNever();

                entity.Property(e => e.Docvaluenet)
                    .HasColumnName("docvaluenet")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Docvaluetotal)
                    .HasColumnName("docvaluetotal")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Motalbacomment)
                    .HasColumnName("motalbacomment")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Motalbadate)
                    .HasColumnName("motalbadate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Motalbadel).HasColumnName("motalbadel");

                entity.Property(e => e.Motapproveby)
                    .HasColumnName("motapproveby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Motapprovedate)
                    .HasColumnName("motapprovedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Motfromdate)
                    .HasColumnName("motfromdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Motissuedate)
                    .HasColumnName("motissuedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Motnoofpages).HasColumnName("motnoofpages");

                entity.Property(e => e.Motnoofpatients).HasColumnName("motnoofpatients");

                entity.Property(e => e.Motnumber).HasColumnName("motnumber");

                entity.Property(e => e.Mottodate)
                    .HasColumnName("mottodate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mottotapproved)
                    .HasColumnName("mottotapproved")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mottotcontract)
                    .HasColumnName("mottotcontract")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mottotcust)
                    .HasColumnName("mottotcust")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mottotpatient)
                    .HasColumnName("mottotpatient")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Mottotsupp)
                    .HasColumnName("mottotsupp")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Personbranchcode)
                    .HasColumnName("personbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NamesAe>(entity =>
            {
                entity.HasKey(e => e.Aname);

                entity.ToTable("names_ae");

                entity.Property(e => e.Aname)
                    .HasColumnName("aname")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Ename)
                    .IsRequired()
                    .HasColumnName("ename")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Nationalities>(entity =>
            {
                entity.HasKey(e => e.Nationalitycode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("nationalities");

                entity.Property(e => e.Nationalitycode)
                    .HasColumnName("nationalitycode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nationalitydescr)
                    .IsRequired()
                    .HasColumnName("nationalitydescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Offers>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("offers");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Offerlineno).HasColumnName("offerlineno");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(9, 4)");
            });

            modelBuilder.Entity<Offersitemtext>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Itemcode, e.Itemtextlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("offersitemtext");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtextlineno).HasColumnName("itemtextlineno");

                entity.Property(e => e.Itemtext)
                    .HasColumnName("itemtext")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Linebold).HasColumnName("linebold");

                entity.Property(e => e.Linestrikeout).HasColumnName("linestrikeout");

                entity.Property(e => e.Lineunderline).HasColumnName("lineunderline");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Offersm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("offersm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custname)
                    .IsRequired()
                    .HasColumnName("custname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue1)
                    .HasColumnName("docvalue1")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Offeragreeddate)
                    .HasColumnName("offeragreeddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Offeragreedusercode)
                    .HasColumnName("offeragreedusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Offerattn)
                    .HasColumnName("offerattn")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Offercomments)
                    .HasColumnName("offercomments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Offerexpirydate)
                    .HasColumnName("offerexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Offerrefusedate)
                    .HasColumnName("offerrefusedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Offerrefusereason).HasColumnName("offerrefusereason");

                entity.Property(e => e.Offerrefuseusercode)
                    .HasColumnName("offerrefuseusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sendtocustdate)
                    .HasColumnName("sendtocustdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sendtocustusercode)
                    .HasColumnName("sendtocustusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Offerstext>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Offertextlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("offerstext");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Offertextlineno).HasColumnName("offertextlineno");

                entity.Property(e => e.Linebold).HasColumnName("linebold");

                entity.Property(e => e.Linefixed)
                    .HasColumnName("linefixed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Linefont).HasColumnName("linefont");

                entity.Property(e => e.Linestrikeout).HasColumnName("linestrikeout");

                entity.Property(e => e.Lineunderline).HasColumnName("lineunderline");

                entity.Property(e => e.Offertext)
                    .HasColumnName("offertext")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Parameterranges>(entity =>
            {
                entity.HasKey(e => e.ParameterrangeCount)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("parameterranges");

                entity.HasIndex(e => e.Parametercode)
                    .HasName("parameterranges_ndx1");

                entity.HasIndex(e => new { e.Agefrom, e.Ageto, e.Sex })
                    .HasName("parameterranges_ndx2");

                entity.Property(e => e.ParameterrangeCount)
                    .HasColumnName("parameterrange_count")
                    .ValueGeneratedNever();

                entity.Property(e => e.Agefrom)
                    .HasColumnName("agefrom")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Ageto)
                    .HasColumnName("ageto")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Maxvalue)
                    .HasColumnName("maxvalue")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Maxvaluecrit)
                    .HasColumnName("maxvaluecrit")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Maxvaluepos)
                    .HasColumnName("maxvaluepos")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Minvalue)
                    .HasColumnName("minvalue")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Minvaluecrit)
                    .HasColumnName("minvaluecrit")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Minvaluepos)
                    .HasColumnName("minvaluepos")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.Parameterdescr)
                    .HasColumnName("parameterdescr")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterrangeGlobal)
                    .HasColumnName("parameterrange_global")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("sex")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Testparamdel)
                    .HasColumnName("testparamdel")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Parametersunits>(entity =>
            {
                entity.HasKey(e => e.Parameterunit)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("parametersunits");

                entity.Property(e => e.Parameterunit)
                    .HasColumnName("parameterunit")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Parameterunitname)
                    .HasColumnName("parameterunitname")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Parametertypes>(entity =>
            {
                entity.HasKey(e => e.Paramtypecode);

                entity.ToTable("parametertypes");

                entity.Property(e => e.Paramtypecode)
                    .HasColumnName("paramtypecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Paramtypedescr)
                    .IsRequired()
                    .HasColumnName("paramtypedescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientbeds>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Hroombedno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientbeds");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Hroombedno)
                    .HasColumnName("hroombedno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BedStatus).HasColumnName("bed_status");

                entity.Property(e => e.Bedcompanion).HasColumnName("bedcompanion");

                entity.Property(e => e.Bedempty).HasColumnName("bedempty");

                entity.Property(e => e.Bedpatient).HasColumnName("bedpatient");

                entity.Property(e => e.Phcode)
                    .IsRequired()
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Totbeds).HasColumnName("totbeds");
            });

            modelBuilder.Entity<Patientcategories>(entity =>
            {
                entity.HasKey(e => e.Pcategorycode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientcategories");

                entity.HasIndex(e => e.Pcategoryname)
                    .HasName("patientcategories_tmp");

                entity.Property(e => e.Pcategorycode)
                    .HasColumnName("pcategorycode")
                    .ValueGeneratedNever();

                entity.Property(e => e.BaseDiscount)
                    .HasColumnName("base_discount")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.BasePcategorycode).HasColumnName("base_pcategorycode");

                entity.Property(e => e.CatNomoreuse)
                    .HasColumnName("cat_nomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Defcat)
                    .HasColumnName("defcat")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Invoicep).HasColumnName("invoicep");

                entity.Property(e => e.Isalp).HasColumnName("isalp");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pcategoryname)
                    .IsRequired()
                    .HasColumnName("pcategoryname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pcategorytype)
                    .HasColumnName("pcategorytype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pcatpricelist).HasColumnName("pcatpricelist");

                entity.Property(e => e.Recisalp).HasColumnName("recisalp");

                entity.Property(e => e.Smplout).HasColumnName("smplout");

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf3)
                    .HasColumnName("vf3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf4)
                    .HasColumnName("vf4")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PatientcategoriesTrans>(entity =>
            {
                entity.HasKey(e => new { e.Pcategorycode, e.TransTime, e.Usercode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientcategories_trans");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BaseDiscount)
                    .HasColumnName("base_discount")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.BasePcategorycode).HasColumnName("base_pcategorycode");
            });

            modelBuilder.Entity<Patientcomments>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode });

                entity.ToTable("patientcomments");

                entity.HasIndex(e => new { e.Patientcode, e.Testcode })
                    .HasName("patientcomments_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasColumnType("text");

                entity.Property(e => e.Sbranchcode)
                    .HasColumnName("sbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientdata>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientdata");

                entity.HasIndex(e => e.Patientcode)
                    .HasName("patientdata_ndx30");

                entity.HasIndex(e => e.Patientdeleted)
                    .HasName("patientdata_ndx32");

                entity.HasIndex(e => e.Patientname)
                    .HasName("patientdata_ndx31");

                entity.HasIndex(e => new { e.Branchcode, e.Labno })
                    .HasName("patientdata_ndx10");

                entity.HasIndex(e => new { e.Branchcode, e.TransTime })
                    .HasName("patientdata_ndx4");

                entity.HasIndex(e => new { e.Custcode, e.Patientdate })
                    .HasName("patientdata_ndx3");

                entity.HasIndex(e => new { e.Patientdate, e.Branchcode })
                    .HasName("patientdata_ndx1");

                entity.HasIndex(e => new { e.Patientname, e.Patientdate })
                    .HasName("patientdate_ndx");

                entity.HasIndex(e => new { e.Phcode, e.Branchcode })
                    .HasName("patientdata_pic");

                entity.HasIndex(e => new { e.TransTime, e.Patientdeleted })
                    .HasName("patientdata_ndx20");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custorigmember)
                    .HasColumnName("custorigmember")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Custorigmemberid)
                    .HasColumnName("custorigmemberid")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Custpiccredit)
                    .HasColumnName("custpiccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Custtotaldue)
                    .HasColumnName("custtotaldue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Custtotalpay)
                    .HasColumnName("custtotalpay")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Doctorcode).HasColumnName("doctorcode");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Homeresult).HasColumnName("homeresult");

                entity.Property(e => e.Housecall)
                    .HasColumnName("housecall")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HousecallCode)
                    .HasColumnName("housecall_code")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hpcode)
                    .HasColumnName("hpcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Labno).HasColumnName("labno");

                entity.Property(e => e.Mobileno)
                    .HasColumnName("mobileno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NoJoborders).HasColumnName("no_joborders");

                entity.Property(e => e.Otherdisc)
                    .HasColumnName("otherdisc")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Patientadd1)
                    .HasColumnName("patientadd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Patientadd2)
                    .HasColumnName("patientadd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Patientage)
                    .HasColumnName("patientage")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Patientdate)
                    .HasColumnName("patientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientdatemotalba)
                    .HasColumnName("patientdatemotalba")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientdeleted).HasColumnName("patientdeleted");

                entity.Property(e => e.Patientdobirth)
                    .HasColumnName("patientdobirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientename)
                    .HasColumnName("patientename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Patientname)
                    .IsRequired()
                    .HasColumnName("patientname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Patientpaypercent)
                    .HasColumnName("patientpaypercent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Patientphon)
                    .HasColumnName("patientphon")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Patientsex)
                    .IsRequired()
                    .HasColumnName("patientsex")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentstatus).HasColumnName("paymentstatus");

                entity.Property(e => e.Paymenttype).HasColumnName("paymenttype");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Pcategorydisc)
                    .HasColumnName("pcategorydisc")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Picip).HasColumnName("picip");

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcomments)
                    .HasColumnName("ptcomments")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ptitle).HasColumnName("ptitle");

                entity.Property(e => e.Ptlanguage)
                    .HasColumnName("ptlanguage")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptoutdue)
                    .HasColumnName("ptoutdue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Ptoutduebase)
                    .HasColumnName("ptoutduebase")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Pttotaldue)
                    .HasColumnName("pttotaldue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Pttotalpay)
                    .HasColumnName("pttotalpay")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.RefdoctorP)
                    .HasColumnName("refdoctor_p")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Totalrequired)
                    .HasColumnName("totalrequired")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientdata2>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientdata2");

                entity.HasIndex(e => e.Patientcode)
                    .HasName("patientdata2_code");

                entity.HasIndex(e => e.Patientname)
                    .HasName("patientdata2_name");

                entity.HasIndex(e => new { e.Branchcode, e.TransTime })
                    .HasName("patientdata2_ndx4");

                entity.HasIndex(e => new { e.Custcode, e.Patientdate })
                    .HasName("patientdata2_ndx3");

                entity.HasIndex(e => new { e.Patientdate, e.Branchcode })
                    .HasName("patientdata2_ndx1");

                entity.HasIndex(e => new { e.Phcode, e.Branchcode })
                    .HasName("patientdata2_pic");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custorigmember)
                    .HasColumnName("custorigmember")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Custorigmemberid)
                    .HasColumnName("custorigmemberid")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custpiccredit)
                    .HasColumnName("custpiccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Custtotaldue)
                    .HasColumnName("custtotaldue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Custtotalpay)
                    .HasColumnName("custtotalpay")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Doctorcode).HasColumnName("doctorcode");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Homeresult).HasColumnName("homeresult");

                entity.Property(e => e.Housecall)
                    .HasColumnName("housecall")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.HousecallCode)
                    .HasColumnName("housecall_code")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hpcode)
                    .HasColumnName("hpcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Labno).HasColumnName("labno");

                entity.Property(e => e.Mobileno)
                    .HasColumnName("mobileno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NoJoborders).HasColumnName("no_joborders");

                entity.Property(e => e.Otherdisc)
                    .HasColumnName("otherdisc")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Patientadd1)
                    .HasColumnName("patientadd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Patientadd2)
                    .HasColumnName("patientadd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Patientage)
                    .HasColumnName("patientage")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Patientdate)
                    .HasColumnName("patientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientdatemotalba)
                    .HasColumnName("patientdatemotalba")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientdeleted).HasColumnName("patientdeleted");

                entity.Property(e => e.Patientdobirth)
                    .HasColumnName("patientdobirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientename)
                    .HasColumnName("patientename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Patientname)
                    .IsRequired()
                    .HasColumnName("patientname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Patientpaypercent)
                    .HasColumnName("patientpaypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Patientphon)
                    .HasColumnName("patientphon")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Patientsex)
                    .IsRequired()
                    .HasColumnName("patientsex")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paymentstatus).HasColumnName("paymentstatus");

                entity.Property(e => e.Paymenttype).HasColumnName("paymenttype");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Pcategorydisc)
                    .HasColumnName("pcategorydisc")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Picip).HasColumnName("picip");

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcomments)
                    .HasColumnName("ptcomments")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ptitle).HasColumnName("ptitle");

                entity.Property(e => e.Ptlanguage)
                    .HasColumnName("ptlanguage")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptoutdue)
                    .HasColumnName("ptoutdue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Ptoutduebase)
                    .HasColumnName("ptoutduebase")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Pttotaldue)
                    .HasColumnName("pttotaldue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Pttotalpay)
                    .HasColumnName("pttotalpay")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.RefdoctorP)
                    .HasColumnName("refdoctor_p")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Totalrequired)
                    .HasColumnName("totalrequired")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientdatadiagnosis>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.DisId })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientdatadiagnosis");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.DisId).HasColumnName("dis_id");

                entity.Property(e => e.Diagnosiscomments)
                    .HasColumnName("diagnosiscomments")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientdatan>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode });

                entity.ToTable("patientdatan");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Patientname)
                    .IsRequired()
                    .HasColumnName("patientname")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientdatasno>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientdatasno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Genbranchcode)
                    .IsRequired()
                    .HasColumnName("genbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Hpcode)
                    .IsRequired()
                    .HasColumnName("hpcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientdeletion>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientdeletion");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bosno).HasColumnName("bosno");

                entity.Property(e => e.Ptdelreason)
                    .HasColumnName("ptdelreason")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.TransType).HasColumnName("trans_type");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercomment)
                    .IsRequired()
                    .HasColumnName("usercomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientitems>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientitems");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ItemComments)
                    .HasColumnName("item_comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Itemfreq).HasColumnName("itemfreq");

                entity.Property(e => e.Itemqty).HasColumnName("itemqty");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Itemunit)
                    .HasColumnName("itemunit")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Noofdays).HasColumnName("noofdays");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(6, 3)");
            });

            modelBuilder.Entity<Patientmedhistory>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientmedhistory");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Bloodgroup).HasColumnName("bloodgroup");

                entity.Property(e => e.Diagnosis)
                    .HasColumnName("diagnosis")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Medhistorycomment)
                    .HasColumnName("medhistorycomment")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Olddiseases)
                    .HasColumnName("olddiseases")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Oldmedication)
                    .HasColumnName("oldmedication")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientpayments>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Isalserialno, e.Paytype });

                entity.ToTable("patientpayments");

                entity.HasIndex(e => new { e.Branchcode, e.Paymentdate })
                    .HasName("patientpayments_ndx2");

                entity.HasIndex(e => new { e.Paymentdate, e.Branchcode })
                    .HasName("patientpayments_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Isalserialno).HasColumnName("isalserialno");

                entity.Property(e => e.Paytype).HasColumnName("paytype");

                entity.Property(e => e.Cheqdate)
                    .HasColumnName("cheqdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Creditcardtype).HasColumnName("creditcardtype");

                entity.Property(e => e.Financialdoccode)
                    .IsRequired()
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Noofprints).HasColumnName("noofprints");

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Patientdeleted).HasColumnName("patientdeleted");

                entity.Property(e => e.Paymentdate)
                    .HasColumnName("paymentdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Paymentvalue)
                    .HasColumnName("paymentvalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Whopaidthis)
                    .HasColumnName("whopaidthis")
                    .HasColumnType("decimal(1, 0)");
            });

            modelBuilder.Entity<Patientpreparations>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Prepcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientpreparations");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("patientpreparations_dump");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Prepcode).HasColumnName("prepcode");

                entity.Property(e => e.Patientdeleted).HasColumnName("patientdeleted");

                entity.Property(e => e.Ptanswer)
                    .HasColumnName("ptanswer")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Patientresults>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Parametercode });

                entity.ToTable("patientresults");

                entity.HasIndex(e => e.Patientcode)
                    .HasName("trial1");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("patientresult_dmp");

                entity.HasIndex(e => new { e.Usercode, e.Phcode })
                    .HasName("patientresults_ndx10");

                entity.HasIndex(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Parametercode, e.Parametervalue })
                    .HasName("patientresults");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.Maxvalue)
                    .HasColumnName("maxvalue")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Maxvaluecrit)
                    .HasColumnName("maxvaluecrit")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Maxvaluepos)
                    .HasColumnName("maxvaluepos")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Minvalue)
                    .HasColumnName("minvalue")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Minvaluecrit)
                    .HasColumnName("minvaluecrit")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Minvaluepos)
                    .HasColumnName("minvaluepos")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Parameterdescr)
                    .HasColumnName("parameterdescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Parametervalue)
                    .HasColumnName("parametervalue")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Resno).HasColumnName("resno");

                entity.Property(e => e.Resultsource).HasColumnName("resultsource");

                entity.Property(e => e.Sbranchcode)
                    .HasColumnName("sbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientresults2>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Commentlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientresults2");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Commentlineno).HasColumnName("commentlineno");

                entity.Property(e => e.Linebold).HasColumnName("linebold");

                entity.Property(e => e.Linecomment)
                    .HasColumnName("linecomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Linefontsize).HasColumnName("linefontsize");

                entity.Property(e => e.Lineitalic).HasColumnName("lineitalic");

                entity.Property(e => e.Linenooftabs).HasColumnName("linenooftabs");

                entity.Property(e => e.Lineprotected).HasColumnName("lineprotected");

                entity.Property(e => e.Lineunderline).HasColumnName("lineunderline");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Resultsource).HasColumnName("resultsource");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientresultsdel>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Parametercode, e.TransTimedel })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientresultsdel");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.TransTimedel)
                    .HasColumnName("trans_timedel")
                    .HasColumnType("datetime");

                entity.Property(e => e.Deltype)
                    .HasColumnName("deltype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Maxvalue)
                    .HasColumnName("maxvalue")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Minvalue)
                    .HasColumnName("minvalue")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Parameterdescr)
                    .HasColumnName("parameterdescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Parametervalue)
                    .HasColumnName("parametervalue")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Resultsource).HasColumnName("resultsource");

                entity.Property(e => e.Sbranchcode)
                    .HasColumnName("sbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercodedel)
                    .IsRequired()
                    .HasColumnName("usercodedel")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientresultsdelivery>(entity =>
            {
                entity.HasKey(e => new { e.Deliverybranchcode, e.Branchcode, e.Patientcode, e.Testcode, e.Resulttocode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientresultsdelivery");

                entity.Property(e => e.Deliverybranchcode)
                    .HasColumnName("deliverybranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Resulttocode).HasColumnName("resulttocode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientresultsimages>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Testcodesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientresultsimages");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testcodesno).HasColumnName("testcodesno");

                entity.Property(e => e.Imagetype).HasColumnName("imagetype");

                entity.Property(e => e.Itempicture)
                    .HasColumnName("itempicture")
                    .HasColumnType("image");

                entity.Property(e => e.Sbranchcode)
                    .HasColumnName("sbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientresultsrep>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Parametercode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientresultsrep");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Parametervalue)
                    .HasColumnName("parametervalue")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Reporteddata)
                    .HasColumnName("reporteddata")
                    .HasColumnType("text");

                entity.Property(e => e.Resno).HasColumnName("resno");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientresultstext>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Parametercode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientresultstext");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("patientresultstext_ndx10");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.Parametertext)
                    .HasColumnName("parametertext")
                    .HasColumnType("text");

                entity.Property(e => e.Sbranchcode)
                    .HasColumnName("sbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientroomstrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcode, e.Hroom, e.Hroomsdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientroomstrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Hroom)
                    .HasColumnName("hroom")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hroomsdate)
                    .HasColumnName("hroomsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Hroomfdate)
                    .HasColumnName("hroomfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Roomcomment)
                    .HasColumnName("roomcomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PatientsnamesTrans>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.ModifDate });

                entity.ToTable("patientsnames_trans");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("patientsnames_trans_ndx1");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifDate)
                    .HasColumnName("modif_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranchcode1)
                    .HasColumnName("custbranchcode1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custbranchcode2)
                    .HasColumnName("custbranchcode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custorigmember)
                    .HasColumnName("custorigmember")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Custorigmemberid)
                    .HasColumnName("custorigmemberid")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifType)
                    .HasColumnName("modif_type")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Patientdatemotalba1)
                    .HasColumnName("patientdatemotalba1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patientdatemotalba2)
                    .HasColumnName("patientdatemotalba2")
                    .HasColumnType("datetime");

                entity.Property(e => e.PatientnameNew)
                    .HasColumnName("patientname_new")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PatientnameOld)
                    .HasColumnName("patientname_old")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PcategorycodeNew).HasColumnName("pcategorycode_new");

                entity.Property(e => e.PcategorycodeOld).HasColumnName("pcategorycode_old");

                entity.Property(e => e.Ptpaymoney).HasColumnName("ptpaymoney");

                entity.Property(e => e.RelativecodeNew).HasColumnName("relativecode_new");

                entity.Property(e => e.RelativecodeOld).HasColumnName("relativecode_old");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testprice11)
                    .HasColumnName("testprice11")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Testprice12)
                    .HasColumnName("testprice12")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Testprice21)
                    .HasColumnName("testprice21")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Testprice22)
                    .HasColumnName("testprice22")
                    .HasColumnType("decimal(8, 2)");
            });

            modelBuilder.Entity<PatientsNotyettaken>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.TransTime });

                entity.ToTable("patients_notyettaken");

                entity.HasIndex(e => e.TableDumped)
                    .HasName("patients_notyettaken_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testsampledate)
                    .HasColumnName("testsampledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patienttestdata2>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patienttestdata2");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Outlabcode)
                    .HasColumnName("outlabcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TestComments)
                    .HasColumnName("test_comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patienttests>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patienttests");

                entity.HasIndex(e => e.Patientdeleted)
                    .HasName("patientdeleted");

                entity.HasIndex(e => e.Performbranchcode)
                    .HasName("performbranchcode");

                entity.HasIndex(e => e.Testincontract)
                    .HasName("trial2");

                entity.HasIndex(e => e.Testresultdate)
                    .HasName("trstresultdate");

                entity.HasIndex(e => e.Testrundate)
                    .HasName("testrundate");

                entity.HasIndex(e => e.Testsampledate)
                    .HasName("testsampledate");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("patiebttests_dmp");

                entity.HasIndex(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Testresultdate })
                    .HasName("trial1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Btestdelivery).HasColumnName("btestdelivery");

                entity.Property(e => e.Joborder).HasColumnName("joborder");

                entity.Property(e => e.Joborderno).HasColumnName("joborderno");

                entity.Property(e => e.Patientdeleted).HasColumnName("patientdeleted");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.PatienttestOrder).HasColumnName("patienttest_order");

                entity.Property(e => e.Performbranchcode)
                    .IsRequired()
                    .HasColumnName("performbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Profilecode).HasColumnName("profilecode");

                entity.Property(e => e.Ptestdelivery).HasColumnName("ptestdelivery");

                entity.Property(e => e.Ptpaypercent)
                    .HasColumnName("ptpaypercent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.ResultwrittenFlag).HasColumnName("resultwritten_flag");

                entity.Property(e => e.Revise2Doctorcode)
                    .HasColumnName("revise2_doctorcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Revise2TransTime)
                    .HasColumnName("revise2_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReviseDoctorcode)
                    .HasColumnName("revise_doctorcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ReviseTransTime)
                    .HasColumnName("revise_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rundoctorbonus)
                    .HasColumnName("rundoctorbonus")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rundoctordeal)
                    .HasColumnName("rundoctordeal")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rundoctortax)
                    .HasColumnName("rundoctortax")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcomment)
                    .HasColumnName("testcomment")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Testincontract).HasColumnName("testincontract");

                entity.Property(e => e.Testout).HasColumnName("testout");

                entity.Property(e => e.Testprice)
                    .HasColumnName("testprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testpricebase)
                    .HasColumnName("testpricebase")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testpriceout)
                    .HasColumnName("testpriceout")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testresultdate)
                    .HasColumnName("testresultdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testresultform).HasColumnName("testresultform");

                entity.Property(e => e.Testrundate)
                    .HasColumnName("testrundate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testrundoctor)
                    .HasColumnName("testrundoctor")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Testruntime)
                    .HasColumnName("testruntime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testsample).HasColumnName("testsample");

                entity.Property(e => e.Testsampledate)
                    .HasColumnName("testsampledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testtopatientdate)
                    .HasColumnName("testtopatientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transqtyp).HasColumnName("transqtyp");

                entity.Property(e => e.Transqtyu).HasColumnName("transqtyu");

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patienttests2>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patienttests2");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Btestdelivery).HasColumnName("btestdelivery");

                entity.Property(e => e.Joborder).HasColumnName("joborder");

                entity.Property(e => e.Joborderno).HasColumnName("joborderno");

                entity.Property(e => e.PatientcodeRec).HasColumnName("patientcode_rec");

                entity.Property(e => e.Patientdeleted).HasColumnName("patientdeleted");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.PatienttestOrder).HasColumnName("patienttest_order");

                entity.Property(e => e.Performbranchcode)
                    .IsRequired()
                    .HasColumnName("performbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Profilecode).HasColumnName("profilecode");

                entity.Property(e => e.Ptestdelivery).HasColumnName("ptestdelivery");

                entity.Property(e => e.Ptpaypercent)
                    .HasColumnName("ptpaypercent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.ResultwrittenFlag).HasColumnName("resultwritten_flag");

                entity.Property(e => e.Revise2Doctorcode)
                    .HasColumnName("revise2_doctorcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Revise2TransTime)
                    .HasColumnName("revise2_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReviseDoctorcode)
                    .HasColumnName("revise_doctorcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ReviseTransTime)
                    .HasColumnName("revise_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rundoctorbonus)
                    .HasColumnName("rundoctorbonus")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rundoctordeal)
                    .HasColumnName("rundoctordeal")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Rundoctortax)
                    .HasColumnName("rundoctortax")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcomment)
                    .HasColumnName("testcomment")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Testincontract).HasColumnName("testincontract");

                entity.Property(e => e.Testout).HasColumnName("testout");

                entity.Property(e => e.Testprice)
                    .HasColumnName("testprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testpricebase)
                    .HasColumnName("testpricebase")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testpriceout)
                    .HasColumnName("testpriceout")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testresultdate)
                    .HasColumnName("testresultdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testresultform).HasColumnName("testresultform");

                entity.Property(e => e.Testrundate)
                    .HasColumnName("testrundate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testrundoctor)
                    .HasColumnName("testrundoctor")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Testruntime)
                    .HasColumnName("testruntime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testsample).HasColumnName("testsample");

                entity.Property(e => e.Testsampledate)
                    .HasColumnName("testsampledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testtopatientdate)
                    .HasColumnName("testtopatientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transqtyp).HasColumnName("transqtyp");

                entity.Property(e => e.Transqtyu).HasColumnName("transqtyu");

                entity.Property(e => e.Valuetype)
                    .HasColumnName("valuetype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patienttestsdiagnosis>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Testdiagnosiscode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patienttestsdiagnosis");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testdiagnosiscode).HasColumnName("testdiagnosiscode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patienttestsitems>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patienttestsitems");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("patienttestsitems_ndx55");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(8, 5)");

                entity.Property(e => e.Itemqtystd)
                    .HasColumnName("itemqtystd")
                    .HasColumnType("decimal(8, 5)");

                entity.Property(e => e.Performbranchcode)
                    .IsRequired()
                    .HasColumnName("performbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Samplecon).HasColumnName("samplecon");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Uniqueconsumable).HasColumnName("uniqueconsumable");

                entity.Property(e => e.Uniqueuconsumable).HasColumnName("uniqueuconsumable");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patienttestsmod>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patienttestsmod");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custtotaldue)
                    .HasColumnName("custtotaldue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Custtotaldue2)
                    .HasColumnName("custtotaldue2")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Modifcomment)
                    .HasColumnName("modifcomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Patientpayment2)
                    .HasColumnName("patientpayment2")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Ptpaypercent)
                    .HasColumnName("ptpaypercent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Ptpaypercent2)
                    .HasColumnName("ptpaypercent2")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Pttotaldue)
                    .HasColumnName("pttotaldue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Pttotaldue2)
                    .HasColumnName("pttotaldue2")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testincontract).HasColumnName("testincontract");

                entity.Property(e => e.Testincontract2).HasColumnName("testincontract2");

                entity.Property(e => e.Testprice)
                    .HasColumnName("testprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testprice2)
                    .HasColumnName("testprice2")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testrundoctor)
                    .HasColumnName("testrundoctor")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Testrundoctor2)
                    .HasColumnName("testrundoctor2")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Valuetype)
                    .IsRequired()
                    .HasColumnName("valuetype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Valuetype2)
                    .IsRequired()
                    .HasColumnName("valuetype2")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientteststime>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Teststarttime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientteststime");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Teststarttime)
                    .HasColumnName("teststarttime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Machinename)
                    .HasColumnName("machinename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcomeback)
                    .HasColumnName("ptcomeback")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Testfinishtime)
                    .HasColumnName("testfinishtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientteststrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Transsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientteststrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Transsno).HasColumnName("transsno");

                entity.Property(e => e.Testresultdate)
                    .HasColumnName("testresultdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testrundate)
                    .HasColumnName("testrundate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testsample).HasColumnName("testsample");

                entity.Property(e => e.TestsampledateOrig)
                    .HasColumnName("testsampledate_orig")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testsamplenotyet).HasColumnName("testsamplenotyet");

                entity.Property(e => e.Testtopatientdate)
                    .HasColumnName("testtopatientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transcomments)
                    .HasColumnName("transcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patienttitles>(entity =>
            {
                entity.HasKey(e => e.Ptitle);

                entity.ToTable("patienttitles");

                entity.Property(e => e.Ptitle)
                    .HasColumnName("ptitle")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Petitledescr)
                    .HasColumnName("petitledescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ptitledescr)
                    .IsRequired()
                    .HasColumnName("ptitledescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ptitleorder).HasColumnName("ptitleorder");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasColumnName("sex")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Patientvcomments>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("patientvcomments");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Visitcomments)
                    .HasColumnName("visitcomments")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Paymentstypes>(entity =>
            {
                entity.HasKey(e => e.Paymenttype);

                entity.ToTable("paymentstypes");

                entity.Property(e => e.Paymenttype)
                    .HasColumnName("paymenttype")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Paymentdescr)
                    .IsRequired()
                    .HasColumnName("paymentdescr")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PosPayweight)
                    .HasColumnName("pos_payweight")
                    .HasColumnType("decimal(5, 3)");
            });

            modelBuilder.Entity<PcategoriesGroups>(entity =>
            {
                entity.HasKey(e => new { e.Pcategorycode, e.Usergroup });

                entity.ToTable("pcategories_groups");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Usergroup).HasColumnName("usergroup");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pcgblock).HasColumnName("pcgblock");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pcategorybranches>(entity =>
            {
                entity.HasKey(e => new { e.Pcategorycode, e.Branchcode });

                entity.ToTable("pcategorybranches");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pcatbranchdel)
                    .IsRequired()
                    .HasColumnName("pcatbranchdel")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pcmachines>(entity =>
            {
                entity.HasKey(e => e.Machinecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("pcmachines");

                entity.Property(e => e.Machinecode)
                    .HasColumnName("machinecode")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.Machinedescr)
                    .HasColumnName("machinedescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Machinedomain)
                    .HasColumnName("machinedomain")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Machineip)
                    .HasColumnName("machineip")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Machinename)
                    .HasColumnName("machinename")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PrinterA4)
                    .HasColumnName("printer_a4")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrinterBarcode)
                    .HasColumnName("printer_barcode")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrinterReceipt)
                    .HasColumnName("printer_receipt")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            });

            modelBuilder.Entity<Pcmachinescomm>(entity =>
            {
                entity.HasKey(e => new { e.Machinecode, e.Commmachinecode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("pcmachinescomm");

                entity.Property(e => e.Machinecode)
                    .HasColumnName("machinecode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Commmachinecode)
                    .HasColumnName("commmachinecode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Commmachineport).HasColumnName("commmachineport");
            });

            modelBuilder.Entity<Pdatesout>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode });

                entity.ToTable("pdatesout");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Patientdate)
                    .HasColumnName("patientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personphones>(entity =>
            {
                entity.HasKey(e => new { e.Ptcode, e.Personcode, e.Phoneno, e.Phonetype });

                entity.ToTable("personphones");

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Phoneno)
                    .HasColumnName("phoneno")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phonetype)
                    .HasColumnName("phonetype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phoneblock).HasColumnName("phoneblock");

                entity.Property(e => e.Phonenonote)
                    .HasColumnName("phonenonote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Stckorderallow)
                    .HasColumnName("stckorderallow")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Personsactivityprices>(entity =>
            {
                entity.HasKey(e => new { e.Acttypecode, e.Ptcode, e.Ptclassifcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsactivityprices");

                entity.Property(e => e.Acttypecode)
                    .HasColumnName("acttypecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Actextrahrvalue)
                    .HasColumnName("actextrahrvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Actmaxvalue)
                    .HasColumnName("actmaxvalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Actminvalue)
                    .HasColumnName("actminvalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Actminvaluehrs).HasColumnName("actminvaluehrs");

                entity.Property(e => e.Actpriceblock).HasColumnName("actpriceblock");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.NcActextrahrvalue)
                    .HasColumnName("nc_actextrahrvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.NcActmaxvalue)
                    .HasColumnName("nc_actmaxvalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.NcActminvalue)
                    .HasColumnName("nc_actminvalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.NcActminvaluehrs).HasColumnName("nc_actminvaluehrs");

                entity.Property(e => e.NcAllowed).HasColumnName("nc_allowed");

                entity.Property(e => e.Refcontracttype)
                    .IsRequired()
                    .HasColumnName("refcontracttype")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdata>(entity =>
            {
                entity.HasKey(e => e.Personcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata");

                entity.HasIndex(e => new { e.Personcode, e.Personname })
                    .HasName("pers_ndx");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Contractdisctype)
                    .HasColumnName("contractdisctype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Contractenddate)
                    .HasColumnName("contractenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Dw2Reportname)
                    .HasColumnName("dw2_reportname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empdegree)
                    .HasColumnName("empdegree")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Graduatedate)
                    .HasColumnName("graduatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PatientMaxfatora)
                    .HasColumnName("patient_maxfatora")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.PatientPaypercent)
                    .HasColumnName("patient_paypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PatientPaytype)
                    .IsRequired()
                    .HasColumnName("patient_paytype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Personadd1)
                    .HasColumnName("personadd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd2)
                    .HasColumnName("personadd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd3)
                    .HasColumnName("personadd3")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personcredit)
                    .HasColumnName("personcredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcredit1)
                    .HasColumnName("personcredit1")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcredit2)
                    .HasColumnName("personcredit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcreditdays).HasColumnName("personcreditdays");

                entity.Property(e => e.Persondebit)
                    .HasColumnName("persondebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondebit1)
                    .HasColumnName("persondebit1")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondebit2)
                    .HasColumnName("persondebit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondofbirth)
                    .HasColumnName("persondofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personfdate)
                    .HasColumnName("personfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personglobalcode)
                    .HasColumnName("personglobalcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Personiddate)
                    .HasColumnName("personiddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personidissue)
                    .HasColumnName("personidissue")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Personidno)
                    .HasColumnName("personidno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Personmaxbal)
                    .HasColumnName("personmaxbal")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personmodified)
                    .HasColumnName("personmodified")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Personnote)
                    .HasColumnName("personnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Personopencredit)
                    .HasColumnName("personopencredit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Personopendebit)
                    .HasColumnName("personopendebit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Personrepres1)
                    .HasColumnName("personrepres1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres2)
                    .HasColumnName("personrepres2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres3)
                    .HasColumnName("personrepres3")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres4)
                    .HasColumnName("personrepres4")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personsdate)
                    .HasColumnName("personsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Personsource)
                    .HasColumnName("personsource")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personsstatus)
                    .HasColumnName("personsstatus")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Poboxno)
                    .HasColumnName("poboxno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Salesdisccalc).HasColumnName("salesdisccalc");

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf3)
                    .HasColumnName("vf3")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Zipcode)
                    .HasColumnName("zipcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdata1>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Ruletype, e.Fromdate, e.Todate, e.Relativecode, e.Testtype })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata1");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Ruletype).HasColumnName("ruletype");

                entity.Property(e => e.Fromdate)
                    .HasColumnName("fromdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Todate)
                    .HasColumnName("todate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.Consumedno).HasColumnName("consumedno");

                entity.Property(e => e.Consumedvalue)
                    .HasColumnName("consumedvalue")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.CreateTime)
                    .HasColumnName("create_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createusercode)
                    .IsRequired()
                    .HasColumnName("createusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maxnoeachtime).HasColumnName("maxnoeachtime");

                entity.Property(e => e.Maxnoyrly).HasColumnName("maxnoyrly");

                entity.Property(e => e.Maxvalueeachtime)
                    .HasColumnName("maxvalueeachtime")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Maxvalueyrly)
                    .HasColumnName("maxvalueyrly")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Recblocked).HasColumnName("recblocked");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdata11>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Fromdate, e.Todate, e.Relativecode, e.Picgeneration })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata11");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Fromdate)
                    .HasColumnName("fromdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Todate)
                    .HasColumnName("todate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Picgeneration)
                    .HasColumnName("picgeneration")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime)
                    .HasColumnName("create_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createusercode)
                    .IsRequired()
                    .HasColumnName("createusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Picpremium)
                    .HasColumnName("picpremium")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Pics).HasColumnName("pics");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdata1pic>(entity =>
            {
                entity.HasKey(e => new { e.Phcodecode, e.Fromdate, e.Todate, e.Relativecode, e.Testtype })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata1pic");

                entity.Property(e => e.Phcodecode)
                    .HasColumnName("phcodecode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Fromdate)
                    .HasColumnName("fromdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Todate)
                    .HasColumnName("todate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.Consumedno).HasColumnName("consumedno");

                entity.Property(e => e.Consumedvalue)
                    .HasColumnName("consumedvalue")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.CreateTime)
                    .HasColumnName("create_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createusercode)
                    .IsRequired()
                    .HasColumnName("createusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Maxnoeachtime).HasColumnName("maxnoeachtime");

                entity.Property(e => e.Maxnoyrly).HasColumnName("maxnoyrly");

                entity.Property(e => e.Maxvalueeachtime)
                    .HasColumnName("maxvalueeachtime")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Maxvalueyrly)
                    .HasColumnName("maxvalueyrly")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Recblocked).HasColumnName("recblocked");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdata2>(entity =>
            {
                entity.HasKey(e => e.Personcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata2");

                entity.HasIndex(e => e.Branchcode)
                    .HasName("personsdata2_ndx3");

                entity.HasIndex(e => e.Personname)
                    .HasName("personsdata2_ndx1")
                    .IsUnique();

                entity.HasIndex(e => e.Personslevel)
                    .HasName("personsdata2_ndx2");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AnisythiaDoc)
                    .HasColumnName("anisythia_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicensedate)
                    .HasColumnName("carlicensedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicenseenddate)
                    .HasColumnName("carlicenseenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicenseissue)
                    .HasColumnName("carlicenseissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicenseno)
                    .HasColumnName("carlicenseno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicensetype).HasColumnName("carlicensetype");

                entity.Property(e => e.Contracttype).HasColumnName("contracttype");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.EmpInsurance)
                    .HasColumnName("emp_insurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpOwner).HasColumnName("emp_owner");

                entity.Property(e => e.Empattendance).HasColumnName("empattendance");

                entity.Property(e => e.Empattendtype)
                    .HasColumnName("empattendtype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empbankacc)
                    .HasColumnName("empbankacc")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Empcontractdate)
                    .HasColumnName("empcontractdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empexch).HasColumnName("empexch");

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empinsurance1).HasColumnName("empinsurance");

                entity.Property(e => e.EmpinsuranceInjury).HasColumnName("empinsurance_injury");

                entity.Property(e => e.Empinsurancedate)
                    .HasColumnName("empinsurancedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empinsuranceenddate)
                    .HasColumnName("empinsuranceenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empinsuranceissue)
                    .HasColumnName("empinsuranceissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Empinsuranceno)
                    .HasColumnName("empinsuranceno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empinwork)
                    .HasColumnName("empinwork")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empjoballow)
                    .HasColumnName("empjoballow")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empoldarda).HasColumnName("empoldarda");

                entity.Property(e => e.Empoldoffdays)
                    .HasColumnName("empoldoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empoldrr).HasColumnName("empoldrr");

                entity.Property(e => e.Empoldsick).HasColumnName("empoldsick");

                entity.Property(e => e.Empovertime)
                    .HasColumnName("empovertime")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empremainarda).HasColumnName("empremainarda");

                entity.Property(e => e.Empremainoffdays)
                    .HasColumnName("empremainoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empremainrr).HasColumnName("empremainrr");

                entity.Property(e => e.Empremainsick).HasColumnName("empremainsick");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Empriskdate)
                    .HasColumnName("empriskdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empriskenddate)
                    .HasColumnName("empriskenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empriskidno)
                    .HasColumnName("empriskidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empriskissue)
                    .HasColumnName("empriskissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Emprisktype).HasColumnName("emprisktype");

                entity.Property(e => e.Empsal08)
                    .HasColumnName("empsal08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empsal09)
                    .HasColumnName("empsal09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalSpecial)
                    .HasColumnName("empsal_special")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsocialstatus)
                    .IsRequired()
                    .HasColumnName("empsocialstatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptimepermonth)
                    .HasColumnName("emptimepermonth")
                    .HasColumnType("decimal(4, 1)");

                entity.Property(e => e.Emptrain).HasColumnName("emptrain");

                entity.Property(e => e.Emptraindate)
                    .HasColumnName("emptraindate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Emptrainno).HasColumnName("emptrainno");

                entity.Property(e => e.Emptraintype).HasColumnName("emptraintype");

                entity.Property(e => e.Emptransdir).HasColumnName("emptransdir");

                entity.Property(e => e.Empwarnextra).HasColumnName("empwarnextra");

                entity.Property(e => e.Empyrlyarda).HasColumnName("empyrlyarda");

                entity.Property(e => e.Empyrlyoffdays)
                    .HasColumnName("empyrlyoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empyrlyrr).HasColumnName("empyrlyrr");

                entity.Property(e => e.Empyrlysick).HasColumnName("empyrlysick");

                entity.Property(e => e.Endworkfree).HasColumnName("endworkfree");

                entity.Property(e => e.Endworkreason).HasColumnName("endworkreason");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.ExtclinicDoc)
                    .HasColumnName("extclinic_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Insurebranchcode)
                    .HasColumnName("insurebranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IsAreamanager).HasColumnName("is_areamanager");

                entity.Property(e => e.IsDoctor)
                    .HasColumnName("is_doctor")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDriver).HasColumnName("is_driver");

                entity.Property(e => e.IsHd).HasColumnName("is_hd");

                entity.Property(e => e.IsMaint).HasColumnName("is_maint");

                entity.Property(e => e.IsRepres).HasColumnName("is_repres");

                entity.Property(e => e.IsSupervisor).HasColumnName("is_supervisor");

                entity.Property(e => e.Ithnnpay).HasColumnName("ithnnpay");

                entity.Property(e => e.Ithnpay).HasColumnName("ithnpay");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("last_updated")
                    .HasColumnType("datetime");

                entity.Property(e => e.Medicalcheckupdate)
                    .HasColumnName("medicalcheckupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Medicaldate)
                    .HasColumnName("medicaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Medicalidno)
                    .HasColumnName("medicalidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Medicalissue)
                    .HasColumnName("medicalissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Medicaltype).HasColumnName("medicaltype");

                entity.Property(e => e.Mozawladate)
                    .HasColumnName("mozawladate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mozawlaenddate)
                    .HasColumnName("mozawlaenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mozawlaidno)
                    .HasColumnName("mozawlaidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mozawlaissue)
                    .HasColumnName("mozawlaissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Mozawlatype).HasColumnName("mozawlatype");

                entity.Property(e => e.Nationality).HasColumnName("nationality");

                entity.Property(e => e.Nurse)
                    .HasColumnName("nurse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Onkafala).HasColumnName("onkafala");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Origintaxtype).HasColumnName("origintaxtype");

                entity.Property(e => e.Passportdate)
                    .HasColumnName("passportdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Passportenddate)
                    .HasColumnName("passportenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Passportidno)
                    .HasColumnName("passportidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Passportissue)
                    .HasColumnName("passportissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Passporttype).HasColumnName("passporttype");

                entity.Property(e => e.PatientPaypercent)
                    .HasColumnName("patient_paypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Pausesalary).HasColumnName("pausesalary");

                entity.Property(e => e.Personadd1)
                    .HasColumnName("personadd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd2)
                    .HasColumnName("personadd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd3)
                    .HasColumnName("personadd3")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Persondofbirth)
                    .HasColumnName("persondofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personfdate)
                    .HasColumnName("personfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personiddate)
                    .HasColumnName("personiddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personidenddate)
                    .HasColumnName("personidenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personidissue)
                    .HasColumnName("personidissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Personidno)
                    .HasColumnName("personidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personidtype).HasColumnName("personidtype");

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personnote)
                    .HasColumnName("personnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres1)
                    .HasColumnName("personrepres1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres2)
                    .HasColumnName("personrepres2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personsdate)
                    .HasColumnName("personsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personsex)
                    .HasColumnName("personsex")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Pmedicaldate)
                    .HasColumnName("pmedicaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pmedicalenddate)
                    .HasColumnName("pmedicalenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pmedicalidno)
                    .HasColumnName("pmedicalidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pmedicalissue)
                    .HasColumnName("pmedicalissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Pmedicaltype).HasColumnName("pmedicaltype");

                entity.Property(e => e.Prelision)
                    .HasColumnName("prelision")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode20)
                    .HasColumnName("ptclassifcode20")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode30)
                    .HasColumnName("ptclassifcode30")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode40)
                    .HasColumnName("ptclassifcode40")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode50)
                    .HasColumnName("ptclassifcode50")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode60)
                    .HasColumnName("ptclassifcode60")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Recpersoncode)
                    .HasColumnName("recpersoncode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Retiredate)
                    .HasColumnName("retiredate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.SurgeryDoc)
                    .HasColumnName("surgery_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Taxsal01).HasColumnName("taxsal01");

                entity.Property(e => e.Taxsal02).HasColumnName("taxsal02");

                entity.Property(e => e.Taxsal03).HasColumnName("taxsal03");

                entity.Property(e => e.Taxsal04).HasColumnName("taxsal04");

                entity.Property(e => e.Taxsal05).HasColumnName("taxsal05");

                entity.Property(e => e.Taxsal06).HasColumnName("taxsal06");

                entity.Property(e => e.Taxsal07).HasColumnName("taxsal07");

                entity.Property(e => e.Taxsal08).HasColumnName("taxsal08");

                entity.Property(e => e.Taxsal09).HasColumnName("taxsal09");
            });

            modelBuilder.Entity<Personsdata9>(entity =>
            {
                entity.HasKey(e => e.Personcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata9");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AnisythiaDoc)
                    .HasColumnName("anisythia_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicensedate)
                    .HasColumnName("carlicensedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicenseno)
                    .HasColumnName("carlicenseno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicensetype).HasColumnName("carlicensetype");

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.EmpInsurance)
                    .HasColumnName("emp_insurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpOwner).HasColumnName("emp_owner");

                entity.Property(e => e.Empattendance).HasColumnName("empattendance");

                entity.Property(e => e.Empcontractdate)
                    .HasColumnName("empcontractdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empdegree)
                    .HasColumnName("empdegree")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empinsurance1).HasColumnName("empinsurance");

                entity.Property(e => e.EmpinsuranceInjury).HasColumnName("empinsurance_injury");

                entity.Property(e => e.Empinsuranceno)
                    .HasColumnName("empinsuranceno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empjoballow)
                    .HasColumnName("empjoballow")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empoldoffdays)
                    .HasColumnName("empoldoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empremainoffdays)
                    .HasColumnName("empremainoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalSpecial)
                    .HasColumnName("empsal_special")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsocialstatus)
                    .IsRequired()
                    .HasColumnName("empsocialstatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptimepermonth)
                    .HasColumnName("emptimepermonth")
                    .HasColumnType("decimal(4, 1)");

                entity.Property(e => e.Emptransdir).HasColumnName("emptransdir");

                entity.Property(e => e.Empyrlyoffdays)
                    .HasColumnName("empyrlyoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.ExtclinicDoc)
                    .HasColumnName("extclinic_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Graduatedate)
                    .HasColumnName("graduatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsDoctor)
                    .HasColumnName("is_doctor")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDriver).HasColumnName("is_driver");

                entity.Property(e => e.IsMaint).HasColumnName("is_maint");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("last_updated")
                    .HasColumnType("datetime");

                entity.Property(e => e.Medicalcheckupdate)
                    .HasColumnName("medicalcheckupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Nurse)
                    .HasColumnName("nurse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PatientPaypercent)
                    .HasColumnName("patient_paypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personadd1)
                    .HasColumnName("personadd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd2)
                    .HasColumnName("personadd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd3)
                    .HasColumnName("personadd3")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Persondofbirth)
                    .HasColumnName("persondofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personfdate)
                    .HasColumnName("personfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personiddate)
                    .HasColumnName("personiddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personidissue)
                    .HasColumnName("personidissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Personidno)
                    .HasColumnName("personidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personnote)
                    .HasColumnName("personnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres1)
                    .HasColumnName("personrepres1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres2)
                    .HasColumnName("personrepres2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personsdate)
                    .HasColumnName("personsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personsex)
                    .HasColumnName("personsex")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Retiredate)
                    .HasColumnName("retiredate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Specialtycode).HasColumnName("specialtycode");

                entity.Property(e => e.SurgeryDoc)
                    .HasColumnName("surgery_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdatacomm>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Custdiscpcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdatacomm");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscpcode)
                    .HasColumnName("custdiscpcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cashpercent1)
                    .HasColumnName("cashpercent1")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent1q)
                    .HasColumnName("cashpercent1q")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent1t)
                    .HasColumnName("cashpercent1t")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent2)
                    .HasColumnName("cashpercent2")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent2q)
                    .HasColumnName("cashpercent2q")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent2t)
                    .HasColumnName("cashpercent2t")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent3)
                    .HasColumnName("cashpercent3")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent3q)
                    .HasColumnName("cashpercent3q")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent3t)
                    .HasColumnName("cashpercent3t")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent4)
                    .HasColumnName("cashpercent4")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent4q)
                    .HasColumnName("cashpercent4q")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Cashpercent4t)
                    .HasColumnName("cashpercent4t")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Period1).HasColumnName("period1");

                entity.Property(e => e.Period2).HasColumnName("period2");

                entity.Property(e => e.Period3).HasColumnName("period3");

                entity.Property(e => e.Salespercent1)
                    .HasColumnName("salespercent1")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Salespercent2)
                    .HasColumnName("salespercent2")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Salespercent3)
                    .HasColumnName("salespercent3")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Salespercent4)
                    .HasColumnName("salespercent4")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdatacontracts>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Ptcode });

                entity.ToTable("personsdatacontracts");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcontract)
                    .IsRequired()
                    .HasColumnName("personcontract")
                    .HasColumnType("text");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonsdataDate>(entity =>
            {
                entity.HasKey(e => new { e.Refdate, e.Personcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata_date");

                entity.Property(e => e.Refdate)
                    .HasColumnName("refdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Personcredit)
                    .HasColumnName("personcredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcredit1)
                    .HasColumnName("personcredit1")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcredit2)
                    .HasColumnName("personcredit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondebit)
                    .HasColumnName("persondebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondebit1)
                    .HasColumnName("persondebit1")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondebit2)
                    .HasColumnName("persondebit2")
                    .HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<Personsdatapersons>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Personsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdatapersons");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Personsno).HasColumnName("personsno");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personactive).HasColumnName("personactive");

                entity.Property(e => e.Personcomment)
                    .HasColumnName("personcomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Personjob)
                    .IsRequired()
                    .HasColumnName("personjob")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personmain).HasColumnName("personmain");

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdatastaff>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Personsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdatastaff");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Personsno).HasColumnName("personsno");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personblocked).HasColumnName("personblocked");

                entity.Property(e => e.Personcomment)
                    .HasColumnName("personcomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Personmain).HasColumnName("personmain");

                entity.Property(e => e.Staffcode)
                    .IsRequired()
                    .HasColumnName("staffcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsdatatax>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Ptcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdatatax");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Taxdept)
                    .HasColumnName("taxdept")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Taxdeptcode)
                    .HasColumnName("taxdeptcode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Taxfileno)
                    .HasColumnName("taxfileno")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Taxnature)
                    .HasColumnName("taxnature")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Taxnaturecode)
                    .HasColumnName("taxnaturecode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Taxpayeraddress)
                    .HasColumnName("taxpayeraddress")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Taxpayername)
                    .IsRequired()
                    .HasColumnName("taxpayername")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Taxregno)
                    .HasColumnName("taxregno")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonsdataWs>(entity =>
            {
                entity.HasKey(e => e.Personcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsdata_ws");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Contractdisctype)
                    .HasColumnName("contractdisctype")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Contractenddate)
                    .HasColumnName("contractenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Dw2Reportname)
                    .HasColumnName("dw2_reportname")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Empdegree)
                    .HasColumnName("empdegree")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Graduatedate)
                    .HasColumnName("graduatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PatientMaxfatora)
                    .HasColumnName("patient_maxfatora")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.PatientPaypercent)
                    .HasColumnName("patient_paypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PatientPaytype)
                    .IsRequired()
                    .HasColumnName("patient_paytype")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Personadd1)
                    .HasColumnName("personadd1")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd2)
                    .HasColumnName("personadd2")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd3)
                    .HasColumnName("personadd3")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personcredit)
                    .HasColumnName("personcredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcredit1)
                    .HasColumnName("personcredit1")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcredit2)
                    .HasColumnName("personcredit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personcreditdays).HasColumnName("personcreditdays");

                entity.Property(e => e.Persondebit)
                    .HasColumnName("persondebit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondebit1)
                    .HasColumnName("persondebit1")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondebit2)
                    .HasColumnName("persondebit2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Persondofbirth)
                    .HasColumnName("persondofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personfdate)
                    .HasColumnName("personfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personglobalcode)
                    .HasColumnName("personglobalcode")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Personiddate)
                    .HasColumnName("personiddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personidissue)
                    .HasColumnName("personidissue")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personidno)
                    .HasColumnName("personidno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Personmaxbal)
                    .HasColumnName("personmaxbal")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Personmodified)
                    .HasColumnName("personmodified")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(65)
                    .IsUnicode(false);

                entity.Property(e => e.Personnote)
                    .HasColumnName("personnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Personopencredit)
                    .HasColumnName("personopencredit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Personopendebit)
                    .HasColumnName("personopendebit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Personrepres1)
                    .HasColumnName("personrepres1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres2)
                    .HasColumnName("personrepres2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres3)
                    .HasColumnName("personrepres3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres4)
                    .HasColumnName("personrepres4")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Personsdate)
                    .HasColumnName("personsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Personsource)
                    .HasColumnName("personsource")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Personsstatus)
                    .HasColumnName("personsstatus")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Poboxno)
                    .HasColumnName("poboxno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Salesdisccalc).HasColumnName("salesdisccalc");

                entity.Property(e => e.Vf0)
                    .IsRequired()
                    .HasColumnName("vf0")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .IsRequired()
                    .HasColumnName("vf1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf3)
                    .HasColumnName("vf3")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Zipcode)
                    .HasColumnName("zipcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsopenbal>(entity =>
            {
                entity.HasKey(e => e.Personcode);

                entity.ToTable("personsopenbal");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Opentrans)
                    .HasColumnName("opentrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Personopencredit)
                    .HasColumnName("personopencredit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Personopendate)
                    .HasColumnName("personopendate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personopendebit)
                    .HasColumnName("personopendebit")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Personsphotos>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Ptcode, e.Phcodesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("personsphotos");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodesno).HasColumnName("phcodesno");

                entity.Property(e => e.Imagecomment)
                    .HasColumnName("imagecomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Itempicture)
                    .HasColumnName("itempicture")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Persontypes>(entity =>
            {
                entity.HasKey(e => e.Ptcode);

                entity.ToTable("persontypes");

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Lastpersoncode)
                    .HasColumnName("lastpersoncode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ptcodeblocked).HasColumnName("ptcodeblocked");

                entity.Property(e => e.Ptdescr)
                    .IsRequired()
                    .HasColumnName("ptdescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Ptedescr)
                    .HasColumnName("ptedescr")
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Persontypesclassif>(entity =>
            {
                entity.HasKey(e => new { e.Ptcode, e.Ptclassifcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("persontypesclassif");

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.HawafezF1)
                    .HasColumnName("hawafez_f1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ptclassifdescr)
                    .HasColumnName("ptclassifdescr")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");
            });

            modelBuilder.Entity<Persontypesclassif2>(entity =>
            {
                entity.HasKey(e => new { e.Ptcode, e.Ptclassifcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("persontypesclassif2");

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.HawafezF1)
                    .HasColumnName("hawafez_f1")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Ptclassifdescr)
                    .HasColumnName("ptclassifdescr")
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Phonetypes>(entity =>
            {
                entity.HasKey(e => e.Phonetype);

                entity.ToTable("phonetypes");

                entity.Property(e => e.Phonetype)
                    .HasColumnName("phonetype")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Phonedescr)
                    .IsRequired()
                    .HasColumnName("phonedescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Piccrmhousecalls>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Custphcode, e.Crmhcorderno, e.Crmhcorderflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("piccrmhousecalls");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custphcode)
                    .HasColumnName("custphcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Crmhcorderno)
                    .HasColumnName("crmhcorderno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Crmhcorderflag).HasColumnName("crmhcorderflag");

                entity.Property(e => e.Obranchcode)
                    .IsRequired()
                    .HasColumnName("obranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Profilecode).HasColumnName("profilecode");

                entity.Property(e => e.Ptpaypercent)
                    .HasColumnName("ptpaypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testdaysforresults).HasColumnName("testdaysforresults");

                entity.Property(e => e.Testincontract).HasColumnName("testincontract");

                entity.Property(e => e.Testprice)
                    .HasColumnName("testprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testpricebase)
                    .HasColumnName("testpricebase")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Valuetype)
                    .IsRequired()
                    .HasColumnName("valuetype")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Piccrmitems>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Crmorderno, e.Crmorderflag });

                entity.ToTable("piccrmitems");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Crmorderno)
                    .HasColumnName("crmorderno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Crmorderflag).HasColumnName("crmorderflag");

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Custphcode)
                    .IsRequired()
                    .HasColumnName("custphcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber).HasColumnName("docnumber");

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itempoints)
                    .HasColumnName("itempoints")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemqtyp).HasColumnName("itemqtyp");

                entity.Property(e => e.Itemqtyu).HasColumnName("itemqtyu");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Nowcostprice)
                    .HasColumnName("nowcostprice")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Nowqty)
                    .HasColumnName("nowqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Obranchcode)
                    .IsRequired()
                    .HasColumnName("obranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Orderstatus).HasColumnName("orderstatus");

                entity.Property(e => e.Orderstatustime)
                    .HasColumnName("orderstatustime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sbranchcode)
                    .IsRequired()
                    .HasColumnName("sbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sdocnumber).HasColumnName("sdocnumber");

                entity.Property(e => e.Sitemqty)
                    .HasColumnName("sitemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Specialoffersno).HasColumnName("specialoffersno");

                entity.Property(e => e.Stime).HasColumnName("stime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Unitsaleprice)
                    .HasColumnName("unitsaleprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Piccrmorderdel>(entity =>
            {
                entity.HasKey(e => new { e.Crmbranchcode, e.Crmorderno, e.Branchcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("piccrmorderdel");

                entity.Property(e => e.Crmbranchcode)
                    .HasColumnName("crmbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Crmorderno).HasColumnName("crmorderno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderstatus).HasColumnName("orderstatus");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Piccrmorders>(entity =>
            {
                entity.HasKey(e => new { e.Crmbranchcode, e.Crmorderno, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("piccrmorders");

                entity.Property(e => e.Crmbranchcode)
                    .HasColumnName("crmbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Crmorderno).HasColumnName("crmorderno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Delivertocust)
                    .HasColumnName("delivertocust")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docdate5)
                    .HasColumnName("docdate5")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docnumber5)
                    .HasColumnName("docnumber5")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Drivercode)
                    .HasColumnName("drivercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Driverindatetime)
                    .HasColumnName("driverindatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Driveroutdatetime)
                    .HasColumnName("driveroutdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Driveroutvalue)
                    .HasColumnName("driveroutvalue")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Drivertime).HasColumnName("drivertime");

                entity.Property(e => e.Execorderdatetime)
                    .HasColumnName("execorderdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Execorderusercode)
                    .HasColumnName("execorderusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Orderdatetime)
                    .HasColumnName("orderdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderdatetimes)
                    .HasColumnName("orderdatetimes")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderinvoice)
                    .HasColumnName("orderinvoice")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderstatus).HasColumnName("orderstatus");

                entity.Property(e => e.Orderstatustime)
                    .HasColumnName("orderstatustime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ordertobr)
                    .HasColumnName("ordertobr")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ordertobrtaken)
                    .HasColumnName("ordertobrtaken")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderusercode)
                    .IsRequired()
                    .HasColumnName("orderusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ordervalue)
                    .HasColumnName("ordervalue")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Piccrmorders5>(entity =>
            {
                entity.HasKey(e => new { e.Crmbranchcode, e.Crmorderno, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("piccrmorders5");

                entity.Property(e => e.Crmbranchcode)
                    .HasColumnName("crmbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Crmorderno).HasColumnName("crmorderno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Delivertocust)
                    .HasColumnName("delivertocust")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docdate5)
                    .HasColumnName("docdate5")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docnumber5)
                    .HasColumnName("docnumber5")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Drivercode)
                    .HasColumnName("drivercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Driverindatetime)
                    .HasColumnName("driverindatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Driveroutdatetime)
                    .HasColumnName("driveroutdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Driveroutvalue)
                    .HasColumnName("driveroutvalue")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Drivertime).HasColumnName("drivertime");

                entity.Property(e => e.Execorderdatetime)
                    .HasColumnName("execorderdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Execorderusercode)
                    .HasColumnName("execorderusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Orderdatetime)
                    .HasColumnName("orderdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderdatetimes)
                    .HasColumnName("orderdatetimes")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderinvoice)
                    .HasColumnName("orderinvoice")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderstatus).HasColumnName("orderstatus");

                entity.Property(e => e.Orderstatustime)
                    .HasColumnName("orderstatustime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ordertobr)
                    .HasColumnName("ordertobr")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ordertobrtaken)
                    .HasColumnName("ordertobrtaken")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderusercode)
                    .IsRequired()
                    .HasColumnName("orderusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ordervalue)
                    .HasColumnName("ordervalue")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Piccrmordersnos>(entity =>
            {
                entity.HasKey(e => new { e.Crmbranchcode, e.Crmorderno, e.Branchcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("piccrmordersnos");

                entity.Property(e => e.Crmbranchcode)
                    .HasColumnName("crmbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Crmorderno).HasColumnName("crmorderno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber).HasColumnName("docnumber");

                entity.Property(e => e.Snoflag).HasColumnName("snoflag");
            });

            modelBuilder.Entity<Piccrmorderstatus>(entity =>
            {
                entity.HasKey(e => new { e.Crmbranchcode, e.Crmorderno, e.Branchcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("piccrmorderstatus");

                entity.Property(e => e.Crmbranchcode)
                    .HasColumnName("crmbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Crmorderno).HasColumnName("crmorderno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orderstatus).HasColumnName("orderstatus");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Piccrmorderstrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber5, e.Transdir })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("piccrmorderstrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber5)
                    .HasColumnName("docnumber5")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Transdir).HasColumnName("transdir");

                entity.Property(e => e.Drivercode)
                    .IsRequired()
                    .HasColumnName("drivercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Picdoctors>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Refdoctorcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picdoctors");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorcomment)
                    .HasColumnName("doctorcomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Doctordel).HasColumnName("doctordel");

                entity.Property(e => e.Maindoctor).HasColumnName("maindoctor");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picimages>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Ptcode, e.Phcodesno });

                entity.ToTable("picimages");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodesno).HasColumnName("phcodesno");

                entity.Property(e => e.Imagecomment)
                    .HasColumnName("imagecomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Imagetype).HasColumnName("imagetype");

                entity.Property(e => e.Itempicture)
                    .HasColumnName("itempicture")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picmeals>(entity =>
            {
                entity.HasKey(e => e.Phcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picmeals");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Mealcomment)
                    .HasColumnName("mealcomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Picmeal1).HasColumnName("picmeal1");

                entity.Property(e => e.Picmeal2).HasColumnName("picmeal2");

                entity.Property(e => e.Picmeal3).HasColumnName("picmeal3");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picmedicalevents>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Eventdescr })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picmedicalevents");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Eventdescr)
                    .HasColumnName("eventdescr")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Eventcomments)
                    .HasColumnName("eventcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EventdatePlan)
                    .HasColumnName("eventdate_plan")
                    .HasColumnType("datetime");

                entity.Property(e => e.EventdateReal)
                    .HasColumnName("eventdate_real")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime2)
                    .HasColumnName("trans_time2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode2)
                    .HasColumnName("usercode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picmedicalhistory>(entity =>
            {
                entity.HasKey(e => e.Phcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picmedicalhistory");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Medicalhistory)
                    .HasColumnName("medicalhistory")
                    .HasColumnType("text");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picmhcevents>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Mhcl1, e.Relativecode, e.Mhccode, e.Eventdatetime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picmhcevents");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Mhcl1)
                    .HasColumnName("mhcl1")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.Mhccode)
                    .HasColumnName("mhccode")
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.Eventdatetime)
                    .HasColumnName("eventdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Eventactive).HasColumnName("eventactive");

                entity.Property(e => e.Eventby)
                    .HasColumnName("eventby")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Eventcomments)
                    .HasColumnName("eventcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Eventinactivedate)
                    .HasColumnName("eventinactivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mhcduration1).HasColumnName("mhcduration1");

                entity.Property(e => e.Mhcduration2).HasColumnName("mhcduration2");

                entity.Property(e => e.Mhcrate1).HasColumnName("mhcrate1");

                entity.Property(e => e.Mhcrate2).HasColumnName("mhcrate2");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picpoints>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Transdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picpoints");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Transdate)
                    .HasColumnName("transdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Points).HasColumnName("points");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vf3)
                    .HasColumnName("vf3")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picquest>(entity =>
            {
                entity.HasKey(e => e.Questsno)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picquest");

                entity.Property(e => e.Questsno)
                    .HasColumnName("questsno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Blocktranstime)
                    .HasColumnName("blocktranstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Blockuser)
                    .HasColumnName("blockuser")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Questblock).HasColumnName("questblock");

                entity.Property(e => e.Questdescr)
                    .IsRequired()
                    .HasColumnName("questdescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Questedescr)
                    .IsRequired()
                    .HasColumnName("questedescr")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Questorder).HasColumnName("questorder");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picquesttrans>(entity =>
            {
                entity.HasKey(e => new { e.Pic, e.Branchcode, e.Patientcode, e.Questsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picquesttrans");

                entity.Property(e => e.Pic)
                    .HasColumnName("pic")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Questsno).HasColumnName("questsno");

                entity.Property(e => e.Questanswer).HasColumnName("questanswer");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Picstrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Phcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("picstrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custorigmember)
                    .HasColumnName("custorigmember")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Custorigmemberid)
                    .HasColumnName("custorigmemberid")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Custpiccredit)
                    .HasColumnName("custpiccredit")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Phcode2)
                    .IsRequired()
                    .HasColumnName("phcode2")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Phcodestatus)
                    .HasColumnName("phcodestatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Picdiscounts).HasColumnName("picdiscounts");

                entity.Property(e => e.Picip).HasColumnName("picip");

                entity.Property(e => e.Piclock).HasColumnName("piclock");

                entity.Property(e => e.Piclockname)
                    .HasColumnName("piclockname")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Picpoints).HasColumnName("picpoints");

                entity.Property(e => e.Picpurchase).HasColumnName("picpurchase");

                entity.Property(e => e.Picpurchasedate)
                    .HasColumnName("picpurchasedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pphcode)
                    .IsRequired()
                    .HasColumnName("pphcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Pphcode2)
                    .IsRequired()
                    .HasColumnName("pphcode2")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Relativecode).HasColumnName("relativecode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Popupsusers>(entity =>
            {
                entity.HasKey(e => new { e.Mname, e.Usergroup });

                entity.ToTable("popupsusers");

                entity.Property(e => e.Mname)
                    .HasColumnName("mname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Usergroup).HasColumnName("usergroup");
            });

            modelBuilder.Entity<PosCancel>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Itemcode, e.Usercode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("pos_cancel");

                entity.HasIndex(e => new { e.Branchcode, e.TransDate })
                    .HasName("pos_cancel_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custcode)
                    .IsRequired()
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Mitemname)
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate)
                    .HasColumnName("trans_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");
            });

            modelBuilder.Entity<PosCancelOld>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Usercode, e.TransTime, e.Itemcode });

                entity.ToTable("pos_cancel_old");

                entity.HasIndex(e => new { e.Branchcode, e.TransDate })
                    .HasName("pos_cancel_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .IsRequired()
                    .HasColumnName("custcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.TransDate)
                    .HasColumnName("trans_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(9, 3)");
            });

            modelBuilder.Entity<PosShiftclosing>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cashiercode, e.Paymenttype, e.TransTime });

                entity.ToTable("pos_shiftclosing");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("pos_shiftclosing_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Paymenttype)
                    .HasColumnName("paymenttype")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Moneyvalue1)
                    .HasColumnName("moneyvalue1")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Moneyvalue1Get)
                    .HasColumnName("moneyvalue1_get")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Moneyvalue2)
                    .HasColumnName("moneyvalue2")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.Moneyvalueret)
                    .HasColumnName("moneyvalueret")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Moneyvaluesales)
                    .HasColumnName("moneyvaluesales")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.OtherCashiercode)
                    .HasColumnName("other_cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OtherCashinhand)
                    .HasColumnName("other_cashinhand")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.UptoCheqsno)
                    .HasColumnName("upto_cheqsno")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.UptoSalesdocnumber)
                    .HasColumnName("upto_salesdocnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.UserCashinhand)
                    .HasColumnName("user_cashinhand")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.UserCashinhand2)
                    .HasColumnName("user_cashinhand2")
                    .HasColumnType("decimal(14, 4)");

                entity.Property(e => e.UserMoneyvalue3)
                    .HasColumnName("user_moneyvalue3")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.UserMoneyvalue4)
                    .HasColumnName("user_moneyvalue4")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.UserMoneyvalue5)
                    .HasColumnName("user_moneyvalue5")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Postext>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Poslinetype, e.Poslineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("postext");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Poslinetype).HasColumnName("poslinetype");

                entity.Property(e => e.Poslineno).HasColumnName("poslineno");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Poslinetext)
                    .HasColumnName("poslinetext")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Preparations>(entity =>
            {
                entity.HasKey(e => e.Prepcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("preparations");

                entity.Property(e => e.Prepcode)
                    .HasColumnName("prepcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prepanswer).HasColumnName("prepanswer");

                entity.Property(e => e.Prepdescr)
                    .IsRequired()
                    .HasColumnName("prepdescr")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Prepedescr)
                    .HasColumnName("prepedescr")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Prepsex)
                    .HasColumnName("prepsex")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Preptype).HasColumnName("preptype");
            });

            modelBuilder.Entity<Profiles>(entity =>
            {
                entity.HasKey(e => e.Profilecode);

                entity.ToTable("profiles");

                entity.Property(e => e.Profilecode)
                    .HasColumnName("profilecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProfileNomoreuse)
                    .HasColumnName("profile_nomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Profilename)
                    .IsRequired()
                    .HasColumnName("profilename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Profilesbranches>(entity =>
            {
                entity.HasKey(e => new { e.Profilecode, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("profilesbranches");

                entity.Property(e => e.Profilecode).HasColumnName("profilecode");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Blockrestrict).HasColumnName("blockrestrict");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Profilesprices>(entity =>
            {
                entity.HasKey(e => new { e.Profilecode, e.Pcategorycode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("profilesprices");

                entity.Property(e => e.Profilecode).HasColumnName("profilecode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Profiletotprice)
                    .HasColumnName("profiletotprice")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Profiletests>(entity =>
            {
                entity.HasKey(e => new { e.Profilecode, e.Testcode });

                entity.ToTable("profiletests");

                entity.Property(e => e.Profilecode).HasColumnName("profilecode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProfiletestNomoreuse)
                    .HasColumnName("profiletest_nomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Transqtyp).HasColumnName("transqtyp");

                entity.Property(e => e.Transqtyu).HasColumnName("transqtyu");
            });

            modelBuilder.Entity<Profiletestsdiscp>(entity =>
            {
                entity.HasKey(e => new { e.Profilecode, e.Testcode, e.Pcategorycode });

                entity.ToTable("profiletestsdiscp");

                entity.Property(e => e.Profilecode).HasColumnName("profilecode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProfiletestNomoreuse)
                    .HasColumnName("profiletest_nomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Testpricediscp)
                    .HasColumnName("testpricediscp")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testpricetype)
                    .HasColumnName("testpricetype")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Provinces>(entity =>
            {
                entity.HasKey(e => e.Provincecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("provinces");

                entity.Property(e => e.Provincecode)
                    .HasColumnName("provincecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Districtcode).HasColumnName("districtcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Provincename)
                    .IsRequired()
                    .HasColumnName("provincename")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<R3britems>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Itemcode, e.TransTime });

                entity.ToTable("r3britems");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Itemcostprice)
                    .HasColumnName("itemcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Itemsalestaxp)
                    .HasColumnName("itemsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Packqty).HasColumnName("packqty");

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Unitcode)
                    .IsRequired()
                    .HasColumnName("unitcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsaleprice)
                    .HasColumnName("unitsaleprice")
                    .HasColumnType("decimal(11, 4)");
            });

            modelBuilder.Entity<R3stktrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("r3stktrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemPartno)
                    .HasColumnName("item_partno")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Newcostprice)
                    .HasColumnName("newcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.RDoccode)
                    .HasColumnName("r_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocdate)
                    .HasColumnName("r_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Retqty)
                    .HasColumnName("retqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SDoccode)
                    .HasColumnName("s_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SDocdate)
                    .HasColumnName("s_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDocnumber)
                    .HasColumnName("s_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode2)
                    .HasColumnName("storecode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercode)
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<R3stktransm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate });

                entity.ToTable("r3stktransm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchCode)
                    .HasColumnName("cust_branch_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchStore)
                    .HasColumnName("cust_branch_store")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustProfessional)
                    .HasColumnName("cust_professional")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Docnumber2)
                    .HasColumnName("docnumber2")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docpaydue)
                    .HasColumnName("docpaydue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue1)
                    .HasColumnName("docvalue1")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue2)
                    .HasColumnName("docvalue2")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue3)
                    .HasColumnName("docvalue3")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluebc)
                    .HasColumnName("docvaluebc")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Docvaluepay)
                    .HasColumnName("docvaluepay")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepaybc)
                    .HasColumnName("docvaluepaybc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluereturn)
                    .HasColumnName("docvaluereturn")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docwritedate)
                    .HasColumnName("docwritedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fatcurrentstatus)
                    .HasColumnName("fatcurrentstatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fatstatuscode)
                    .IsRequired()
                    .HasColumnName("fatstatuscode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppMainCode)
                    .HasColumnName("supp_main_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<R3stktransold>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("r3stktransold");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemPartno)
                    .HasColumnName("item_partno")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Newcostprice)
                    .HasColumnName("newcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.RDoccode)
                    .HasColumnName("r_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocdate)
                    .HasColumnName("r_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Retqty)
                    .HasColumnName("retqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SDoccode)
                    .HasColumnName("s_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SDocdate)
                    .HasColumnName("s_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDocnumber)
                    .HasColumnName("s_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode2)
                    .HasColumnName("storecode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercode)
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Recempdatatrans>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("recempdatatrans");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EmpOwner).HasColumnName("emp_owner");

                entity.Property(e => e.Empattendance).HasColumnName("empattendance");

                entity.Property(e => e.Empattendtype)
                    .HasColumnName("empattendtype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empcontractdate)
                    .HasColumnName("empcontractdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empdatacomment)
                    .HasColumnName("empdatacomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empinsurance).HasColumnName("empinsurance");

                entity.Property(e => e.Empinsurancedate)
                    .HasColumnName("empinsurancedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empinsuranceno)
                    .HasColumnName("empinsuranceno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empinwork)
                    .HasColumnName("empinwork")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empsocialstatus)
                    .IsRequired()
                    .HasColumnName("empsocialstatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Emptimepermonth)
                    .HasColumnName("emptimepermonth")
                    .HasColumnType("decimal(4, 1)");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.Insurebranchcode)
                    .HasColumnName("insurebranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personfdate)
                    .HasColumnName("personfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personsdate)
                    .HasColumnName("personsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode40)
                    .IsRequired()
                    .HasColumnName("ptclassifcode40")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Recempdegrees>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Empdegree })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("recempdegrees");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empdegree)
                    .HasColumnName("empdegree")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Degreedate)
                    .HasColumnName("degreedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empcollege)
                    .IsRequired()
                    .HasColumnName("empcollege")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empcurentdegree)
                    .IsRequired()
                    .HasColumnName("empcurentdegree")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empdegreecode)
                    .HasColumnName("empdegreecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Empgrade).HasColumnName("empgrade");

                entity.Property(e => e.Empschool)
                    .IsRequired()
                    .HasColumnName("empschool")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empspecialty)
                    .IsRequired()
                    .HasColumnName("empspecialty")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Empspecialtycode)
                    .HasColumnName("empspecialtycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Recempexperiences>(entity =>
            {
                entity.HasKey(e => new { e.Empcode, e.Expsdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("recempexperiences");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Expsdate)
                    .HasColumnName("expsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empexpyears)
                    .HasColumnName("empexpyears")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Empexpyearsapp)
                    .HasColumnName("empexpyearsapp")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Expdescr)
                    .IsRequired()
                    .HasColumnName("expdescr")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expfdate)
                    .HasColumnName("expfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expplace)
                    .IsRequired()
                    .HasColumnName("expplace")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exptitle)
                    .IsRequired()
                    .HasColumnName("exptitle")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Recempjobs>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Ptclassifcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("recempjobs");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Empaccepted).HasColumnName("empaccepted");

                entity.Property(e => e.Interviewgrade).HasColumnName("interviewgrade");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ptclassifcode20)
                    .IsRequired()
                    .HasColumnName("ptclassifcode20")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode30)
                    .IsRequired()
                    .HasColumnName("ptclassifcode30")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode40)
                    .HasColumnName("ptclassifcode40")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode50)
                    .HasColumnName("ptclassifcode50")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode60)
                    .HasColumnName("ptclassifcode60")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Recempmilitary>(entity =>
            {
                entity.HasKey(e => e.Empcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("recempmilitary");

                entity.Property(e => e.Empcode)
                    .HasColumnName("empcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Certificatedate)
                    .HasColumnName("certificatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Certificateno)
                    .HasColumnName("certificateno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Empfreeedate)
                    .HasColumnName("empfreeedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empfreereason).HasColumnName("empfreereason");

                entity.Property(e => e.Empfreesdate)
                    .HasColumnName("empfreesdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MilitaryDays).HasColumnName("military_days");

                entity.Property(e => e.MilitaryMonths).HasColumnName("military_months");

                entity.Property(e => e.MilitaryYears).HasColumnName("military_years");

                entity.Property(e => e.Militarycomments)
                    .HasColumnName("militarycomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Militaryfdate)
                    .HasColumnName("militaryfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Militarygradecode).HasColumnName("militarygradecode");

                entity.Property(e => e.Militarysdate)
                    .HasColumnName("militarysdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Militarystatuscode).HasColumnName("militarystatuscode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Recemprelatives>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Relativesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("recemprelatives");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Relativesno).HasColumnName("relativesno");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativecode)
                    .IsRequired()
                    .HasColumnName("relativecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Relativedep).HasColumnName("relativedep");

                entity.Property(e => e.Relativedobirth)
                    .HasColumnName("relativedobirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativejob)
                    .HasColumnName("relativejob")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relativename)
                    .IsRequired()
                    .HasColumnName("relativename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Relativevip).HasColumnName("relativevip");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReceptionShiftclosing>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cashiercode, e.Financialdoccode, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("reception_shiftclosing");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Financialdoccode)
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Moneyvalue1)
                    .HasColumnName("moneyvalue1")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.MoneyvalueGet)
                    .HasColumnName("moneyvalue_get")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.OtherCashiercode)
                    .HasColumnName("other_cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.OtherCashinhand)
                    .HasColumnName("other_cashinhand")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.UptoIsno).HasColumnName("upto_isno");

                entity.Property(e => e.UptoPcode).HasColumnName("upto_pcode");

                entity.Property(e => e.UptoRsno).HasColumnName("upto_rsno");

                entity.Property(e => e.UserCashinhand)
                    .HasColumnName("user_cashinhand")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UserCashinhand2)
                    .HasColumnName("user_cashinhand2")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Recpersonsdata2>(entity =>
            {
                entity.HasKey(e => e.Personcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("recpersonsdata2");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AnisythiaDoc)
                    .HasColumnName("anisythia_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Bankcode)
                    .HasColumnName("bankcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Candidatestatus)
                    .HasColumnName("candidatestatus")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicensedate)
                    .HasColumnName("carlicensedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicenseenddate)
                    .HasColumnName("carlicenseenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicenseissue)
                    .HasColumnName("carlicenseissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicenseno)
                    .HasColumnName("carlicenseno")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Carlicensetype).HasColumnName("carlicensetype");

                entity.Property(e => e.Contracttype).HasColumnName("contracttype");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.EmpInsurance)
                    .HasColumnName("emp_insurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpOwner).HasColumnName("emp_owner");

                entity.Property(e => e.Empattendance).HasColumnName("empattendance");

                entity.Property(e => e.Empattendtype)
                    .HasColumnName("empattendtype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empbankacc)
                    .HasColumnName("empbankacc")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Empcontractdate)
                    .HasColumnName("empcontractdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empinsurance1).HasColumnName("empinsurance");

                entity.Property(e => e.EmpinsuranceInjury).HasColumnName("empinsurance_injury");

                entity.Property(e => e.Empinsurancedate)
                    .HasColumnName("empinsurancedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empinsuranceenddate)
                    .HasColumnName("empinsuranceenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empinsuranceissue)
                    .HasColumnName("empinsuranceissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Empinsuranceno)
                    .HasColumnName("empinsuranceno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empinwork)
                    .HasColumnName("empinwork")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empjoballow)
                    .HasColumnName("empjoballow")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empoldarda).HasColumnName("empoldarda");

                entity.Property(e => e.Empoldoffdays)
                    .HasColumnName("empoldoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empoldsick).HasColumnName("empoldsick");

                entity.Property(e => e.Empremainarda).HasColumnName("empremainarda");

                entity.Property(e => e.Empremainoffdays)
                    .HasColumnName("empremainoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empremainsick).HasColumnName("empremainsick");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Empriskdate)
                    .HasColumnName("empriskdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empriskenddate)
                    .HasColumnName("empriskenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empriskidno)
                    .HasColumnName("empriskidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Empriskissue)
                    .HasColumnName("empriskissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Emprisktype).HasColumnName("emprisktype");

                entity.Property(e => e.Empsal08)
                    .HasColumnName("empsal08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empsal09)
                    .HasColumnName("empsal09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalSpecial)
                    .HasColumnName("empsal_special")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsocialstatus)
                    .IsRequired()
                    .HasColumnName("empsocialstatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Emptimepermonth)
                    .HasColumnName("emptimepermonth")
                    .HasColumnType("decimal(4, 1)");

                entity.Property(e => e.Emptransdir).HasColumnName("emptransdir");

                entity.Property(e => e.Empwarnextra).HasColumnName("empwarnextra");

                entity.Property(e => e.Empyrlyarda).HasColumnName("empyrlyarda");

                entity.Property(e => e.Empyrlyoffdays)
                    .HasColumnName("empyrlyoffdays")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Empyrlysick).HasColumnName("empyrlysick");

                entity.Property(e => e.Endworkfree).HasColumnName("endworkfree");

                entity.Property(e => e.Endworkreason).HasColumnName("endworkreason");

                entity.Property(e => e.Expcode).HasColumnName("expcode");

                entity.Property(e => e.ExtclinicDoc)
                    .HasColumnName("extclinic_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Insurebranchcode)
                    .HasColumnName("insurebranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IsAreamanager).HasColumnName("is_areamanager");

                entity.Property(e => e.IsDoctor)
                    .HasColumnName("is_doctor")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDriver).HasColumnName("is_driver");

                entity.Property(e => e.IsHd).HasColumnName("is_hd");

                entity.Property(e => e.IsMaint).HasColumnName("is_maint");

                entity.Property(e => e.IsRepres).HasColumnName("is_repres");

                entity.Property(e => e.IsSupervisor).HasColumnName("is_supervisor");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("last_updated")
                    .HasColumnType("datetime");

                entity.Property(e => e.Medicalcheckupdate)
                    .HasColumnName("medicalcheckupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Medicaldate)
                    .HasColumnName("medicaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Medicalidno)
                    .HasColumnName("medicalidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Medicalissue)
                    .HasColumnName("medicalissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Medicaltype).HasColumnName("medicaltype");

                entity.Property(e => e.Mozawladate)
                    .HasColumnName("mozawladate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mozawlaenddate)
                    .HasColumnName("mozawlaenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mozawlaidno)
                    .HasColumnName("mozawlaidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mozawlaissue)
                    .HasColumnName("mozawlaissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Mozawlatype).HasColumnName("mozawlatype");

                entity.Property(e => e.Nationality).HasColumnName("nationality");

                entity.Property(e => e.Nurse)
                    .HasColumnName("nurse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Onkafala).HasColumnName("onkafala");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Origintaxtype).HasColumnName("origintaxtype");

                entity.Property(e => e.Passportdate)
                    .HasColumnName("passportdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Passportenddate)
                    .HasColumnName("passportenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Passportidno)
                    .HasColumnName("passportidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Passportissue)
                    .HasColumnName("passportissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Passporttype).HasColumnName("passporttype");

                entity.Property(e => e.PatientPaypercent)
                    .HasColumnName("patient_paypercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Pausesalary).HasColumnName("pausesalary");

                entity.Property(e => e.Personadd1)
                    .HasColumnName("personadd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd2)
                    .HasColumnName("personadd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personadd3)
                    .HasColumnName("personadd3")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Persondofbirth)
                    .HasColumnName("persondofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personfdate)
                    .HasColumnName("personfdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personiddate)
                    .HasColumnName("personiddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personidenddate)
                    .HasColumnName("personidenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personidissue)
                    .HasColumnName("personidissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Personidno)
                    .HasColumnName("personidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personidtype).HasColumnName("personidtype");

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Personnote)
                    .HasColumnName("personnote")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres1)
                    .HasColumnName("personrepres1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personrepres2)
                    .HasColumnName("personrepres2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personsdate)
                    .HasColumnName("personsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personsex)
                    .HasColumnName("personsex")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Pmedicaldate)
                    .HasColumnName("pmedicaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pmedicalenddate)
                    .HasColumnName("pmedicalenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pmedicalidno)
                    .HasColumnName("pmedicalidno")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pmedicalissue)
                    .HasColumnName("pmedicalissue")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Pmedicaltype).HasColumnName("pmedicaltype");

                entity.Property(e => e.Prelision)
                    .HasColumnName("prelision")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode20)
                    .HasColumnName("ptclassifcode20")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode30)
                    .HasColumnName("ptclassifcode30")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode40)
                    .HasColumnName("ptclassifcode40")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode50)
                    .HasColumnName("ptclassifcode50")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode60)
                    .HasColumnName("ptclassifcode60")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Recpersoncode)
                    .HasColumnName("recpersoncode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Retiredate)
                    .HasColumnName("retiredate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.SurgeryDoc)
                    .HasColumnName("surgery_doc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Taxsal01).HasColumnName("taxsal01");

                entity.Property(e => e.Taxsal02).HasColumnName("taxsal02");

                entity.Property(e => e.Taxsal03).HasColumnName("taxsal03");

                entity.Property(e => e.Taxsal04).HasColumnName("taxsal04");

                entity.Property(e => e.Taxsal05).HasColumnName("taxsal05");

                entity.Property(e => e.Taxsal06).HasColumnName("taxsal06");

                entity.Property(e => e.Taxsal07).HasColumnName("taxsal07");

                entity.Property(e => e.Taxsal08).HasColumnName("taxsal08");

                entity.Property(e => e.Taxsal09).HasColumnName("taxsal09");
            });

            modelBuilder.Entity<Refdoctors>(entity =>
            {
                entity.HasKey(e => e.Refdoctorcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("refdoctors");

                entity.HasIndex(e => e.Doctorname)
                    .HasName("refdoctor_name");

                entity.HasIndex(e => e.Doctorusercode)
                    .HasName("refdoctors_ndx11");

                entity.HasIndex(e => e.Isdoctor)
                    .HasName("refdoctors_ndx10");

                entity.HasIndex(e => new { e.Branchcode, e.Doctorcode })
                    .HasName("refdoctors_code")
                    .IsUnique();

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("refdoctors_dump");

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DoctorCode1)
                    .HasColumnName("doctor_code")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Doctoradd1)
                    .HasColumnName("doctoradd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Doctoradd2)
                    .HasColumnName("doctoradd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Doctoradd3)
                    .HasColumnName("doctoradd3")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorarea).HasColumnName("doctorarea");

                entity.Property(e => e.Doctorcode).HasColumnName("doctorcode");

                entity.Property(e => e.Doctorhours)
                    .HasColumnName("doctorhours")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorinstruct)
                    .HasColumnName("doctorinstruct")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorname)
                    .IsRequired()
                    .HasColumnName("doctorname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorusercode)
                    .HasColumnName("doctorusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Isdoctor)
                    .HasColumnName("isdoctor")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Isrefdoctor)
                    .HasColumnName("isrefdoctor")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RefdoctorPercent)
                    .HasColumnName("refdoctor_percent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RefdoctorPersoncode)
                    .HasColumnName("refdoctor_personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctornote)
                    .HasColumnName("refdoctornote")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Specialtycode).HasColumnName("specialtycode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<RefdoctorsDeal>(entity =>
            {
                entity.HasKey(e => new { e.Refdoctorcode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("refdoctors_deal");

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RefdoctorBonus)
                    .HasColumnName("refdoctor_bonus")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.RefdoctorBonusv).HasColumnName("refdoctor_bonusv");

                entity.Property(e => e.RefdoctorPercent)
                    .HasColumnName("refdoctor_percent")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.RefdoctorPercentv).HasColumnName("refdoctor_percentv");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Refdoctorsdschedule>(entity =>
            {
                entity.HasKey(e => new { e.Refdoctorcode, e.Scheduledate, e.Branchcode, e.Empstime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("refdoctorsdschedule");

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Scheduledate)
                    .HasColumnName("scheduledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Daymaxpatients).HasColumnName("daymaxpatients");

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Schedulelock).HasColumnName("schedulelock");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RefdoctorsGroups>(entity =>
            {
                entity.HasKey(e => e.Usergroup)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("refdoctors_groups");

                entity.Property(e => e.Usergroup)
                    .HasColumnName("usergroup")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Refdoctorcode)
                    .IsRequired()
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RefdoctorsMtob>(entity =>
            {
                entity.HasKey(e => e.Refdoctorcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("refdoctors_mtob");

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DoctorCode1)
                    .HasColumnName("doctor_code")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Doctoradd1)
                    .HasColumnName("doctoradd1")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Doctoradd2)
                    .HasColumnName("doctoradd2")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Doctoradd3)
                    .HasColumnName("doctoradd3")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorarea).HasColumnName("doctorarea");

                entity.Property(e => e.Doctorcode).HasColumnName("doctorcode");

                entity.Property(e => e.Doctorhours)
                    .HasColumnName("doctorhours")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Doctorname)
                    .IsRequired()
                    .HasColumnName("doctorname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctornote)
                    .HasColumnName("refdoctornote")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Specialtycode).HasColumnName("specialtycode");
            });

            modelBuilder.Entity<Refdoctorsschedule>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Refdoctorcode, e.Dayno, e.Empstime, e.Empftime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("refdoctorsschedule");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Dayno).HasColumnName("dayno");

                entity.Property(e => e.Empstime)
                    .HasColumnName("empstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Empftime)
                    .HasColumnName("empftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Daymaxpatients).HasColumnName("daymaxpatients");

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Schedulelock).HasColumnName("schedulelock");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RefusedchequesPay>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Cheqsno, e.Paydate });

                entity.ToTable("refusedcheques_pay");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cheqsno).HasColumnName("cheqsno");

                entity.Property(e => e.Paydate)
                    .HasColumnName("paydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Payamount)
                    .HasColumnName("payamount")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Paycomment)
                    .HasColumnName("paycomment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paytype).HasColumnName("paytype");
            });

            modelBuilder.Entity<Relatives>(entity =>
            {
                entity.HasKey(e => e.Relativecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("relatives");

                entity.Property(e => e.Relativecode)
                    .HasColumnName("relativecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Relativedescr)
                    .IsRequired()
                    .HasColumnName("relativedescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Relisions>(entity =>
            {
                entity.HasKey(e => e.Relisioncode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("relisions");

                entity.Property(e => e.Relisioncode)
                    .HasColumnName("relisioncode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Relisiondescr)
                    .IsRequired()
                    .HasColumnName("relisiondescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Resultsrevising>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.ReviseBranchcode, e.ReviseDoctorcode, e.ReviseTransTime });

                entity.ToTable("resultsrevising");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.ReviseBranchcode)
                    .HasColumnName("revise_branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ReviseDoctorcode)
                    .HasColumnName("revise_doctorcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ReviseTransTime)
                    .HasColumnName("revise_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revno).HasColumnName("revno");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Resultsrevisingdocs>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Personcode, e.Labunitcode });

                entity.ToTable("resultsrevisingdocs");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performdoc)
                    .HasColumnName("performdoc")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Revdocpercent)
                    .HasColumnName("revdocpercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Revisedoc)
                    .HasColumnName("revisedoc")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Returnsclassif>(entity =>
            {
                entity.HasKey(e => e.Retclassifcode);

                entity.ToTable("returnsclassif");

                entity.Property(e => e.Retclassifcode)
                    .HasColumnName("retclassifcode")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Retclassifdescr)
                    .IsRequired()
                    .HasColumnName("retclassifdescr")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Returnsreasons>(entity =>
            {
                entity.HasKey(e => e.Retreasoncode);

                entity.ToTable("returnsreasons");

                entity.Property(e => e.Retreasoncode)
                    .HasColumnName("retreasoncode")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Retclassifcode)
                    .HasColumnName("retclassifcode")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Retreasondescr)
                    .IsRequired()
                    .HasColumnName("retreasondescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RunDate>(entity =>
            {
                entity.HasKey(e => new { e.Sno, e.Rundate1 });

                entity.ToTable("run_date");

                entity.Property(e => e.Sno)
                    .HasColumnName("sno")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Rundate1)
                    .HasColumnName("rundate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Salescomm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Salescommno });

                entity.ToTable("salescomm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Salescommno).HasColumnName("salescommno");

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Percentcancel).HasColumnName("percentcancel");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Reptype)
                    .HasColumnName("reptype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Salespercent)
                    .HasColumnName("salespercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Salescomm5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Salescommno });

                entity.ToTable("salescomm5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Salescommno).HasColumnName("salescommno");

                entity.Property(e => e.Areacode).HasColumnName("areacode");

                entity.Property(e => e.Percentcancel).HasColumnName("percentcancel");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Reptype)
                    .HasColumnName("reptype")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Salespercent)
                    .HasColumnName("salespercent")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Salespay>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate });

                entity.ToTable("salespay");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MoneyPaid)
                    .HasColumnName("money_paid")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.MoneyRequired)
                    .HasColumnName("money_required")
                    .HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<Salesreserve>(entity =>
            {
                entity.HasKey(e => new { e.Branchcoderes, e.Doccoderes, e.Docnumberres, e.Docdateres, e.Cheqsnores });

                entity.ToTable("salesreserve");

                entity.Property(e => e.Branchcoderes)
                    .HasColumnName("branchcoderes")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccoderes)
                    .HasColumnName("doccoderes")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumberres)
                    .HasColumnName("docnumberres")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdateres)
                    .HasColumnName("docdateres")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cheqsnores).HasColumnName("cheqsnores");

                entity.Property(e => e.Cheqvalueres)
                    .HasColumnName("cheqvalueres")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Samples>(entity =>
            {
                entity.HasKey(e => e.Samplecode);

                entity.ToTable("samples");

                entity.Property(e => e.Samplecode)
                    .HasColumnName("samplecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Samplecolor)
                    .HasColumnName("samplecolor")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Samplename)
                    .IsRequired()
                    .HasColumnName("samplename")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sampleunitcode).HasColumnName("sampleunitcode");
            });

            modelBuilder.Entity<Samplestrans>(entity =>
            {
                entity.HasKey(e => new { e.Frombranch, e.Transtype, e.Transdir, e.Frombranchsno, e.Linesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("samplestrans");

                entity.HasIndex(e => new { e.Frombranch, e.TableDumped })
                    .HasName("samplestrans_dump");

                entity.Property(e => e.Frombranch)
                    .HasColumnName("frombranch")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transtype).HasColumnName("transtype");

                entity.Property(e => e.Transdir).HasColumnName("transdir");

                entity.Property(e => e.Frombranchsno).HasColumnName("frombranchsno");

                entity.Property(e => e.Linesno).HasColumnName("linesno");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Itemflag1).HasColumnName("itemflag1");

                entity.Property(e => e.Itemflag2).HasColumnName("itemflag2");

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Samplebarcode)
                    .IsRequired()
                    .HasColumnName("samplebarcode")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Samplecode).HasColumnName("samplecode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tobranch)
                    .IsRequired()
                    .HasColumnName("tobranch")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Samplesunits>(entity =>
            {
                entity.HasKey(e => e.Sampleunitcode);

                entity.ToTable("samplesunits");

                entity.Property(e => e.Sampleunitcode)
                    .HasColumnName("sampleunitcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sampleunitname)
                    .IsRequired()
                    .HasColumnName("sampleunitname")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Scan>(entity =>
            {
                entity.HasKey(e => e.C1);

                entity.ToTable("scan");

                entity.Property(e => e.C1)
                    .HasColumnName("c1")
                    .ValueGeneratedNever();

                entity.Property(e => e.C2)
                    .IsRequired()
                    .HasColumnName("c2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.C3)
                    .IsRequired()
                    .HasColumnName("c3")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.C4).HasColumnName("c4");
            });

            modelBuilder.Entity<Secretreptypes>(entity =>
            {
                entity.HasKey(e => e.Secretreptypecode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("secretreptypes");

                entity.Property(e => e.Secretreptypecode)
                    .HasColumnName("secretreptypecode")
                    .ValueGeneratedNever();

                entity.Property(e => e.HawafezF4)
                    .HasColumnName("hawafez_f4")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Secretrepfmark)
                    .HasColumnName("secretrepfmark")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Secretrepsmark)
                    .HasColumnName("secretrepsmark")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Secretreptypedescr)
                    .IsRequired()
                    .HasColumnName("secretreptypedescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SelectedTests>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode });

                entity.ToTable("selected_tests");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.PrintOrder).HasColumnName("print_order");
            });

            modelBuilder.Entity<ShPicPrefrences>(entity =>
            {
                entity.HasKey(e => e.Phcode);

                entity.ToTable("sh_pic_prefrences");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AlertsAddress).HasColumnName("alerts_address");

                entity.Property(e => e.AlertsEmail).HasColumnName("alerts_email");

                entity.Property(e => e.AlertsEnable).HasColumnName("alerts_enable");

                entity.Property(e => e.AlertsMobile).HasColumnName("alerts_mobile");

                entity.Property(e => e.AlertsPhone).HasColumnName("alerts_phone");

                entity.Property(e => e.AlertsSms).HasColumnName("alerts_sms");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubscribeNews).HasColumnName("subscribe_news");

                entity.Property(e => e.SubscribeOffers).HasColumnName("subscribe_offers");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Smsggdata>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Msgsno });

                entity.ToTable("smsggdata");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Msgsno).HasColumnName("msgsno");

                entity.Property(e => e.FromUserid)
                    .IsRequired()
                    .HasColumnName("from_userid")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Msgclassif).HasColumnName("msgclassif");

                entity.Property(e => e.Msgtext)
                    .IsRequired()
                    .HasColumnName("msgtext")
                    .HasColumnType("text");

                entity.Property(e => e.Msgtime)
                    .HasColumnName("msgtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Msgtitle)
                    .HasColumnName("msgtitle")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Smsgggroups>(entity =>
            {
                entity.HasKey(e => e.Usergroup);

                entity.ToTable("smsgggroups");

                entity.Property(e => e.Usergroup)
                    .HasColumnName("usergroup")
                    .ValueGeneratedNever();

                entity.Property(e => e.Groupdescr)
                    .IsRequired()
                    .HasColumnName("groupdescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Smsggorders>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Msgsno, e.ToUserid });

                entity.ToTable("smsggorders");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Msgsno).HasColumnName("msgsno");

                entity.Property(e => e.ToUserid)
                    .HasColumnName("to_userid")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Msgreadtime)
                    .HasColumnName("msgreadtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Msgreceivedbranch)
                    .HasColumnName("msgreceivedbranch")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Msgreceivedtime)
                    .HasColumnName("msgreceivedtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumpedhq)
                    .HasColumnName("table_dumpedhq")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Smsggstamps>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Msgsno, e.ToUserid, e.Msgtranstype });

                entity.ToTable("smsggstamps");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Msgsno).HasColumnName("msgsno");

                entity.Property(e => e.ToUserid)
                    .HasColumnName("to_userid")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Msgtranstype).HasColumnName("msgtranstype");

                entity.Property(e => e.Msgtransbranch)
                    .IsRequired()
                    .HasColumnName("msgtransbranch")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Msgtranstime)
                    .HasColumnName("msgtranstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Smsggusergroups>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Usergroup });

                entity.ToTable("smsggusergroups");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usergroup).HasColumnName("usergroup");

                entity.Property(e => e.Entryusercode)
                    .IsRequired()
                    .HasColumnName("entryusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Softechreports>(entity =>
            {
                entity.HasKey(e => new { e.Vsoftechcustcode, e.Branchcode, e.Custreportsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("softechreports");

                entity.Property(e => e.Vsoftechcustcode)
                    .HasColumnName("vsoftechcustcode")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custreportsno).HasColumnName("custreportsno");

                entity.Property(e => e.Custreportedby)
                    .HasColumnName("custreportedby")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Custreporteddate)
                    .HasColumnName("custreporteddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DataTransferred)
                    .HasColumnName("data_transferred")
                    .HasColumnType("datetime");

                entity.Property(e => e.Executestatuscode).HasColumnName("executestatuscode");

                entity.Property(e => e.Expectedfinishdate)
                    .HasColumnName("expectedfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mitemclassif).HasColumnName("mitemclassif");

                entity.Property(e => e.Mitemcomment)
                    .HasColumnName("mitemcomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemname)
                    .IsRequired()
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Realfinishdate)
                    .HasColumnName("realfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vsoftechcustname)
                    .HasColumnName("vsoftechcustname")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Specialoffers>(entity =>
            {
                entity.HasKey(e => e.Offersno)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("specialoffers");

                entity.HasIndex(e => new { e.Branchcode, e.Specialoffertype, e.SpecialofferItemcode, e.SpecialofferStartdate, e.SpecialofferFinishdate, e.ItemqtyFrom, e.ItemqtyTo })
                    .HasName("specialoffers_ndx1");

                entity.Property(e => e.Offersno)
                    .HasColumnName("offersno")
                    .ValueGeneratedNever();

                entity.Property(e => e.BonusItemcode)
                    .IsRequired()
                    .HasColumnName("bonus_itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BonusItemqty)
                    .HasColumnName("bonus_itemqty")
                    .HasColumnType("decimal(8, 5)");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Classifcode)
                    .HasColumnName("classifcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemqtyFrom)
                    .HasColumnName("itemqty_from")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.ItemqtyTo)
                    .HasColumnName("itemqty_to")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.OfferByPercent)
                    .IsRequired()
                    .HasColumnName("offer_by_percent")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OfferLastupdate)
                    .HasColumnName("offer_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Producercode)
                    .HasColumnName("producercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialofferFinishdate)
                    .HasColumnName("specialoffer_finishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SpecialofferItemcode)
                    .IsRequired()
                    .HasColumnName("specialoffer_itemcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialofferStartdate)
                    .HasColumnName("specialoffer_startdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Specialoffertype).HasColumnName("specialoffertype");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Specialoffersitems>(entity =>
            {
                entity.HasKey(e => new { e.Offersno, e.Itemcode, e.Itemtype })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("specialoffersitems");

                entity.Property(e => e.Offersno).HasColumnName("offersno");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemtype).HasColumnName("itemtype");

                entity.Property(e => e.Itemblock).HasColumnName("itemblock");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ssbhelp>(entity =>
            {
                entity.HasKey(e => new { e.Ssbver, e.Sno });

                entity.ToTable("ssbhelp");

                entity.Property(e => e.Ssbver)
                    .HasColumnName("ssbver")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sno)
                    .HasColumnName("sno")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdate)
                    .HasColumnName("last_update")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ssbhelptxt)
                    .HasColumnName("ssbhelptxt")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<Stkbal>(entity =>
            {
                entity.HasKey(e => new { e.Storecode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stkbal");

                entity.HasIndex(e => e.Itemcode)
                    .HasName("stkbal_ndx1");

                entity.HasIndex(e => e.IvmTime)
                    .HasName("stkbal_ndx20");

                entity.HasIndex(e => new { e.Branchcode, e.Storecode, e.Itemcode })
                    .HasName("stkbal_ndx10");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpiry)
                    .HasColumnName("itemexpiry")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Itemonshelf)
                    .HasColumnName("itemonshelf")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IvmTime)
                    .HasColumnName("ivm_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Maxnowqty)
                    .HasColumnName("maxnowqty")
                    .HasColumnType("decimal(7, 1)");

                entity.Property(e => e.Maxnowqtymonths)
                    .HasColumnName("maxnowqtymonths")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Monthlyqty)
                    .HasColumnName("monthlyqty")
                    .HasColumnType("decimal(7, 1)");

                entity.Property(e => e.Nowcostprice)
                    .HasColumnName("nowcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Nowqty)
                    .HasColumnName("nowqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Nowqtyhq)
                    .HasColumnName("nowqtyhq")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Nowqtyout)
                    .HasColumnName("nowqtyout")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Onorderqty)
                    .HasColumnName("onorderqty")
                    .HasColumnType("decimal(7, 1)");

                entity.Property(e => e.Onorderqtymonths)
                    .HasColumnName("onorderqtymonths")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Opencostprice)
                    .HasColumnName("opencostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Opendate)
                    .HasColumnName("opendate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Openqty)
                    .HasColumnName("openqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Opentrans)
                    .HasColumnName("opentrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTimeMq)
                    .HasColumnName("trans_time_mq")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTimeXq)
                    .HasColumnName("trans_time_xq")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsercodeMq)
                    .HasColumnName("usercode_mq")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsercodeXq)
                    .HasColumnName("usercode_xq")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StkbalCheck>(entity =>
            {
                entity.HasKey(e => new { e.Repsno, e.Reptype, e.Branchcode, e.Itemcode, e.Repbranchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stkbal_check");

                entity.Property(e => e.Repsno).HasColumnName("repsno");

                entity.Property(e => e.Reptype).HasColumnName("reptype");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Repbranchcode)
                    .HasColumnName("repbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemqtyStkbal)
                    .HasColumnName("itemqty_stkbal")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.ItemqtyStktrans)
                    .HasColumnName("itemqty_stktrans")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Unitcostprice)
                    .HasColumnName("unitcostprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StkbalCheck3>(entity =>
            {
                entity.HasKey(e => new { e.Repbranchcode, e.Repsno });

                entity.ToTable("stkbal_check3");

                entity.Property(e => e.Repbranchcode)
                    .HasColumnName("repbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Repsno).HasColumnName("repsno");

                entity.Property(e => e.Lastdocnumberin)
                    .HasColumnName("lastdocnumberin")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Lastdocnumberout)
                    .HasColumnName("lastdocnumberout")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rep3fixed).HasColumnName("rep3fixed");
            });

            modelBuilder.Entity<Stkbalexpiry>(entity =>
            {
                entity.HasKey(e => new { e.Storecode, e.Itemcode, e.Itemexpirydate });

                entity.ToTable("stkbalexpiry");

                entity.HasIndex(e => new { e.Storecode, e.Itemexpirydate })
                    .HasName("stkbalexpiry_ndx1");

                entity.HasIndex(e => new { e.Suppliercode, e.Storecode, e.Itemexpirydate })
                    .HasName("stkbalexpiry_ndx2");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Batchno)
                    .HasColumnName("batchno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .IsRequired()
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Suppliercode)
                    .IsRequired()
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stkbalexpiryneg>(entity =>
            {
                entity.HasKey(e => new { e.Storecode, e.Itemcode, e.Itemexpirydate });

                entity.ToTable("stkbalexpiryneg");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemqtyneg)
                    .HasColumnName("itemqtyneg")
                    .HasColumnType("decimal(9, 3)");
            });

            modelBuilder.Entity<Stktrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktrans");

                entity.HasIndex(e => new { e.Itemcode, e.Storecode })
                    .HasName("stktrans_ndx3");

                entity.HasIndex(e => new { e.Personcode, e.Docdate })
                    .HasName("stktrans_ndx1");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Docdate })
                    .HasName("stktrans_ndx4");

                entity.HasIndex(e => new { e.Branchcode, e.Docdate, e.Doccode })
                    .HasName("stktrans_ndx50");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped, e.Doccode })
                    .HasName("stktrans_dump");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.RDoccode, e.RDocnumber })
                    .HasName("stktrans_ret1");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.SDoccode, e.SDocnumber })
                    .HasName("stktrans_ret2");

                entity.HasIndex(e => new { e.Itemcode, e.Branchcode, e.Doccode, e.Docdate })
                    .HasName("stktrans_ndx2");

                entity.HasIndex(e => new { e.Personcode, e.Branchcode, e.Doccode, e.Docdate, e.TableDumped })
                    .HasName("stktrans_ndx5");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Itemcode, e.Transqty, e.Transprice, e.TranspriceTotal, e.Itemexpirydate })
                    .HasName("stktrans_ahm10");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemPartno)
                    .HasColumnName("item_partno")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Newcostprice)
                    .HasColumnName("newcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.RDoccode)
                    .HasColumnName("r_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocdate)
                    .HasColumnName("r_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Retqty)
                    .HasColumnName("retqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SDoccode)
                    .HasColumnName("s_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SDocdate)
                    .HasColumnName("s_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDocnumber)
                    .HasColumnName("s_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode2)
                    .HasColumnName("storecode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercode)
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktrans5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktrans5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemPartno)
                    .HasColumnName("item_partno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Newcostprice)
                    .HasColumnName("newcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.RDoccode)
                    .HasColumnName("r_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocdate)
                    .HasColumnName("r_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Retqty)
                    .HasColumnName("retqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SDoccode)
                    .HasColumnName("s_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SDocdate)
                    .HasColumnName("s_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDocnumber)
                    .HasColumnName("s_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode2)
                    .HasColumnName("storecode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercode)
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktrans9>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktrans9");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemPartno)
                    .HasColumnName("item_partno")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Newcostprice)
                    .HasColumnName("newcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.RDoccode)
                    .HasColumnName("r_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocdate)
                    .HasColumnName("r_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Retqty)
                    .HasColumnName("retqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SDoccode)
                    .HasColumnName("s_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SDocdate)
                    .HasColumnName("s_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDocnumber)
                    .HasColumnName("s_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode2)
                    .HasColumnName("storecode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercode)
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StktransBrrec>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag, e.Recsno });

                entity.ToTable("stktrans_brrec");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("stktrans_brrec_ndx6");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Recsno).HasColumnName("recsno");

                entity.Property(e => e.Itemrec).HasColumnName("itemrec");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransqtyNrec)
                    .HasColumnName("transqty_nrec")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StktransHq>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktrans_hq");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemPartno)
                    .HasColumnName("item_partno")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Newcostprice)
                    .HasColumnName("newcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.RDoccode)
                    .HasColumnName("r_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocdate)
                    .HasColumnName("r_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Retqty)
                    .HasColumnName("retqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SDoccode)
                    .HasColumnName("s_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SDocdate)
                    .HasColumnName("s_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDocnumber)
                    .HasColumnName("s_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode2)
                    .HasColumnName("storecode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercode)
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StktransIp>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Itemcode, e.Dblitemflag, e.Brancode, e.Patientcode, e.Testcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktrans_ip");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Brancode)
                    .HasColumnName("brancode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Isnew).HasColumnName("isnew");

                entity.Property(e => e.Itemqtyp).HasColumnName("itemqtyp");

                entity.Property(e => e.Itemqtyu).HasColumnName("itemqtyu");

                entity.Property(e => e.Phcode)
                    .IsRequired()
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Stktransm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate });

                entity.ToTable("stktransm");

                entity.HasIndex(e => new { e.CustBranchCode, e.Docdate })
                    .HasName("stktransm_ndx6");

                entity.HasIndex(e => new { e.Docdate, e.CustBranchCode })
                    .HasName("stktransm_ahm");

                entity.HasIndex(e => new { e.Phcode, e.Docdate })
                    .HasName("stktransm_pic");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.TransTime })
                    .HasName("stktransm_ndx7");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped, e.Doccode })
                    .HasName("stktransm_dump");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Docdate, e.Docvalue })
                    .HasName("stktransm_new_1");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Ptcode, e.Docnumber })
                    .HasName("stktransm_ndx3");

                entity.HasIndex(e => new { e.Branchcode, e.Doccode, e.Ptcode, e.Custdiscp, e.Docnumber })
                    .HasName("stktransm_ndx5");

                entity.HasIndex(e => new { e.CustBranchCode, e.Branchcode, e.Doccode, e.Ptcode, e.TableDumped })
                    .HasName("stktransm_ndx1");

                entity.HasIndex(e => new { e.Doccode, e.Docdate, e.Ptclassifcode, e.Docvalue, e.Docvalue2 })
                    .HasName("stktransm_new_2");

                entity.HasIndex(e => new { e.Docdate, e.Branchcode, e.Doccode, e.Ptcode, e.Custdiscp })
                    .HasName("stktransm_ndx2");

                entity.HasIndex(e => new { e.CustBranchCode, e.Doccode, e.Docnumber, e.Docdate, e.Docvalue, e.Docvaluepay, e.Docvaluereturn, e.Fatcurrentstatus })
                    .HasName("stktransm_new_4");

                entity.HasIndex(e => new { e.Docdate, e.CustBranchCode, e.Doccode, e.Docnumber, e.Docvalue, e.Docvaluepay, e.Docvaluereturn, e.Fatcurrentstatus })
                    .HasName("stktransm_new_5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchCode)
                    .HasColumnName("cust_branch_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchStore)
                    .HasColumnName("cust_branch_store")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustProfessional)
                    .HasColumnName("cust_professional")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Docnumber2)
                    .HasColumnName("docnumber2")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docpaydue)
                    .HasColumnName("docpaydue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue1)
                    .HasColumnName("docvalue1")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue2)
                    .HasColumnName("docvalue2")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue3)
                    .HasColumnName("docvalue3")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluebc)
                    .HasColumnName("docvaluebc")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Docvaluepay)
                    .HasColumnName("docvaluepay")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepaybc)
                    .HasColumnName("docvaluepaybc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluereturn)
                    .HasColumnName("docvaluereturn")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docwritedate)
                    .HasColumnName("docwritedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fatcurrentstatus)
                    .HasColumnName("fatcurrentstatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fatstatuscode)
                    .IsRequired()
                    .HasColumnName("fatstatuscode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppMainCode)
                    .HasColumnName("supp_main_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransm5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate });

                entity.ToTable("stktransm5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchCode)
                    .HasColumnName("cust_branch_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchStore)
                    .HasColumnName("cust_branch_store")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustProfessional)
                    .HasColumnName("cust_professional")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Docnumber2)
                    .HasColumnName("docnumber2")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docpaydue)
                    .HasColumnName("docpaydue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue1)
                    .HasColumnName("docvalue1")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue2)
                    .HasColumnName("docvalue2")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue3)
                    .HasColumnName("docvalue3")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluebc)
                    .HasColumnName("docvaluebc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepay)
                    .HasColumnName("docvaluepay")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepaybc)
                    .HasColumnName("docvaluepaybc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluereturn)
                    .HasColumnName("docvaluereturn")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docwritedate)
                    .HasColumnName("docwritedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fatcurrentstatus)
                    .HasColumnName("fatcurrentstatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fatstatuscode)
                    .IsRequired()
                    .HasColumnName("fatstatuscode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppMainCode)
                    .HasColumnName("supp_main_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransm51>(entity =>
            {
                entity.HasKey(e => new { e.Docnumber, e.Docnumber5, e.Docdate5, e.Doccode });

                entity.ToTable("stktransm_5");

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docnumber5)
                    .HasColumnName("docnumber5")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate5)
                    .HasColumnName("docdate5")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DelDocnumber5).HasColumnName("del_docnumber5");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransm9>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktransm9");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchCode)
                    .HasColumnName("cust_branch_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchStore)
                    .HasColumnName("cust_branch_store")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustProfessional)
                    .HasColumnName("cust_professional")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Docnumber2)
                    .HasColumnName("docnumber2")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docpaydue)
                    .HasColumnName("docpaydue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue1)
                    .HasColumnName("docvalue1")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue2)
                    .HasColumnName("docvalue2")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue3)
                    .HasColumnName("docvalue3")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluebc)
                    .HasColumnName("docvaluebc")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Docvaluepay)
                    .HasColumnName("docvaluepay")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepaybc)
                    .HasColumnName("docvaluepaybc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluereturn)
                    .HasColumnName("docvaluereturn")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docwritedate)
                    .HasColumnName("docwritedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fatcurrentstatus)
                    .HasColumnName("fatcurrentstatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fatstatuscode)
                    .IsRequired()
                    .HasColumnName("fatstatuscode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppMainCode)
                    .HasColumnName("supp_main_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StktransmBrrec>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktransm_brrec");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("stktransm_brrec_ndx5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BrBranchcode)
                    .IsRequired()
                    .HasColumnName("br_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BrDoccode)
                    .IsRequired()
                    .HasColumnName("br_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.BrDocdate)
                    .HasColumnName("br_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.BrDocnumber)
                    .HasColumnName("br_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.BrStorecode)
                    .IsRequired()
                    .HasColumnName("br_storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Recstatus).HasColumnName("recstatus");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransmclassif>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Custdiscpcode });

                entity.ToTable("stktransmclassif");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdiscpcode)
                    .HasColumnName("custdiscpcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Stktransmclassif5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Custdiscpcode });

                entity.ToTable("stktransmclassif5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdiscpcode)
                    .HasColumnName("custdiscpcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Stktransmcomm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Personcode, e.Commtype });

                entity.ToTable("stktransmcomm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Commtype).HasColumnName("commtype");

                entity.Property(e => e.Commvalueget)
                    .HasColumnName("commvalueget")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Commvaluetot)
                    .HasColumnName("commvaluetot")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransmcomm5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Personcode, e.Commtype });

                entity.ToTable("stktransmcomm5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Commtype).HasColumnName("commtype");

                entity.Property(e => e.Commvalueget)
                    .HasColumnName("commvalueget")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Commvaluetot)
                    .HasColumnName("commvaluetot")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StktransmHq>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktransm_hq");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchCode)
                    .HasColumnName("cust_branch_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchStore)
                    .HasColumnName("cust_branch_store")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustProfessional)
                    .HasColumnName("cust_professional")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Docnumber2)
                    .HasColumnName("docnumber2")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docpaydue)
                    .HasColumnName("docpaydue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue1)
                    .HasColumnName("docvalue1")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue2)
                    .HasColumnName("docvalue2")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue3)
                    .HasColumnName("docvalue3")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluebc)
                    .HasColumnName("docvaluebc")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Docvaluepay)
                    .HasColumnName("docvaluepay")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepaybc)
                    .HasColumnName("docvaluepaybc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluereturn)
                    .HasColumnName("docvaluereturn")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docwritedate)
                    .HasColumnName("docwritedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fatcurrentstatus)
                    .HasColumnName("fatcurrentstatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fatstatuscode)
                    .IsRequired()
                    .HasColumnName("fatstatuscode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppMainCode)
                    .HasColumnName("supp_main_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StktransmInv>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate });

                entity.ToTable("stktransm_inv");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocnumberInv)
                    .HasColumnName("docnumber_inv")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransmmcomm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Commyr, e.Commmonth });

                entity.ToTable("stktransmmcomm");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Commyr).HasColumnName("commyr");

                entity.Property(e => e.Commmonth).HasColumnName("commmonth");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransmres>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate });

                entity.ToTable("stktransmres");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.Cashiercode)
                    .HasColumnName("cashiercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchCode)
                    .HasColumnName("cust_branch_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustBranchStore)
                    .HasColumnName("cust_branch_store")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CustProfessional)
                    .HasColumnName("cust_professional")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Docnumber2)
                    .HasColumnName("docnumber2")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docpaydue)
                    .HasColumnName("docpaydue")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue1)
                    .HasColumnName("docvalue1")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue2)
                    .HasColumnName("docvalue2")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvalue3)
                    .HasColumnName("docvalue3")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluebc)
                    .HasColumnName("docvaluebc")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Docvaluepay)
                    .HasColumnName("docvaluepay")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluepaybc)
                    .HasColumnName("docvaluepaybc")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docvaluereturn)
                    .HasColumnName("docvaluereturn")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Docwritedate)
                    .HasColumnName("docwritedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fatcurrentstatus)
                    .HasColumnName("fatcurrentstatus")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fatstatuscode)
                    .IsRequired()
                    .HasColumnName("fatstatuscode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Origdoc).HasColumnName("origdoc");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Patientpayment)
                    .HasColumnName("patientpayment")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Personnewbal)
                    .HasColumnName("personnewbal")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode)
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SuppMainCode)
                    .HasColumnName("supp_main_code")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StktransNeededBranch>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Itemcode });

                entity.ToTable("stktrans_needed_branch");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktransres>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.Docnumber, e.Docdate, e.Storecode, e.Itemcode, e.Dblitemflag })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stktransres");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ItemPartno)
                    .HasColumnName("item_partno")
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.ItemsalepriceTax)
                    .HasColumnName("itemsaleprice_tax")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Newcostprice)
                    .HasColumnName("newcostprice")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.RDoccode)
                    .HasColumnName("r_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocdate)
                    .HasColumnName("r_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Rcostprice)
                    .HasColumnName("rcostprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Retqty)
                    .HasColumnName("retqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.SDoccode)
                    .HasColumnName("s_doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SDocdate)
                    .HasColumnName("s_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SDocnumber)
                    .HasColumnName("s_docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.SalepriceExtrap)
                    .HasColumnName("saleprice_extrap")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Storecode2)
                    .HasColumnName("storecode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercode)
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.TranspriceTotal)
                    .HasColumnName("transprice_total")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Transqty)
                    .HasColumnName("transqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stktranssum>(entity =>
            {
                entity.HasKey(e => new { e.Storecode, e.Itemcode, e.Docdate, e.Usercode });

                entity.ToTable("stktranssum");

                entity.HasIndex(e => e.Usercode)
                    .HasName("stktranssum_ndx4");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transqty10)
                    .HasColumnName("transqty10")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty110)
                    .HasColumnName("transqty110")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty115)
                    .HasColumnName("transqty115")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty120)
                    .HasColumnName("transqty120")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty125)
                    .HasColumnName("transqty125")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty140)
                    .HasColumnName("transqty140")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty150)
                    .HasColumnName("transqty150")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty160)
                    .HasColumnName("transqty160")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty170)
                    .HasColumnName("transqty170")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty190)
                    .HasColumnName("transqty190")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty195)
                    .HasColumnName("transqty195")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty20)
                    .HasColumnName("transqty20")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty25)
                    .HasColumnName("transqty25")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty30)
                    .HasColumnName("transqty30")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty40)
                    .HasColumnName("transqty40")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty50)
                    .HasColumnName("transqty50")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty70)
                    .HasColumnName("transqty70")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty90)
                    .HasColumnName("transqty90")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transqty95)
                    .HasColumnName("transqty95")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Transvalue10)
                    .HasColumnName("transvalue10")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue110)
                    .HasColumnName("transvalue110")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue115)
                    .HasColumnName("transvalue115")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue120)
                    .HasColumnName("transvalue120")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue125)
                    .HasColumnName("transvalue125")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue140)
                    .HasColumnName("transvalue140")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue150)
                    .HasColumnName("transvalue150")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue160)
                    .HasColumnName("transvalue160")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue170)
                    .HasColumnName("transvalue170")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue190)
                    .HasColumnName("transvalue190")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue195)
                    .HasColumnName("transvalue195")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue20)
                    .HasColumnName("transvalue20")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue25)
                    .HasColumnName("transvalue25")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue30)
                    .HasColumnName("transvalue30")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue40)
                    .HasColumnName("transvalue40")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue50)
                    .HasColumnName("transvalue50")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue70)
                    .HasColumnName("transvalue70")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue90)
                    .HasColumnName("transvalue90")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Transvalue95)
                    .HasColumnName("transvalue95")
                    .HasColumnType("decimal(15, 2)");
            });

            modelBuilder.Entity<Stockorders>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stockorders");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("stockorders_ndx6");

                entity.HasIndex(e => new { e.Branchcode, e.Docnumber, e.Dblitemflag })
                    .HasName("stockorders_ndx5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Additionaldiscp)
                    .HasColumnName("additionaldiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Bonusqty)
                    .HasColumnName("bonusqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Bonusqtyget)
                    .HasColumnName("bonusqtyget")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemname)
                    .HasColumnName("itemname")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.ItemqtyCfarma)
                    .HasColumnName("itemqty_cfarma")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemqtyget)
                    .HasColumnName("itemqtyget")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Itemsalestax)
                    .HasColumnName("itemsalestax")
                    .HasColumnType("decimal(8, 4)");

                entity.Property(e => e.Nowqty)
                    .HasColumnName("nowqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Pharmacydiscp)
                    .HasColumnName("pharmacydiscp")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.Specialdiscp)
                    .HasColumnName("specialdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Suppcode)
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transprice)
                    .HasColumnName("transprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stockordersm>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber });

                entity.ToTable("stockordersm");

                entity.HasIndex(e => new { e.Branchcode, e.TableDumped })
                    .HasName("stockordersm_ndx5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docgetdate)
                    .HasColumnName("docgetdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Docstatuscode).HasColumnName("docstatuscode");

                entity.Property(e => e.Docvalue)
                    .HasColumnName("docvalue")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.Forbranchcode)
                    .HasColumnName("forbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ordertoname)
                    .HasColumnName("ordertoname")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Origintaxp)
                    .HasColumnName("origintaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Poclassif).HasColumnName("poclassif");

                entity.Property(e => e.Poclosed).HasColumnName("poclosed");

                entity.Property(e => e.Powarningdate)
                    .HasColumnName("powarningdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Purapp).HasColumnName("purapp");

                entity.Property(e => e.PurtransTime)
                    .HasColumnName("purtrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Purusercode)
                    .HasColumnName("purusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.StatustransTime)
                    .HasColumnName("statustrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Statususercode)
                    .HasColumnName("statususercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Suppcode)
                    .IsRequired()
                    .HasColumnName("suppcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tobranchcode)
                    .HasColumnName("tobranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Whapp).HasColumnName("whapp");

                entity.Property(e => e.WhtransTime)
                    .HasColumnName("whtrans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Whusercode)
                    .HasColumnName("whusercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stockordersmpay>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Paylineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stockordersmpay");

                entity.HasIndex(e => e.Paydate)
                    .HasName("stockordersmpay_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Paylineno).HasColumnName("paylineno");

                entity.Property(e => e.Financialdoccode)
                    .IsRequired()
                    .HasColumnName("financialdoccode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paycomment)
                    .HasColumnName("paycomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Paydate)
                    .HasColumnName("paydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Payvalue)
                    .HasColumnName("payvalue")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stockordersmtext>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Ordertextlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stockordersmtext");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Ordertextlineno).HasColumnName("ordertextlineno");

                entity.Property(e => e.Linebold).HasColumnName("linebold");

                entity.Property(e => e.Linefixed)
                    .HasColumnName("linefixed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Linefont).HasColumnName("linefont");

                entity.Property(e => e.Linestrikeout).HasColumnName("linestrikeout");

                entity.Property(e => e.Lineunderline).HasColumnName("lineunderline");

                entity.Property(e => e.Ordertext)
                    .HasColumnName("ordertext")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Stockordersrec>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Docnumber, e.Itemcode, e.Itemsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stockordersrec");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsno).HasColumnName("itemsno");

                entity.Property(e => e.Batchno)
                    .HasColumnName("batchno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Bonusqtyrec)
                    .HasColumnName("bonusqtyrec")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Dblitemflag).HasColumnName("dblitemflag");

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemqtyrec)
                    .HasColumnName("itemqtyrec")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Newitem).HasColumnName("newitem");

                entity.Property(e => e.Purchaseno).HasColumnName("purchaseno");

                entity.Property(e => e.Refbranchcode)
                    .IsRequired()
                    .HasColumnName("refbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Refdocnumber)
                    .HasColumnName("refdocnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Storecode)
                    .IsRequired()
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stocktaking>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Stockdate, e.StocktakeSno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("stocktaking");

                entity.HasIndex(e => new { e.Branchcode, e.Itemcode, e.Stockdate })
                    .HasName("stocktaking_ndx2");

                entity.HasIndex(e => new { e.Branchcode, e.Stockdate, e.StocktakeFinal, e.Itemcode })
                    .HasName("stocktaking_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Stockdate)
                    .HasColumnName("stockdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.StocktakeSno).HasColumnName("stocktake_sno");

                entity.Property(e => e.Batchno)
                    .HasColumnName("batchno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .IsRequired()
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemexpiry).HasColumnName("itemexpiry");

                entity.Property(e => e.Itemexpirydate)
                    .HasColumnName("itemexpirydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(9, 2)");

                entity.Property(e => e.Nowcostprice)
                    .HasColumnName("nowcostprice")
                    .HasColumnType("decimal(11, 4)");

                entity.Property(e => e.Nowqty)
                    .HasColumnName("nowqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.OpenBal).HasColumnName("open_bal");

                entity.Property(e => e.StocktakeFinal).HasColumnName("stocktake_final");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StorebalDate>(entity =>
            {
                entity.HasKey(e => new { e.Storebaldate1, e.Storecode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("storebal_date");

                entity.HasIndex(e => new { e.Storecode, e.Storebaldate1 })
                    .HasName("storebal_date_ndex1");

                entity.HasIndex(e => new { e.Storecode, e.Storebaldate1, e.Itemcode })
                    .HasName("storebal_date_ndex2");

                entity.Property(e => e.Storebaldate1)
                    .HasColumnName("storebaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcostprice)
                    .HasColumnName("itemcostprice")
                    .HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Nowcostprice)
                    .HasColumnName("nowcostprice")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Nowqty)
                    .HasColumnName("nowqty")
                    .HasColumnType("decimal(12, 5)");
            });

            modelBuilder.Entity<StorebalDatem>(entity =>
            {
                entity.HasKey(e => new { e.Storebaldate, e.Storecode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("storebal_datem");

                entity.Property(e => e.Storebaldate)
                    .HasColumnName("storebaldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Stores>(entity =>
            {
                entity.HasKey(e => e.Storecode);

                entity.ToTable("stores");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Accitemcode)
                    .HasColumnName("accitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acciteml5)
                    .HasColumnName("acciteml5")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Icuprice)
                    .HasColumnName("icuprice")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pstorecode)
                    .HasColumnName("pstorecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder).HasColumnName("sort_order");

                entity.Property(e => e.Storeaddress)
                    .HasColumnName("storeaddress")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Storename)
                    .IsRequired()
                    .HasColumnName("storename")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Storerealbal).HasColumnName("storerealbal");

                entity.Property(e => e.Storesclassif)
                    .HasColumnName("storesclassif")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Storesbal>(entity =>
            {
                entity.HasKey(e => new { e.Storecode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("storesbal");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");
            });

            modelBuilder.Entity<Storesusers>(entity =>
            {
                entity.HasKey(e => new { e.Storecode, e.Personcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("storesusers");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Personblocked).HasColumnName("personblocked");

                entity.Property(e => e.Storecomment)
                    .HasColumnName("storecomment")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tattrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Tatpos, e.Tatobject, e.TransTime })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("tattrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Tatpos).HasColumnName("tatpos");

                entity.Property(e => e.Tatobject)
                    .HasColumnName("tatobject")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Jobranchcode)
                    .IsRequired()
                    .HasColumnName("jobranchcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Jopatientcode).HasColumnName("jopatientcode");

                entity.Property(e => e.Samplecode).HasColumnName("samplecode");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tatobjecttype).HasColumnName("tatobjecttype");

                entity.Property(e => e.Tattime).HasColumnName("tattime");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempAging>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.TransTime, e.AgingDays, e.Personcode });

                entity.ToTable("temp_aging");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.AgingDays).HasColumnName("aging_days");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AgingDaysDescr)
                    .IsRequired()
                    .HasColumnName("aging_days_descr")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Personname)
                    .IsRequired()
                    .HasColumnName("personname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotValue)
                    .HasColumnName("tot_value")
                    .HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<TempAsh1>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.RefDatetime, e.RefSource, e.Branchcode, e.Patientcode, e.Reservationdate, e.Reservationtime, e.Testcode, e.Reservationsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_ash1");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RefDatetime)
                    .HasColumnName("ref_datetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.RefSource).HasColumnName("ref_source");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Reservationdate)
                    .HasColumnName("reservationdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reservationtime)
                    .HasColumnName("reservationtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Reservationsno).HasColumnName("reservationsno");

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Refdoctorcode)
                    .HasColumnName("refdoctorcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempBarcodeLaser>(entity =>
            {
                entity.HasKey(e => e.Itembarcode);

                entity.ToTable("temp_barcode_laser");

                entity.Property(e => e.Itembarcode)
                    .HasColumnName("itembarcode")
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ItembarcodeText)
                    .IsRequired()
                    .HasColumnName("itembarcode_text")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Itemsaleprice)
                    .HasColumnName("itemsaleprice")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Suppliercode)
                    .IsRequired()
                    .HasColumnName("suppliercode")
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmpsalguide>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.Branchname, e.Ptclassifdescr });

                entity.ToTable("temp_empsalguide");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchname)
                    .HasColumnName("branchname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifdescr)
                    .HasColumnName("ptclassifdescr")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Avgsal)
                    .HasColumnName("avgsal")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Basesaltype)
                    .IsRequired()
                    .HasColumnName("basesaltype")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Maxsal)
                    .HasColumnName("maxsal")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Minsal)
                    .HasColumnName("minsal")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Totcount).HasColumnName("totcount");
            });

            modelBuilder.Entity<TempEmpslip>(entity =>
            {
                entity.HasKey(e => new { e.Personname, e.Sdate, e.Fdate, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_empslip");

                entity.HasIndex(e => new { e.Personcode, e.Sdate, e.Fdate })
                    .HasName("temp_empslip_ndx20")
                    .IsUnique();

                entity.HasIndex(e => new { e.Branchcode, e.Sdate, e.Fdate, e.Personcode })
                    .HasName("temp_empslip_ndx10")
                    .IsUnique();

                entity.Property(e => e.Personname)
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Sdate)
                    .HasColumnName("sdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fdate)
                    .HasColumnName("fdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasColumnName("branchname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmpCominsurance)
                    .HasColumnName("emp_cominsurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpEarntax)
                    .HasColumnName("emp_earntax")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpEmpinsurance)
                    .HasColumnName("emp_empinsurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpInsurance)
                    .HasColumnName("emp_insurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpJoallow)
                    .HasColumnName("emp_joallow")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpSickdeduct)
                    .HasColumnName("emp_sickdeduct")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpSpecial)
                    .HasColumnName("emp_special")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpSpecialdeduct)
                    .HasColumnName("emp_specialdeduct")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpZamala)
                    .HasColumnName("emp_zamala")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsal08)
                    .HasColumnName("empsal08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Empsal09)
                    .HasColumnName("empsal09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emptimepermonth)
                    .HasColumnName("emptimepermonth")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Empyrlytaxfree)
                    .HasColumnName("empyrlytaxfree")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifcode40)
                    .IsRequired()
                    .HasColumnName("ptclassifcode40")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifdescr)
                    .IsRequired()
                    .HasColumnName("ptclassifdescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Slipcomment)
                    .HasColumnName("slipcomment")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Slipnop).HasColumnName("slipnop");

                entity.Property(e => e.SumBorrowpayvalue)
                    .HasColumnName("sum_borrowpayvalue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.SumEmergency)
                    .HasColumnName("sum_emergency")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumEmpbuys)
                    .HasColumnName("sum_empbuys")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumGiftvalue)
                    .HasColumnName("sum_giftvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumOffdays)
                    .HasColumnName("sum_offdays")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumPenaltyvalue)
                    .HasColumnName("sum_penaltyvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumSaltimededuction)
                    .HasColumnName("sum_saltimededuction")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumSaltimeextra)
                    .HasColumnName("sum_saltimeextra")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Upithn)
                    .HasColumnName("upithn")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmpslip2>(entity =>
            {
                entity.HasKey(e => new { e.Personname, e.Sdate, e.Fdate, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_empslip2");

                entity.Property(e => e.Personname)
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Sdate)
                    .HasColumnName("sdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fdate)
                    .HasColumnName("fdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasColumnName("branchname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmpCominsurance)
                    .HasColumnName("emp_cominsurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpEarntax)
                    .HasColumnName("emp_earntax")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpEmpinsurance)
                    .HasColumnName("emp_empinsurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpInsurance)
                    .HasColumnName("emp_insurance")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.EmpZamala)
                    .HasColumnName("emp_zamala")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifdescr)
                    .IsRequired()
                    .HasColumnName("ptclassifdescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.SumBorrowpayvalue)
                    .HasColumnName("sum_borrowpayvalue")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.SumEmpbuys)
                    .HasColumnName("sum_empbuys")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.SumGiftvalue)
                    .HasColumnName("sum_giftvalue")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.SumJoballow)
                    .HasColumnName("sum_joballow")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumOffdays)
                    .HasColumnName("sum_offdays")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.SumPenaltyvalue)
                    .HasColumnName("sum_penaltyvalue")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.SumSaltimededuction)
                    .HasColumnName("sum_saltimededuction")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.SumSaltimeextra)
                    .HasColumnName("sum_saltimeextra")
                    .HasColumnType("numeric(6, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempEmpslipx>(entity =>
            {
                entity.HasKey(e => new { e.Personname, e.Sdate, e.Fdate, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_empslipx");

                entity.Property(e => e.Personname)
                    .HasColumnName("personname")
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.Sdate)
                    .HasColumnName("sdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fdate)
                    .HasColumnName("fdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchname)
                    .IsRequired()
                    .HasColumnName("branchname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmpCominsurance)
                    .HasColumnName("emp_cominsurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpEarntax)
                    .HasColumnName("emp_earntax")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpEmpinsurance)
                    .HasColumnName("emp_empinsurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpInsurance)
                    .HasColumnName("emp_insurance")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EmpZamala)
                    .HasColumnName("emp_zamala")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Empextra)
                    .HasColumnName("empextra")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emphousing)
                    .HasColumnName("emphousing")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emprepresent)
                    .HasColumnName("emprepresent")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalFixed)
                    .HasColumnName("empsal_fixed")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.EmpsalVar)
                    .HasColumnName("empsal_var")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Empsalary)
                    .HasColumnName("empsalary")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Emptimepermonth)
                    .HasColumnName("emptimepermonth")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Empyrlytaxfree)
                    .HasColumnName("empyrlytaxfree")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Personslevel).HasColumnName("personslevel");

                entity.Property(e => e.Ptclassifcode)
                    .IsRequired()
                    .HasColumnName("ptclassifcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ptclassifdescr)
                    .IsRequired()
                    .HasColumnName("ptclassifdescr")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Slipcomment)
                    .HasColumnName("slipcomment")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Slipnop).HasColumnName("slipnop");

                entity.Property(e => e.SumBorrowpayvalue)
                    .HasColumnName("sum_borrowpayvalue")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.SumEmergency)
                    .HasColumnName("sum_emergency")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumEmpbuys)
                    .HasColumnName("sum_empbuys")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumGiftvalue)
                    .HasColumnName("sum_giftvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumOffdays)
                    .HasColumnName("sum_offdays")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumPenaltyvalue)
                    .HasColumnName("sum_penaltyvalue")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumSaltimededuction)
                    .HasColumnName("sum_saltimededuction")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.SumSaltimeextra)
                    .HasColumnName("sum_saltimeextra")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempFaDep>(entity =>
            {
                entity.HasKey(e => new { e.Faclassifdescr, e.Replineno });

                entity.ToTable("temp_fa_dep");

                entity.Property(e => e.Faclassifdescr)
                    .HasColumnName("faclassifdescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Replineno).HasColumnName("replineno");

                entity.Property(e => e.Replinedescr)
                    .IsRequired()
                    .HasColumnName("replinedescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Repvalue)
                    .HasColumnName("repvalue")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<TempFatStatus>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Doccode, e.RDocnumber, e.Docdate })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_fat_status");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RDocnumber)
                    .HasColumnName("r_docnumber")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TempInv5>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Productidno, e.Transno });

                entity.ToTable("temp_inv5");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Productidno)
                    .HasColumnName("productidno")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transno).HasColumnName("transno");

                entity.Property(e => e.Libdata)
                    .HasColumnName("libdata")
                    .HasColumnType("image");

                entity.Property(e => e.Transvalue)
                    .HasColumnName("transvalue")
                    .HasColumnType("decimal(7, 2)");
            });

            modelBuilder.Entity<TempInv6>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Productidno, e.Transno1, e.Transno2 });

                entity.ToTable("temp_inv6");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Productidno)
                    .HasColumnName("productidno")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Transno1).HasColumnName("transno1");

                entity.Property(e => e.Transno2).HasColumnName("transno2");

                entity.Property(e => e.Libdata)
                    .HasColumnName("libdata")
                    .HasColumnType("image");

                entity.Property(e => e.Luid)
                    .IsRequired()
                    .HasColumnName("luid")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Luiddate)
                    .HasColumnName("luiddate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TempInvoices>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.Branchcode, e.Doccode, e.Docnumber, e.Docdate });

                entity.ToTable("temp_invoices");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.Docdate)
                    .HasColumnName("docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Val1)
                    .HasColumnName("val1")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Val2)
                    .HasColumnName("val2")
                    .HasColumnType("decimal(15, 4)");

                entity.Property(e => e.Val3)
                    .HasColumnName("val3")
                    .HasColumnType("decimal(15, 4)");
            });

            modelBuilder.Entity<TempPatientdataTest>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Patientdate, e.Dbltestflag });

                entity.ToTable("temp_patientdata_test");

                entity.HasIndex(e => e.Usercode)
                    .HasName("temp_patientdata_test_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Patientdate)
                    .HasColumnName("patientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dbltestflag).HasColumnName("dbltestflag");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempPatientdataTest2>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.Usersno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_patientdata_test2");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Usersno).HasColumnName("usersno");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Paramcode).HasColumnName("paramcode");

                entity.Property(e => e.Paramname)
                    .HasColumnName("paramname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Paramvalue)
                    .HasColumnName("paramvalue")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Patientdate)
                    .HasColumnName("patientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Patienttime)
                    .HasColumnName("patienttime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testname)
                    .HasColumnName("testname")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Temppic>(entity =>
            {
                entity.HasKey(e => new { e.Phcode, e.Usercode, e.Patientdate, e.Testcode, e.Linesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temppic");

                entity.Property(e => e.Phcode)
                    .HasColumnName("phcode")
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Patientdate)
                    .HasColumnName("patientdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Linesno).HasColumnName("linesno");

                entity.Property(e => e.Testname)
                    .HasColumnName("testname")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Testprice)
                    .HasColumnName("testprice")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Testtype).HasColumnName("testtype");
            });

            modelBuilder.Entity<TempR4>(entity =>
            {
                entity.HasKey(e => new { e.Usersno, e.Branchcode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_r4");

                entity.Property(e => e.Usersno).HasColumnName("usersno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Itemmax)
                    .HasColumnName("itemmax")
                    .HasColumnType("decimal(9, 1)");

                entity.Property(e => e.Itemmonth)
                    .HasColumnName("itemmonth")
                    .HasColumnType("decimal(9, 1)");

                entity.Property(e => e.Itemneed)
                    .HasColumnName("itemneed")
                    .HasColumnType("decimal(9, 1)");

                entity.Property(e => e.Itemnim)
                    .HasColumnName("itemnim")
                    .HasColumnType("decimal(9, 1)");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(9, 1)");
            });

            modelBuilder.Entity<TempR5>(entity =>
            {
                entity.HasKey(e => e.Itemcode);

                entity.ToTable("temp_r_5");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasColumnName("brand")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemArabic)
                    .HasColumnName("item_arabic")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PhA)
                    .HasColumnName("ph_a")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.PhB)
                    .HasColumnName("ph_b")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.PhC)
                    .HasColumnName("ph_c")
                    .HasColumnType("numeric(1, 0)");
            });

            modelBuilder.Entity<TempRFs1>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_r_fs1");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Mainstore)
                    .HasColumnName("mainstore")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRFs1Old>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.Itemcode });

                entity.ToTable("temp_r_fs1_old");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRIs>(entity =>
            {
                entity.HasKey(e => e.Icode);

                entity.ToTable("temp_r_is");

                entity.Property(e => e.Icode)
                    .HasColumnName("icode")
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Iname)
                    .IsRequired()
                    .HasColumnName("iname")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRIsBak>(entity =>
            {
                entity.HasKey(e => e.Icode);

                entity.ToTable("temp_r_is_bak");

                entity.Property(e => e.Icode)
                    .HasColumnName("icode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Iname)
                    .IsRequired()
                    .HasColumnName("iname")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRPs>(entity =>
            {
                entity.HasKey(e => e.Pcode);

                entity.ToTable("temp_r_ps");

                entity.Property(e => e.Pcode)
                    .HasColumnName("pcode")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Pname)
                    .IsRequired()
                    .HasColumnName("pname")
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRPsBak>(entity =>
            {
                entity.HasKey(e => e.Pcode);

                entity.ToTable("temp_r_ps_bak");

                entity.Property(e => e.Pcode)
                    .HasColumnName("pcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Pname)
                    .IsRequired()
                    .HasColumnName("pname")
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRPsCopy>(entity =>
            {
                entity.HasKey(e => e.Pcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_r_ps_copy");

                entity.Property(e => e.Pcode)
                    .HasColumnName("pcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Pname)
                    .IsRequired()
                    .HasColumnName("pname")
                    .HasMaxLength(35)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempRSec>(entity =>
            {
                entity.HasKey(e => e.Branchcode);

                entity.ToTable("temp_r_sec");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Secon).HasColumnName("secon");
            });

            modelBuilder.Entity<TempRTrans2>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Usercode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_r_trans2");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BranchCode)
                    .HasColumnName("branch_code")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Fdate)
                    .HasColumnName("fdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemnowqty)
                    .HasColumnName("itemnowqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemvalue)
                    .HasColumnName("itemvalue")
                    .HasColumnType("decimal(11, 2)");

                entity.Property(e => e.Orderitem).HasColumnName("orderitem");

                entity.Property(e => e.Sdate)
                    .HasColumnName("sdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TempRTrans2big>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Usercode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_r_trans2big");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BranchCode)
                    .HasColumnName("branch_code")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Fdate)
                    .HasColumnName("fdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Itemnowqty)
                    .HasColumnName("itemnowqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.Itemvalue)
                    .HasColumnName("itemvalue")
                    .HasColumnType("decimal(11, 2)");

                entity.Property(e => e.Orderitem).HasColumnName("orderitem");

                entity.Property(e => e.Sdate)
                    .HasColumnName("sdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TempSnos>(entity =>
            {
                entity.HasKey(e => e.Usercode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_snos");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.PosShiftclosing)
                    .HasColumnName("pos_shiftclosing")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.UserCashinhand)
                    .HasColumnName("user_cashinhand")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.UserCheqsno).HasColumnName("user_cheqsno");

                entity.Property(e => e.UserIsno).HasColumnName("user_isno");

                entity.Property(e => e.UserPcode).HasColumnName("user_pcode");

                entity.Property(e => e.UserRsno).HasColumnName("user_rsno");
            });

            modelBuilder.Entity<TempStock>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.TransTime, e.Vyear, e.Vmonth, e.Vaccitemcode });

                entity.ToTable("temp_stock");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Vyear).HasColumnName("vyear");

                entity.Property(e => e.Vmonth).HasColumnName("vmonth");

                entity.Property(e => e.Vaccitemcode)
                    .HasColumnName("vaccitemcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Vamount)
                    .HasColumnName("vamount")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Vmonthdescr)
                    .IsRequired()
                    .HasColumnName("vmonthdescr")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vname)
                    .HasColumnName("vname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vvalue)
                    .HasColumnName("vvalue")
                    .HasColumnType("decimal(15, 2)");
            });

            modelBuilder.Entity<TempStorebalDate>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Newqty })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("temp_storebal_date");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(12, 5)");
            });

            modelBuilder.Entity<TempStorebalDateOld>(entity =>
            {
                entity.HasKey(e => new { e.Itemcode, e.Newqty });

                entity.ToTable("temp_storebal_date_old");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Newqty)
                    .HasColumnName("newqty")
                    .HasColumnType("decimal(9, 3)");
            });

            modelBuilder.Entity<TempUTselect>(entity =>
            {
                entity.HasKey(e => e.Tsno);

                entity.ToTable("temp_u_tselect");

                entity.Property(e => e.Tsno)
                    .HasColumnName("tsno")
                    .ValueGeneratedNever();

                entity.Property(e => e.Tfname)
                    .IsRequired()
                    .HasColumnName("tfname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tname)
                    .IsRequired()
                    .HasColumnName("tname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tselect).HasColumnName("tselect");
            });

            modelBuilder.Entity<Testanames>(entity =>
            {
                entity.HasKey(e => e.Testcode);

                entity.ToTable("testanames");

                entity.Property(e => e.Testcode)
                    .HasColumnName("testcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testaname)
                    .IsRequired()
                    .HasColumnName("testaname")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testdata>(entity =>
            {
                entity.HasKey(e => e.Testcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testdata");

                entity.Property(e => e.Testcode)
                    .HasColumnName("testcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Daysforresults).HasColumnName("daysforresults");

                entity.Property(e => e.Depservice)
                    .HasColumnName("depservice")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExpcodeIncome).HasColumnName("expcode_income");

                entity.Property(e => e.Extrabarcode).HasColumnName("extrabarcode");

                entity.Property(e => e.Invcomp)
                    .HasColumnName("invcomp")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.Miclassif).HasColumnName("miclassif");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performlabunitcode).HasColumnName("performlabunitcode");

                entity.Property(e => e.Resulttype).HasColumnName("resulttype");

                entity.Property(e => e.Serviceglobalcode)
                    .HasColumnName("serviceglobalcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Sortinggroup).HasColumnName("sortinggroup");

                entity.Property(e => e.Testblock).HasColumnName("testblock");

                entity.Property(e => e.Testcode2).HasColumnName("testcode2");

                entity.Property(e => e.Testcodestr)
                    .IsRequired()
                    .HasColumnName("testcodestr")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Testcostprice)
                    .HasColumnName("testcostprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testlevel)
                    .HasColumnName("testlevel")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Testname)
                    .IsRequired()
                    .HasColumnName("testname")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Testonweb)
                    .HasColumnName("testonweb")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Testpricelist).HasColumnName("testpricelist");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.Testvisit2).HasColumnName("testvisit2");

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf3)
                    .HasColumnName("vf3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vf4)
                    .HasColumnName("vf4")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testdataextrabc>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Labelno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testdataextrabc");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Labelno).HasColumnName("labelno");

                entity.Property(e => e.Labelblock).HasColumnName("labelblock");

                entity.Property(e => e.Labeltext)
                    .IsRequired()
                    .HasColumnName("labeltext")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestdataScan>(entity =>
            {
                entity.HasKey(e => e.Testcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testdata_scan");

                entity.Property(e => e.Testcode)
                    .HasColumnName("testcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Costcentercode)
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Daysforresults).HasColumnName("daysforresults");

                entity.Property(e => e.ExpcodeIncome).HasColumnName("expcode_income");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Labunitcode).HasColumnName("labunitcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performlabunitcode).HasColumnName("performlabunitcode");

                entity.Property(e => e.Sortinggroup).HasColumnName("sortinggroup");

                entity.Property(e => e.Testcostprice)
                    .HasColumnName("testcostprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Testname)
                    .IsRequired()
                    .HasColumnName("testname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Testonweb)
                    .HasColumnName("testonweb")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Testpricelist).HasColumnName("testpricelist");

                entity.Property(e => e.Testtype).HasColumnName("testtype");
            });

            modelBuilder.Entity<Testdays>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Dayno, e.Branchcode });

                entity.ToTable("testdays");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Dayno).HasColumnName("dayno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Lasttime)
                    .IsRequired()
                    .HasColumnName("lasttime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TestdayNomoreuse)
                    .HasColumnName("testday_nomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testdaystrans>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Dayno, e.Branchcode, e.ModifLastupdate });

                entity.ToTable("testdaystrans");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Dayno).HasColumnName("dayno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lasttime)
                    .IsRequired()
                    .HasColumnName("lasttime")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TestdayNomoreuse)
                    .HasColumnName("testday_nomoreuse")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testfixedcomment>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Testcommentsno });

                entity.ToTable("testfixedcomment");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testcommentsno).HasColumnName("testcommentsno");

                entity.Property(e => e.Commenttitle)
                    .HasColumnName("commenttitle")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testcomment)
                    .HasColumnName("testcomment")
                    .HasColumnType("text");

                entity.Property(e => e.Testcommentdel).HasColumnName("testcommentdel");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testfixedcomments>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Commentlineno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testfixedcomments");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Commentlineno).HasColumnName("commentlineno");

                entity.Property(e => e.Linebold).HasColumnName("linebold");

                entity.Property(e => e.Linecomment)
                    .HasColumnName("linecomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Linefontsize).HasColumnName("linefontsize");

                entity.Property(e => e.Lineitalic).HasColumnName("lineitalic");

                entity.Property(e => e.Linenooftabs).HasColumnName("linenooftabs");

                entity.Property(e => e.Lineprotected).HasColumnName("lineprotected");

                entity.Property(e => e.Lineunderline).HasColumnName("lineunderline");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Testgroups>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Testgroup })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testgroups");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testgroup)
                    .HasColumnName("testgroup")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testgroupblock).HasColumnName("testgroupblock");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testimages>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Testcodesno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testimages");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testcodesno).HasColumnName("testcodesno");

                entity.Property(e => e.Imagecomment)
                    .HasColumnName("imagecomment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Imagetype).HasColumnName("imagetype");

                entity.Property(e => e.Itempicture)
                    .HasColumnName("itempicture")
                    .HasColumnType("image");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testitems>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Itemcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testitems");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Itemcode)
                    .HasColumnName("itemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Itemqty)
                    .HasColumnName("itemqty")
                    .HasColumnType("decimal(9, 5)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Samplecon).HasColumnName("samplecon");

                entity.Property(e => e.Uniqueconsumable).HasColumnName("uniqueconsumable");

                entity.Property(e => e.Uniqueuconsumable).HasColumnName("uniqueuconsumable");
            });

            modelBuilder.Entity<Testnames>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Testname });

                entity.ToTable("testnames");

                entity.HasIndex(e => new { e.Testcode, e.Testname })
                    .HasName("testname_ndx")
                    .IsUnique();

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testname)
                    .HasColumnName("testname")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testaname)
                    .HasColumnName("testaname")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Testnameabbrev)
                    .HasColumnName("testnameabbrev")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Testnamedel)
                    .HasColumnName("testnamedel")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testoutprices>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Outlabcode, e.Branchcode });

                entity.ToTable("testoutprices");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Outlabcode)
                    .HasColumnName("outlabcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Outlabblock)
                    .HasColumnName("outlabblock")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Outlabdef).HasColumnName("outlabdef");

                entity.Property(e => e.Testoutprice)
                    .HasColumnName("testoutprice")
                    .HasColumnType("decimal(7, 2)");
            });

            modelBuilder.Entity<Testouttrans>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Patientcode, e.Testcode, e.Transsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testouttrans");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Transsno).HasColumnName("transsno");

                entity.Property(e => e.Outlabcode)
                    .IsRequired()
                    .HasColumnName("outlabcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testout).HasColumnName("testout");

                entity.Property(e => e.Testoutgetdate)
                    .HasColumnName("testoutgetdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testoutprice)
                    .HasColumnName("testoutprice")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transcomments)
                    .HasColumnName("transcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testparameters>(entity =>
            {
                entity.HasKey(e => e.Parametercode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testparameters");

                entity.HasIndex(e => e.Parametercode)
                    .HasName("testparameters_ndx1");

                entity.HasIndex(e => e.Testcode)
                    .HasName("testparameters_ndx2");

                entity.Property(e => e.Parametercode)
                    .HasColumnName("parametercode")
                    .ValueGeneratedNever();

                entity.Property(e => e.MachineSymbol)
                    .HasColumnName("machine_symbol")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Machinecode)
                    .HasColumnName("machinecode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Parametername)
                    .HasColumnName("parametername")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Parameterunit).HasColumnName("parameterunit");

                entity.Property(e => e.Paramno).HasColumnName("paramno");

                entity.Property(e => e.Paramtypecode).HasColumnName("paramtypecode");

                entity.Property(e => e.Pbold).HasColumnName("pbold");

                entity.Property(e => e.Pfontsize).HasColumnName("pfontsize");

                entity.Property(e => e.Pitalic).HasColumnName("pitalic");

                entity.Property(e => e.Punderline).HasColumnName("punderline");

                entity.Property(e => e.Samplecode).HasColumnName("samplecode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testparamdel)
                    .HasColumnName("testparamdel")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TestparameterOrder).HasColumnName("testparameter_order");
            });

            modelBuilder.Entity<TestparamMchs>(entity =>
            {
                entity.HasKey(e => new { e.Parametercode, e.Parameterchoice });

                entity.ToTable("testparam_mchs");

                entity.Property(e => e.Parametercode).HasColumnName("parametercode");

                entity.Property(e => e.Parameterchoice)
                    .HasColumnName("parameterchoice")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testparamdel)
                    .HasColumnName("testparamdel")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testperforming>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Branchcode });

                entity.ToTable("testperforming");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performbranchcode)
                    .IsRequired()
                    .HasColumnName("performbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Performnoofdays).HasColumnName("performnoofdays");

                entity.Property(e => e.Performoutside).HasColumnName("performoutside");
            });

            modelBuilder.Entity<Testperformunits>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Performlabunitcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testperformunits");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Performlabunitcode).HasColumnName("performlabunitcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performunitlock).HasColumnName("performunitlock");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testplantsoptions>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Plantoptiondescr });

                entity.ToTable("testplantsoptions");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Plantoptiondescr)
                    .HasColumnName("plantoptiondescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plantoptionsno).HasColumnName("plantoptionsno");
            });

            modelBuilder.Entity<Testpreparation>(entity =>
            {
                entity.HasKey(e => e.Testcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testpreparation");

                entity.Property(e => e.Testcode)
                    .HasColumnName("testcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testprepdescr)
                    .HasColumnName("testprepdescr")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Testpreparations>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Prepcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testpreparations");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Prepcode).HasColumnName("prepcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prepbold).HasColumnName("prepbold");

                entity.Property(e => e.Preptype).HasColumnName("preptype");

                entity.Property(e => e.Prepunderline).HasColumnName("prepunderline");

                entity.Property(e => e.Testpreporder).HasColumnName("testpreporder");
            });

            modelBuilder.Entity<Testprices>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Pcategorycode });

                entity.ToTable("testprices");

                entity.HasIndex(e => new { e.Testcode, e.Pcategorycode, e.Testprice })
                    .HasName("testprices_ndx1");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testprice)
                    .HasColumnName("testprice")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.Testpricedel)
                    .HasColumnName("testpricedel")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testpricesdep>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Pcategorycode, e.Testtype })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testpricesdep");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Testtype).HasColumnName("testtype");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testpricedep)
                    .HasColumnName("testpricedep")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testpricestrans>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Pcategorycode, e.TransTime });

                entity.ToTable("testpricestrans");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testprice)
                    .HasColumnName("testprice")
                    .HasColumnType("numeric(7, 2)");

                entity.Property(e => e.Testpricedel)
                    .HasColumnName("testpricedel")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testsamples>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Samplecode });

                entity.ToTable("testsamples");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Samplecode).HasColumnName("samplecode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sampleblock).HasColumnName("sampleblock");

                entity.Property(e => e.Samplesize)
                    .HasColumnName("samplesize")
                    .HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<Testsconflicts>(entity =>
            {
                entity.HasKey(e => new { e.Testcode, e.Testcode2 })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testsconflicts");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Testcode2).HasColumnName("testcode2");

                entity.Property(e => e.Conflictcomment)
                    .HasColumnName("conflictcomment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Testsmessages>(entity =>
            {
                entity.HasKey(e => e.Testcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("testsmessages");

                entity.Property(e => e.Testcode)
                    .HasColumnName("testcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testmessage)
                    .IsRequired()
                    .HasColumnName("testmessage")
                    .HasMaxLength(2300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Testsperforming>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Testcode });

                entity.ToTable("testsperforming");

                entity.HasIndex(e => e.Testcode)
                    .HasName("testsperforming_ndx1");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Performbranchcode)
                    .IsRequired()
                    .HasColumnName("performbranchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Performnoofdays).HasColumnName("performnoofdays");

                entity.Property(e => e.Performoutside).HasColumnName("performoutside");

                entity.Property(e => e.Testpriceout)
                    .HasColumnName("testpriceout")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tftable>(entity =>
            {
                entity.HasKey(e => e.Fname);

                entity.ToTable("tftable");

                entity.Property(e => e.Fname)
                    .HasColumnName("fname")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Fcount).HasColumnName("fcount");

                entity.Property(e => e.Tcount).HasColumnName("tcount");

                entity.Property(e => e.Tname)
                    .HasColumnName("tname")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tftablefix>(entity =>
            {
                entity.ToTable("tftablefix");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Dcount).HasColumnName("dcount");

                entity.Property(e => e.Indexname)
                    .IsRequired()
                    .HasColumnName("indexname")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tname)
                    .HasColumnName("tname")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tftablet>(entity =>
            {
                entity.HasKey(e => e.Fname);

                entity.ToTable("tftablet");

                entity.Property(e => e.Fname)
                    .HasColumnName("fname")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Fcount).HasColumnName("fcount");

                entity.Property(e => e.Tcount).HasColumnName("tcount");

                entity.Property(e => e.Tname)
                    .HasColumnName("tname")
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Transdoc>(entity =>
            {
                entity.HasKey(e => e.Doccode);

                entity.ToTable("transdoc");

                entity.Property(e => e.Doccode)
                    .HasColumnName("doccode")
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Docallow).HasColumnName("docallow");

                entity.Property(e => e.Docdescr)
                    .IsRequired()
                    .HasColumnName("docdescr")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Docorder).HasColumnName("docorder");
            });

            modelBuilder.Entity<Transprints>(entity =>
            {
                entity.HasKey(e => new { e.BranchcodeP, e.Transtype, e.Branchcode, e.Patientcode, e.Testcode, e.Docsno, e.Mitemname, e.Usercode, e.TransTime });

                entity.ToTable("transprints");

                entity.Property(e => e.BranchcodeP)
                    .HasColumnName("branchcode_p")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Transtype).HasColumnName("transtype");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Docsno).HasColumnName("docsno");

                entity.Property(e => e.Mitemname)
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Trips>(entity =>
            {
                entity.HasKey(e => new { e.Tripsno, e.Branchcode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("trips");

                entity.Property(e => e.Tripsno).HasColumnName("tripsno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Bcrate)
                    .HasColumnName("bcrate")
                    .HasColumnType("decimal(7, 4)");

                entity.Property(e => e.CarBranchcode)
                    .IsRequired()
                    .HasColumnName("car_branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carno)
                    .IsRequired()
                    .HasColumnName("carno")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CarrentCost)
                    .HasColumnName("carrent_cost")
                    .HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Carrented).HasColumnName("carrented");

                entity.Property(e => e.Carrentedtype).HasColumnName("carrentedtype");

                entity.Property(e => e.Cartacost)
                    .HasColumnName("cartacost")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Custcode)
                    .IsRequired()
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custdiscp)
                    .HasColumnName("custdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CustdiscpUsercode)
                    .HasColumnName("custdiscp_usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Docnumber)
                    .HasColumnName("docnumber")
                    .HasColumnType("decimal(10, 0)");

                entity.Property(e => e.DocnumberDocdate)
                    .HasColumnName("docnumber_docdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocnumberTransTime)
                    .HasColumnName("docnumber_trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocnumberUsercode)
                    .HasColumnName("docnumber_usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Drivercode)
                    .IsRequired()
                    .HasColumnName("drivercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Drivercode2)
                    .HasColumnName("drivercode2")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Drivergift)
                    .HasColumnName("drivergift")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Drivergift2)
                    .HasColumnName("drivergift2")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Kmdistance).HasColumnName("kmdistance");

                entity.Property(e => e.Kmreading1).HasColumnName("kmreading1");

                entity.Property(e => e.Kmreading2).HasColumnName("kmreading2");

                entity.Property(e => e.Noofpassengers).HasColumnName("noofpassengers");

                entity.Property(e => e.RentCarcapacitycode)
                    .IsRequired()
                    .HasColumnName("rent_carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Suppdiscp)
                    .HasColumnName("suppdiscp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.SuppdiscpUsercode)
                    .HasColumnName("suppdiscp_usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.TripBcurrency).HasColumnName("trip_bcurrency");

                entity.Property(e => e.TripCarcapacitycode)
                    .IsRequired()
                    .HasColumnName("trip_carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TripPrice)
                    .HasColumnName("trip_price")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Tripcode).HasColumnName("tripcode");

                entity.Property(e => e.Tripcomments)
                    .HasColumnName("tripcomments")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tripdate)
                    .HasColumnName("tripdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TripdateReal)
                    .HasColumnName("tripdate_real")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripdone).HasColumnName("tripdone");

                entity.Property(e => e.Tripftime)
                    .HasColumnName("tripftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripnoshow).HasColumnName("tripnoshow");

                entity.Property(e => e.Triporderno).HasColumnName("triporderno");

                entity.Property(e => e.Tripprinted).HasColumnName("tripprinted");

                entity.Property(e => e.Tripsalestaxp)
                    .HasColumnName("tripsalestaxp")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Tripspecialprice)
                    .HasColumnName("tripspecialprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Tripstartfrom)
                    .HasColumnName("tripstartfrom")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tripstime)
                    .HasColumnName("tripstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Triptime).HasColumnName("triptime");

                entity.Property(e => e.Triptimemin).HasColumnName("triptimemin");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Voucher)
                    .IsRequired()
                    .HasColumnName("voucher")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tripsdata>(entity =>
            {
                entity.HasKey(e => e.Tripcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("tripsdata");

                entity.Property(e => e.Tripcode)
                    .HasColumnName("tripcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripitemcode)
                    .HasColumnName("tripitemcode")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Tripname)
                    .IsRequired()
                    .HasColumnName("tripname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tripstddistance).HasColumnName("tripstddistance");

                entity.Property(e => e.Tripstdtime).HasColumnName("tripstdtime");

                entity.Property(e => e.Tripsymbol)
                    .IsRequired()
                    .HasColumnName("tripsymbol")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Triptype)
                    .IsRequired()
                    .HasColumnName("triptype")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tripsfiles>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Tripsno, e.Fileclassif, e.Fileno, e.Noofpassengers })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("tripsfiles");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Tripsno).HasColumnName("tripsno");

                entity.Property(e => e.Fileclassif)
                    .HasColumnName("fileclassif")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Fileno)
                    .HasColumnName("fileno")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Noofpassengers).HasColumnName("noofpassengers");

                entity.Property(e => e.TableDumped)
                    .HasColumnName("table_dumped")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripfiledel)
                    .IsRequired()
                    .HasColumnName("tripfiledel")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tripsgifts>(entity =>
            {
                entity.HasKey(e => new { e.Tripcode, e.Pcategorycode, e.Carcapacitycode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("tripsgifts");

                entity.Property(e => e.Tripcode).HasColumnName("tripcode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Carcapacitycode)
                    .HasColumnName("carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripgift)
                    .HasColumnName("tripgift")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Tripgift2)
                    .HasColumnName("tripgift2")
                    .HasColumnType("decimal(8, 2)");
            });

            modelBuilder.Entity<Tripsprices>(entity =>
            {
                entity.HasKey(e => new { e.Tripcode, e.Pcategorycode, e.Carcapacitycode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("tripsprices");

                entity.Property(e => e.Tripcode).HasColumnName("tripcode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Carcapacitycode)
                    .HasColumnName("carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Bcurrency).HasColumnName("bcurrency");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Tripprice)
                    .HasColumnName("tripprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Tripspecialprice)
                    .HasColumnName("tripspecialprice")
                    .HasColumnType("decimal(8, 2)");
            });

            modelBuilder.Entity<Tripspricesref>(entity =>
            {
                entity.HasKey(e => new { e.Fromdate, e.Todate, e.Priceref })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("tripspricesref");

                entity.Property(e => e.Fromdate)
                    .HasColumnName("fromdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Todate)
                    .HasColumnName("todate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Priceref).HasColumnName("priceref");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pricerefblock).HasColumnName("pricerefblock");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tripsrentprices>(entity =>
            {
                entity.HasKey(e => new { e.Tripcode, e.Pcategorycode, e.Carcapacitycode })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("tripsrentprices");

                entity.Property(e => e.Tripcode).HasColumnName("tripcode");

                entity.Property(e => e.Pcategorycode).HasColumnName("pcategorycode");

                entity.Property(e => e.Carcapacitycode)
                    .HasColumnName("carcapacitycode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Carrentprice)
                    .HasColumnName("carrentprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TskCustworkscomments>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Worksno });

                entity.ToTable("tsk_custworkscomments");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Worksno).HasColumnName("worksno");

                entity.Property(e => e.Workcomments)
                    .HasColumnName("workcomments")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<TskEmpworks>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Worksno });

                entity.ToTable("tsk_empworks");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Worksno).HasColumnName("worksno");

                entity.Property(e => e.CustCharges)
                    .HasColumnName("cust_charges")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.CustChargesCollect)
                    .HasColumnName("cust_charges_collect")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.CustComplaint).HasColumnName("cust_complaint");

                entity.Property(e => e.CustContract).HasColumnName("cust_contract");

                entity.Property(e => e.CustFeedback1).HasColumnName("cust_feedback1");

                entity.Property(e => e.CustFeedback2).HasColumnName("cust_feedback2");

                entity.Property(e => e.CustOrder).HasColumnName("cust_order");

                entity.Property(e => e.CustRepres)
                    .HasColumnName("cust_repres")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustSupplies).HasColumnName("cust_supplies");

                entity.Property(e => e.Custbranchcode)
                    .HasColumnName("custbranchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Custcode)
                    .IsRequired()
                    .HasColumnName("custcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Custvisittype).HasColumnName("custvisittype");

                entity.Property(e => e.Personcode)
                    .IsRequired()
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RefReceivedate)
                    .HasColumnName("ref_receivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.RefServiceorder).HasColumnName("ref_serviceorder");

                entity.Property(e => e.Startstime)
                    .HasColumnName("startstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.WorkLaborcost)
                    .HasColumnName("work_laborcost")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.WorkOthercost)
                    .HasColumnName("work_othercost")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Workclassif1).HasColumnName("workclassif1");

                entity.Property(e => e.Workclassif2).HasColumnName("workclassif2");

                entity.Property(e => e.Workdate)
                    .HasColumnName("workdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Workftime)
                    .HasColumnName("workftime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Worklocation).HasColumnName("worklocation");

                entity.Property(e => e.Worknature).HasColumnName("worknature");

                entity.Property(e => e.Workpriority).HasColumnName("workpriority");

                entity.Property(e => e.Workstime)
                    .HasColumnName("workstime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Worktransportcost)
                    .HasColumnName("worktransportcost")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Worktype).HasColumnName("worktype");
            });

            modelBuilder.Entity<TskEmpworkscomments>(entity =>
            {
                entity.HasKey(e => new { e.Worksno, e.Branchcode });

                entity.ToTable("tsk_empworkscomments");

                entity.Property(e => e.Worksno).HasColumnName("worksno");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Workcomments)
                    .HasColumnName("workcomments")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Unitreportsign>(entity =>
            {
                entity.HasKey(e => e.Unitcode)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("unitreportsign");

                entity.Property(e => e.Unitcode)
                    .HasColumnName("unitcode")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Unitsignl1)
                    .HasColumnName("unitsignl1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsignl2)
                    .HasColumnName("unitsignl2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsignl3)
                    .HasColumnName("unitsignl3")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsignr1)
                    .HasColumnName("unitsignr1")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsignr2)
                    .HasColumnName("unitsignr2")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Unitsignr3)
                    .HasColumnName("unitsignr3")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Usergroups>(entity =>
            {
                entity.HasKey(e => e.Usergroup);

                entity.ToTable("usergroups");

                entity.Property(e => e.Usergroup)
                    .HasColumnName("usergroup")
                    .ValueGeneratedNever();

                entity.Property(e => e.Groupblocked).HasColumnName("groupblocked");

                entity.Property(e => e.Groupdescr)
                    .IsRequired()
                    .HasColumnName("groupdescr")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.Userid)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("users");

                entity.HasIndex(e => e.Usercode)
                    .HasName("users_ndx1");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Entryuser)
                    .HasColumnName("entryuser")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .IsRequired()
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Storecode)
                    .HasColumnName("storecode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UserNomore)
                    .IsRequired()
                    .HasColumnName("user_nomore")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Userdate)
                    .HasColumnName("userdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userentry)
                    .IsRequired()
                    .HasColumnName("userentry")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usergroup).HasColumnName("usergroup");

                entity.Property(e => e.Userlanguage)
                    .HasColumnName("userlanguage")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Userno).HasColumnName("userno");

                entity.Property(e => e.Userpassword)
                    .IsRequired()
                    .HasColumnName("userpassword")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Usersfavorites>(entity =>
            {
                entity.HasKey(e => new { e.Usercode, e.Mitemname })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("usersfavorites");

                entity.Property(e => e.Usercode)
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemname)
                    .HasColumnName("mitemname")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Usersx>(entity =>
            {
                entity.HasKey(e => e.Userid)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("usersx");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Mitemsys)
                    .IsRequired()
                    .HasColumnName("mitemsys")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserNomore)
                    .IsRequired()
                    .HasColumnName("user_nomore")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Userdate)
                    .HasColumnName("userdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userentry)
                    .IsRequired()
                    .HasColumnName("userentry")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Usergroup).HasColumnName("usergroup");

                entity.Property(e => e.Userlanguage)
                    .HasColumnName("userlanguage")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Userpassword)
                    .IsRequired()
                    .HasColumnName("userpassword")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Visitortickets>(entity =>
            {
                entity.HasKey(e => new { e.Branchcode, e.Ticketdate, e.Ticketsno });

                entity.ToTable("visitortickets");

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Ticketdate)
                    .HasColumnName("ticketdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ticketsno).HasColumnName("ticketsno");

                entity.Property(e => e.Branchcode2)
                    .HasColumnName("branchcode2")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Usercode)
                    .IsRequired()
                    .HasColumnName("usercode")
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Weekdays>(entity =>
            {
                entity.HasKey(e => e.Dayno);

                entity.ToTable("weekdays");

                entity.Property(e => e.Dayno)
                    .HasColumnName("dayno")
                    .ValueGeneratedNever();

                entity.Property(e => e.DayNo1).HasColumnName("day_no");

                entity.Property(e => e.Dayename)
                    .HasColumnName("dayename")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Dayname)
                    .IsRequired()
                    .HasColumnName("dayname")
                    .HasMaxLength(9)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Weeklyleaves>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Dayno });

                entity.ToTable("weeklyleaves");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Dayno)
                    .HasColumnName("dayno")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifLastupdate)
                    .HasColumnName("modif_lastupdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Weeklyblocked)
                    .HasColumnName("weeklyblocked")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Wpatientcomments>(entity =>
            {
                entity.HasKey(e => new { e.Personcode, e.Branchcode, e.Patientcode, e.Testcode, e.Commentsno })
                    .ForSqlServerIsClustered(false);

                entity.ToTable("wpatientcomments");

                entity.Property(e => e.Personcode)
                    .HasColumnName("personcode")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Branchcode)
                    .HasColumnName("branchcode")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Patientcode).HasColumnName("patientcode");

                entity.Property(e => e.Testcode).HasColumnName("testcode");

                entity.Property(e => e.Commentsno).HasColumnName("commentsno");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<Wusers>(entity =>
            {
                entity.HasKey(e => e.Userid)
                    .ForSqlServerIsClustered(false);

                entity.ToTable("wusers");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Entryuser)
                    .IsRequired()
                    .HasColumnName("entryuser")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasColumnName("pic")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ptcode)
                    .IsRequired()
                    .HasColumnName("ptcode")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Querydays).HasColumnName("querydays");

                entity.Property(e => e.TransTime)
                    .HasColumnName("trans_time")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userexpiry)
                    .HasColumnName("userexpiry")
                    .HasColumnType("datetime");

                entity.Property(e => e.Userno).HasColumnName("userno");

                entity.Property(e => e.Userpasswd)
                    .IsRequired()
                    .HasColumnName("userpasswd")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Vf1)
                    .HasColumnName("vf1")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vf2)
                    .HasColumnName("vf2")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Vf3)
                    .HasColumnName("vf3")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });
        }
    }
}
